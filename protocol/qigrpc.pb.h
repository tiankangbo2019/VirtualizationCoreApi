// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qigrpc.proto

#ifndef PROTOBUF_INCLUDED_qigrpc_2eproto
#define PROTOBUF_INCLUDED_qigrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_qigrpc_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_qigrpc_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_qigrpc_2eproto();
namespace Qigrpc {
class requestAudio;
class requestAudioDefaultTypeInternal;
extern requestAudioDefaultTypeInternal _requestAudio_default_instance_;
class requestClone;
class requestCloneDefaultTypeInternal;
extern requestCloneDefaultTypeInternal _requestClone_default_instance_;
class requestConfig;
class requestConfigDefaultTypeInternal;
extern requestConfigDefaultTypeInternal _requestConfig_default_instance_;
class requestImpAndexportVM;
class requestImpAndexportVMDefaultTypeInternal;
extern requestImpAndexportVMDefaultTypeInternal _requestImpAndexportVM_default_instance_;
class requestInstall;
class requestInstallDefaultTypeInternal;
extern requestInstallDefaultTypeInternal _requestInstall_default_instance_;
class requestNetwork;
class requestNetworkDefaultTypeInternal;
extern requestNetworkDefaultTypeInternal _requestNetwork_default_instance_;
class requestNull;
class requestNullDefaultTypeInternal;
extern requestNullDefaultTypeInternal _requestNull_default_instance_;
class requestP2P;
class requestP2PDefaultTypeInternal;
extern requestP2PDefaultTypeInternal _requestP2P_default_instance_;
class requestRdp;
class requestRdpDefaultTypeInternal;
extern requestRdpDefaultTypeInternal _requestRdp_default_instance_;
class requestRecord;
class requestRecordDefaultTypeInternal;
extern requestRecordDefaultTypeInternal _requestRecord_default_instance_;
class requestSerial;
class requestSerialDefaultTypeInternal;
extern requestSerialDefaultTypeInternal _requestSerial_default_instance_;
class requestSharefolder;
class requestSharefolderDefaultTypeInternal;
extern requestSharefolderDefaultTypeInternal _requestSharefolder_default_instance_;
class requestSimple;
class requestSimpleDefaultTypeInternal;
extern requestSimpleDefaultTypeInternal _requestSimple_default_instance_;
class requestSnapshot;
class requestSnapshotDefaultTypeInternal;
extern requestSnapshotDefaultTypeInternal _requestSnapshot_default_instance_;
class requestUSB;
class requestUSBDefaultTypeInternal;
extern requestUSBDefaultTypeInternal _requestUSB_default_instance_;
class requestVmExtends;
class requestVmExtendsDefaultTypeInternal;
extern requestVmExtendsDefaultTypeInternal _requestVmExtends_default_instance_;
class vcaReply;
class vcaReplyDefaultTypeInternal;
extern vcaReplyDefaultTypeInternal _vcaReply_default_instance_;
}  // namespace Qigrpc
namespace google {
namespace protobuf {
template<> ::Qigrpc::requestAudio* Arena::CreateMaybeMessage<::Qigrpc::requestAudio>(Arena*);
template<> ::Qigrpc::requestClone* Arena::CreateMaybeMessage<::Qigrpc::requestClone>(Arena*);
template<> ::Qigrpc::requestConfig* Arena::CreateMaybeMessage<::Qigrpc::requestConfig>(Arena*);
template<> ::Qigrpc::requestImpAndexportVM* Arena::CreateMaybeMessage<::Qigrpc::requestImpAndexportVM>(Arena*);
template<> ::Qigrpc::requestInstall* Arena::CreateMaybeMessage<::Qigrpc::requestInstall>(Arena*);
template<> ::Qigrpc::requestNetwork* Arena::CreateMaybeMessage<::Qigrpc::requestNetwork>(Arena*);
template<> ::Qigrpc::requestNull* Arena::CreateMaybeMessage<::Qigrpc::requestNull>(Arena*);
template<> ::Qigrpc::requestP2P* Arena::CreateMaybeMessage<::Qigrpc::requestP2P>(Arena*);
template<> ::Qigrpc::requestRdp* Arena::CreateMaybeMessage<::Qigrpc::requestRdp>(Arena*);
template<> ::Qigrpc::requestRecord* Arena::CreateMaybeMessage<::Qigrpc::requestRecord>(Arena*);
template<> ::Qigrpc::requestSerial* Arena::CreateMaybeMessage<::Qigrpc::requestSerial>(Arena*);
template<> ::Qigrpc::requestSharefolder* Arena::CreateMaybeMessage<::Qigrpc::requestSharefolder>(Arena*);
template<> ::Qigrpc::requestSimple* Arena::CreateMaybeMessage<::Qigrpc::requestSimple>(Arena*);
template<> ::Qigrpc::requestSnapshot* Arena::CreateMaybeMessage<::Qigrpc::requestSnapshot>(Arena*);
template<> ::Qigrpc::requestUSB* Arena::CreateMaybeMessage<::Qigrpc::requestUSB>(Arena*);
template<> ::Qigrpc::requestVmExtends* Arena::CreateMaybeMessage<::Qigrpc::requestVmExtends>(Arena*);
template<> ::Qigrpc::vcaReply* Arena::CreateMaybeMessage<::Qigrpc::vcaReply>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Qigrpc {

// ===================================================================

class requestNull final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestNull) */ {
 public:
  requestNull();
  virtual ~requestNull();

  requestNull(const requestNull& from);

  inline requestNull& operator=(const requestNull& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestNull(requestNull&& from) noexcept
    : requestNull() {
    *this = ::std::move(from);
  }

  inline requestNull& operator=(requestNull&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestNull& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestNull* internal_default_instance() {
    return reinterpret_cast<const requestNull*>(
               &_requestNull_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(requestNull* other);
  friend void swap(requestNull& a, requestNull& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestNull* New() const final {
    return CreateMaybeMessage<requestNull>(nullptr);
  }

  requestNull* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestNull>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestNull& from);
  void MergeFrom(const requestNull& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestNull* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Qigrpc.requestNull)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestSimple final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestSimple) */ {
 public:
  requestSimple();
  virtual ~requestSimple();

  requestSimple(const requestSimple& from);

  inline requestSimple& operator=(const requestSimple& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestSimple(requestSimple&& from) noexcept
    : requestSimple() {
    *this = ::std::move(from);
  }

  inline requestSimple& operator=(requestSimple&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestSimple& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestSimple* internal_default_instance() {
    return reinterpret_cast<const requestSimple*>(
               &_requestSimple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(requestSimple* other);
  friend void swap(requestSimple& a, requestSimple& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestSimple* New() const final {
    return CreateMaybeMessage<requestSimple>(nullptr);
  }

  requestSimple* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestSimple>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestSimple& from);
  void MergeFrom(const requestSimple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestSimple* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vmname = 2;
  void clear_vmname();
  static const int kVmnameFieldNumber = 2;
  const ::std::string& vmname() const;
  void set_vmname(const ::std::string& value);
  #if LANG_CXX11
  void set_vmname(::std::string&& value);
  #endif
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  ::std::string* mutable_vmname();
  ::std::string* release_vmname();
  void set_allocated_vmname(::std::string* vmname);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestSimple)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vmname_;
  ::google::protobuf::int32 vcamethod_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestSnapshot final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestSnapshot) */ {
 public:
  requestSnapshot();
  virtual ~requestSnapshot();

  requestSnapshot(const requestSnapshot& from);

  inline requestSnapshot& operator=(const requestSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestSnapshot(requestSnapshot&& from) noexcept
    : requestSnapshot() {
    *this = ::std::move(from);
  }

  inline requestSnapshot& operator=(requestSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestSnapshot* internal_default_instance() {
    return reinterpret_cast<const requestSnapshot*>(
               &_requestSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(requestSnapshot* other);
  friend void swap(requestSnapshot& a, requestSnapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestSnapshot* New() const final {
    return CreateMaybeMessage<requestSnapshot>(nullptr);
  }

  requestSnapshot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestSnapshot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestSnapshot& from);
  void MergeFrom(const requestSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestSnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vmname = 2;
  void clear_vmname();
  static const int kVmnameFieldNumber = 2;
  const ::std::string& vmname() const;
  void set_vmname(const ::std::string& value);
  #if LANG_CXX11
  void set_vmname(::std::string&& value);
  #endif
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  ::std::string* mutable_vmname();
  ::std::string* release_vmname();
  void set_allocated_vmname(::std::string* vmname);

  // string snapshotname = 3;
  void clear_snapshotname();
  static const int kSnapshotnameFieldNumber = 3;
  const ::std::string& snapshotname() const;
  void set_snapshotname(const ::std::string& value);
  #if LANG_CXX11
  void set_snapshotname(::std::string&& value);
  #endif
  void set_snapshotname(const char* value);
  void set_snapshotname(const char* value, size_t size);
  ::std::string* mutable_snapshotname();
  ::std::string* release_snapshotname();
  void set_allocated_snapshotname(::std::string* snapshotname);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestSnapshot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vmname_;
  ::google::protobuf::internal::ArenaStringPtr snapshotname_;
  ::google::protobuf::int32 vcamethod_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestClone final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestClone) */ {
 public:
  requestClone();
  virtual ~requestClone();

  requestClone(const requestClone& from);

  inline requestClone& operator=(const requestClone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestClone(requestClone&& from) noexcept
    : requestClone() {
    *this = ::std::move(from);
  }

  inline requestClone& operator=(requestClone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestClone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestClone* internal_default_instance() {
    return reinterpret_cast<const requestClone*>(
               &_requestClone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(requestClone* other);
  friend void swap(requestClone& a, requestClone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestClone* New() const final {
    return CreateMaybeMessage<requestClone>(nullptr);
  }

  requestClone* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestClone>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestClone& from);
  void MergeFrom(const requestClone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestClone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vmname = 2;
  void clear_vmname();
  static const int kVmnameFieldNumber = 2;
  const ::std::string& vmname() const;
  void set_vmname(const ::std::string& value);
  #if LANG_CXX11
  void set_vmname(::std::string&& value);
  #endif
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  ::std::string* mutable_vmname();
  ::std::string* release_vmname();
  void set_allocated_vmname(::std::string* vmname);

  // string targetvmname = 3;
  void clear_targetvmname();
  static const int kTargetvmnameFieldNumber = 3;
  const ::std::string& targetvmname() const;
  void set_targetvmname(const ::std::string& value);
  #if LANG_CXX11
  void set_targetvmname(::std::string&& value);
  #endif
  void set_targetvmname(const char* value);
  void set_targetvmname(const char* value, size_t size);
  ::std::string* mutable_targetvmname();
  ::std::string* release_targetvmname();
  void set_allocated_targetvmname(::std::string* targetvmname);

  // string basefolder = 4;
  void clear_basefolder();
  static const int kBasefolderFieldNumber = 4;
  const ::std::string& basefolder() const;
  void set_basefolder(const ::std::string& value);
  #if LANG_CXX11
  void set_basefolder(::std::string&& value);
  #endif
  void set_basefolder(const char* value);
  void set_basefolder(const char* value, size_t size);
  ::std::string* mutable_basefolder();
  ::std::string* release_basefolder();
  void set_allocated_basefolder(::std::string* basefolder);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // bool keepmacs = 5;
  void clear_keepmacs();
  static const int kKeepmacsFieldNumber = 5;
  bool keepmacs() const;
  void set_keepmacs(bool value);

  // bool keephwuuids = 6;
  void clear_keephwuuids();
  static const int kKeephwuuidsFieldNumber = 6;
  bool keephwuuids() const;
  void set_keephwuuids(bool value);

  // bool keepdiskname = 7;
  void clear_keepdiskname();
  static const int kKeepdisknameFieldNumber = 7;
  bool keepdiskname() const;
  void set_keepdiskname(bool value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestClone)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vmname_;
  ::google::protobuf::internal::ArenaStringPtr targetvmname_;
  ::google::protobuf::internal::ArenaStringPtr basefolder_;
  ::google::protobuf::int32 vcamethod_;
  bool keepmacs_;
  bool keephwuuids_;
  bool keepdiskname_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestInstall final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestInstall) */ {
 public:
  requestInstall();
  virtual ~requestInstall();

  requestInstall(const requestInstall& from);

  inline requestInstall& operator=(const requestInstall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestInstall(requestInstall&& from) noexcept
    : requestInstall() {
    *this = ::std::move(from);
  }

  inline requestInstall& operator=(requestInstall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestInstall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestInstall* internal_default_instance() {
    return reinterpret_cast<const requestInstall*>(
               &_requestInstall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(requestInstall* other);
  friend void swap(requestInstall& a, requestInstall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestInstall* New() const final {
    return CreateMaybeMessage<requestInstall>(nullptr);
  }

  requestInstall* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestInstall>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestInstall& from);
  void MergeFrom(const requestInstall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestInstall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vmname = 2;
  void clear_vmname();
  static const int kVmnameFieldNumber = 2;
  const ::std::string& vmname() const;
  void set_vmname(const ::std::string& value);
  #if LANG_CXX11
  void set_vmname(::std::string&& value);
  #endif
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  ::std::string* mutable_vmname();
  ::std::string* release_vmname();
  void set_allocated_vmname(::std::string* vmname);

  // string ostypeid = 3;
  void clear_ostypeid();
  static const int kOstypeidFieldNumber = 3;
  const ::std::string& ostypeid() const;
  void set_ostypeid(const ::std::string& value);
  #if LANG_CXX11
  void set_ostypeid(::std::string&& value);
  #endif
  void set_ostypeid(const char* value);
  void set_ostypeid(const char* value, size_t size);
  ::std::string* mutable_ostypeid();
  ::std::string* release_ostypeid();
  void set_allocated_ostypeid(::std::string* ostypeid);

  // string basefolder = 6;
  void clear_basefolder();
  static const int kBasefolderFieldNumber = 6;
  const ::std::string& basefolder() const;
  void set_basefolder(const ::std::string& value);
  #if LANG_CXX11
  void set_basefolder(::std::string&& value);
  #endif
  void set_basefolder(const char* value);
  void set_basefolder(const char* value, size_t size);
  ::std::string* mutable_basefolder();
  ::std::string* release_basefolder();
  void set_allocated_basefolder(::std::string* basefolder);

  // string sourcepath = 7;
  void clear_sourcepath();
  static const int kSourcepathFieldNumber = 7;
  const ::std::string& sourcepath() const;
  void set_sourcepath(const ::std::string& value);
  #if LANG_CXX11
  void set_sourcepath(::std::string&& value);
  #endif
  void set_sourcepath(const char* value);
  void set_sourcepath(const char* value, size_t size);
  ::std::string* mutable_sourcepath();
  ::std::string* release_sourcepath();
  void set_allocated_sourcepath(::std::string* sourcepath);

  // string storagebustype = 8;
  void clear_storagebustype();
  static const int kStoragebustypeFieldNumber = 8;
  const ::std::string& storagebustype() const;
  void set_storagebustype(const ::std::string& value);
  #if LANG_CXX11
  void set_storagebustype(::std::string&& value);
  #endif
  void set_storagebustype(const char* value);
  void set_storagebustype(const char* value, size_t size);
  ::std::string* mutable_storagebustype();
  ::std::string* release_storagebustype();
  void set_allocated_storagebustype(::std::string* storagebustype);

  // string diskformat = 10;
  void clear_diskformat();
  static const int kDiskformatFieldNumber = 10;
  const ::std::string& diskformat() const;
  void set_diskformat(const ::std::string& value);
  #if LANG_CXX11
  void set_diskformat(::std::string&& value);
  #endif
  void set_diskformat(const char* value);
  void set_diskformat(const char* value, size_t size);
  ::std::string* mutable_diskformat();
  ::std::string* release_diskformat();
  void set_allocated_diskformat(::std::string* diskformat);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // int32 cpucount = 4;
  void clear_cpucount();
  static const int kCpucountFieldNumber = 4;
  ::google::protobuf::int32 cpucount() const;
  void set_cpucount(::google::protobuf::int32 value);

  // int32 memorysize = 5;
  void clear_memorysize();
  static const int kMemorysizeFieldNumber = 5;
  ::google::protobuf::int32 memorysize() const;
  void set_memorysize(::google::protobuf::int32 value);

  // bool fix = 11;
  void clear_fix();
  static const int kFixFieldNumber = 11;
  bool fix() const;
  void set_fix(bool value);

  // int64 logicdisksize = 9;
  void clear_logicdisksize();
  static const int kLogicdisksizeFieldNumber = 9;
  ::google::protobuf::int64 logicdisksize() const;
  void set_logicdisksize(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestInstall)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vmname_;
  ::google::protobuf::internal::ArenaStringPtr ostypeid_;
  ::google::protobuf::internal::ArenaStringPtr basefolder_;
  ::google::protobuf::internal::ArenaStringPtr sourcepath_;
  ::google::protobuf::internal::ArenaStringPtr storagebustype_;
  ::google::protobuf::internal::ArenaStringPtr diskformat_;
  ::google::protobuf::int32 vcamethod_;
  ::google::protobuf::int32 cpucount_;
  ::google::protobuf::int32 memorysize_;
  bool fix_;
  ::google::protobuf::int64 logicdisksize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestImpAndexportVM final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestImpAndexportVM) */ {
 public:
  requestImpAndexportVM();
  virtual ~requestImpAndexportVM();

  requestImpAndexportVM(const requestImpAndexportVM& from);

  inline requestImpAndexportVM& operator=(const requestImpAndexportVM& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestImpAndexportVM(requestImpAndexportVM&& from) noexcept
    : requestImpAndexportVM() {
    *this = ::std::move(from);
  }

  inline requestImpAndexportVM& operator=(requestImpAndexportVM&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestImpAndexportVM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestImpAndexportVM* internal_default_instance() {
    return reinterpret_cast<const requestImpAndexportVM*>(
               &_requestImpAndexportVM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(requestImpAndexportVM* other);
  friend void swap(requestImpAndexportVM& a, requestImpAndexportVM& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestImpAndexportVM* New() const final {
    return CreateMaybeMessage<requestImpAndexportVM>(nullptr);
  }

  requestImpAndexportVM* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestImpAndexportVM>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestImpAndexportVM& from);
  void MergeFrom(const requestImpAndexportVM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestImpAndexportVM* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vmname = 2;
  void clear_vmname();
  static const int kVmnameFieldNumber = 2;
  const ::std::string& vmname() const;
  void set_vmname(const ::std::string& value);
  #if LANG_CXX11
  void set_vmname(::std::string&& value);
  #endif
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  ::std::string* mutable_vmname();
  ::std::string* release_vmname();
  void set_allocated_vmname(::std::string* vmname);

  // string ovapath = 3;
  void clear_ovapath();
  static const int kOvapathFieldNumber = 3;
  const ::std::string& ovapath() const;
  void set_ovapath(const ::std::string& value);
  #if LANG_CXX11
  void set_ovapath(::std::string&& value);
  #endif
  void set_ovapath(const char* value);
  void set_ovapath(const char* value, size_t size);
  ::std::string* mutable_ovapath();
  ::std::string* release_ovapath();
  void set_allocated_ovapath(::std::string* ovapath);

  // string exportpath = 4;
  void clear_exportpath();
  static const int kExportpathFieldNumber = 4;
  const ::std::string& exportpath() const;
  void set_exportpath(const ::std::string& value);
  #if LANG_CXX11
  void set_exportpath(::std::string&& value);
  #endif
  void set_exportpath(const char* value);
  void set_exportpath(const char* value, size_t size);
  ::std::string* mutable_exportpath();
  ::std::string* release_exportpath();
  void set_allocated_exportpath(::std::string* exportpath);

  // string ostypeid = 6;
  void clear_ostypeid();
  static const int kOstypeidFieldNumber = 6;
  const ::std::string& ostypeid() const;
  void set_ostypeid(const ::std::string& value);
  #if LANG_CXX11
  void set_ostypeid(::std::string&& value);
  #endif
  void set_ostypeid(const char* value);
  void set_ostypeid(const char* value, size_t size);
  ::std::string* mutable_ostypeid();
  ::std::string* release_ostypeid();
  void set_allocated_ostypeid(::std::string* ostypeid);

  // string basefolder = 10;
  void clear_basefolder();
  static const int kBasefolderFieldNumber = 10;
  const ::std::string& basefolder() const;
  void set_basefolder(const ::std::string& value);
  #if LANG_CXX11
  void set_basefolder(::std::string&& value);
  #endif
  void set_basefolder(const char* value);
  void set_basefolder(const char* value, size_t size);
  ::std::string* mutable_basefolder();
  ::std::string* release_basefolder();
  void set_allocated_basefolder(::std::string* basefolder);

  // string ovsfiletype = 11;
  void clear_ovsfiletype();
  static const int kOvsfiletypeFieldNumber = 11;
  const ::std::string& ovsfiletype() const;
  void set_ovsfiletype(const ::std::string& value);
  #if LANG_CXX11
  void set_ovsfiletype(::std::string&& value);
  #endif
  void set_ovsfiletype(const char* value);
  void set_ovsfiletype(const char* value, size_t size);
  ::std::string* mutable_ovsfiletype();
  ::std::string* release_ovsfiletype();
  void set_allocated_ovsfiletype(::std::string* ovsfiletype);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // int32 cpucount = 7;
  void clear_cpucount();
  static const int kCpucountFieldNumber = 7;
  ::google::protobuf::int32 cpucount() const;
  void set_cpucount(::google::protobuf::int32 value);

  // bool keepmac = 5;
  void clear_keepmac();
  static const int kKeepmacFieldNumber = 5;
  bool keepmac() const;
  void set_keepmac(bool value);

  // bool netup = 9;
  void clear_netup();
  static const int kNetupFieldNumber = 9;
  bool netup() const;
  void set_netup(bool value);

  // int32 memory = 8;
  void clear_memory();
  static const int kMemoryFieldNumber = 8;
  ::google::protobuf::int32 memory() const;
  void set_memory(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestImpAndexportVM)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vmname_;
  ::google::protobuf::internal::ArenaStringPtr ovapath_;
  ::google::protobuf::internal::ArenaStringPtr exportpath_;
  ::google::protobuf::internal::ArenaStringPtr ostypeid_;
  ::google::protobuf::internal::ArenaStringPtr basefolder_;
  ::google::protobuf::internal::ArenaStringPtr ovsfiletype_;
  ::google::protobuf::int32 vcamethod_;
  ::google::protobuf::int32 cpucount_;
  bool keepmac_;
  bool netup_;
  ::google::protobuf::int32 memory_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestNetwork final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestNetwork) */ {
 public:
  requestNetwork();
  virtual ~requestNetwork();

  requestNetwork(const requestNetwork& from);

  inline requestNetwork& operator=(const requestNetwork& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestNetwork(requestNetwork&& from) noexcept
    : requestNetwork() {
    *this = ::std::move(from);
  }

  inline requestNetwork& operator=(requestNetwork&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestNetwork& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestNetwork* internal_default_instance() {
    return reinterpret_cast<const requestNetwork*>(
               &_requestNetwork_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(requestNetwork* other);
  friend void swap(requestNetwork& a, requestNetwork& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestNetwork* New() const final {
    return CreateMaybeMessage<requestNetwork>(nullptr);
  }

  requestNetwork* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestNetwork>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestNetwork& from);
  void MergeFrom(const requestNetwork& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestNetwork* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vmname = 2;
  void clear_vmname();
  static const int kVmnameFieldNumber = 2;
  const ::std::string& vmname() const;
  void set_vmname(const ::std::string& value);
  #if LANG_CXX11
  void set_vmname(::std::string&& value);
  #endif
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  ::std::string* mutable_vmname();
  ::std::string* release_vmname();
  void set_allocated_vmname(::std::string* vmname);

  // string hostpciname = 4;
  void clear_hostpciname();
  static const int kHostpcinameFieldNumber = 4;
  const ::std::string& hostpciname() const;
  void set_hostpciname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostpciname(::std::string&& value);
  #endif
  void set_hostpciname(const char* value);
  void set_hostpciname(const char* value, size_t size);
  ::std::string* mutable_hostpciname();
  ::std::string* release_hostpciname();
  void set_allocated_hostpciname(::std::string* hostpciname);

  // string mac = 5;
  void clear_mac();
  static const int kMacFieldNumber = 5;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // int32 slot = 3;
  void clear_slot();
  static const int kSlotFieldNumber = 3;
  ::google::protobuf::int32 slot() const;
  void set_slot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestNetwork)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vmname_;
  ::google::protobuf::internal::ArenaStringPtr hostpciname_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::int32 vcamethod_;
  ::google::protobuf::int32 slot_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestRdp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestRdp) */ {
 public:
  requestRdp();
  virtual ~requestRdp();

  requestRdp(const requestRdp& from);

  inline requestRdp& operator=(const requestRdp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestRdp(requestRdp&& from) noexcept
    : requestRdp() {
    *this = ::std::move(from);
  }

  inline requestRdp& operator=(requestRdp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestRdp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestRdp* internal_default_instance() {
    return reinterpret_cast<const requestRdp*>(
               &_requestRdp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(requestRdp* other);
  friend void swap(requestRdp& a, requestRdp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestRdp* New() const final {
    return CreateMaybeMessage<requestRdp>(nullptr);
  }

  requestRdp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestRdp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestRdp& from);
  void MergeFrom(const requestRdp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestRdp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vmname = 2;
  void clear_vmname();
  static const int kVmnameFieldNumber = 2;
  const ::std::string& vmname() const;
  void set_vmname(const ::std::string& value);
  #if LANG_CXX11
  void set_vmname(::std::string&& value);
  #endif
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  ::std::string* mutable_vmname();
  ::std::string* release_vmname();
  void set_allocated_vmname(::std::string* vmname);

  // string listenaddress = 3;
  void clear_listenaddress();
  static const int kListenaddressFieldNumber = 3;
  const ::std::string& listenaddress() const;
  void set_listenaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_listenaddress(::std::string&& value);
  #endif
  void set_listenaddress(const char* value);
  void set_listenaddress(const char* value, size_t size);
  ::std::string* mutable_listenaddress();
  ::std::string* release_listenaddress();
  void set_allocated_listenaddress(::std::string* listenaddress);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // int32 listenport = 4;
  void clear_listenport();
  static const int kListenportFieldNumber = 4;
  ::google::protobuf::int32 listenport() const;
  void set_listenport(::google::protobuf::int32 value);

  // bool allowmulticonnect = 5;
  void clear_allowmulticonnect();
  static const int kAllowmulticonnectFieldNumber = 5;
  bool allowmulticonnect() const;
  void set_allowmulticonnect(bool value);

  // bool reusesingleconnect = 6;
  void clear_reusesingleconnect();
  static const int kReusesingleconnectFieldNumber = 6;
  bool reusesingleconnect() const;
  void set_reusesingleconnect(bool value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestRdp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vmname_;
  ::google::protobuf::internal::ArenaStringPtr listenaddress_;
  ::google::protobuf::int32 vcamethod_;
  ::google::protobuf::int32 listenport_;
  bool allowmulticonnect_;
  bool reusesingleconnect_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestRecord final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestRecord) */ {
 public:
  requestRecord();
  virtual ~requestRecord();

  requestRecord(const requestRecord& from);

  inline requestRecord& operator=(const requestRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestRecord(requestRecord&& from) noexcept
    : requestRecord() {
    *this = ::std::move(from);
  }

  inline requestRecord& operator=(requestRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestRecord* internal_default_instance() {
    return reinterpret_cast<const requestRecord*>(
               &_requestRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(requestRecord* other);
  friend void swap(requestRecord& a, requestRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestRecord* New() const final {
    return CreateMaybeMessage<requestRecord>(nullptr);
  }

  requestRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestRecord& from);
  void MergeFrom(const requestRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vmname = 2;
  void clear_vmname();
  static const int kVmnameFieldNumber = 2;
  const ::std::string& vmname() const;
  void set_vmname(const ::std::string& value);
  #if LANG_CXX11
  void set_vmname(::std::string&& value);
  #endif
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  ::std::string* mutable_vmname();
  ::std::string* release_vmname();
  void set_allocated_vmname(::std::string* vmname);

  // string basefolder = 5;
  void clear_basefolder();
  static const int kBasefolderFieldNumber = 5;
  const ::std::string& basefolder() const;
  void set_basefolder(const ::std::string& value);
  #if LANG_CXX11
  void set_basefolder(::std::string&& value);
  #endif
  void set_basefolder(const char* value);
  void set_basefolder(const char* value, size_t size);
  ::std::string* mutable_basefolder();
  ::std::string* release_basefolder();
  void set_allocated_basefolder(::std::string* basefolder);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // bool on = 3;
  void clear_on();
  static const int kOnFieldNumber = 3;
  bool on() const;
  void set_on(bool value);

  // int32 screenid = 4;
  void clear_screenid();
  static const int kScreenidFieldNumber = 4;
  ::google::protobuf::int32 screenid() const;
  void set_screenid(::google::protobuf::int32 value);

  // int32 width = 6;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 7;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // int32 fps = 8;
  void clear_fps();
  static const int kFpsFieldNumber = 8;
  ::google::protobuf::int32 fps() const;
  void set_fps(::google::protobuf::int32 value);

  // int32 kbps = 9;
  void clear_kbps();
  static const int kKbpsFieldNumber = 9;
  ::google::protobuf::int32 kbps() const;
  void set_kbps(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestRecord)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vmname_;
  ::google::protobuf::internal::ArenaStringPtr basefolder_;
  ::google::protobuf::int32 vcamethod_;
  bool on_;
  ::google::protobuf::int32 screenid_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 fps_;
  ::google::protobuf::int32 kbps_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestSharefolder final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestSharefolder) */ {
 public:
  requestSharefolder();
  virtual ~requestSharefolder();

  requestSharefolder(const requestSharefolder& from);

  inline requestSharefolder& operator=(const requestSharefolder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestSharefolder(requestSharefolder&& from) noexcept
    : requestSharefolder() {
    *this = ::std::move(from);
  }

  inline requestSharefolder& operator=(requestSharefolder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestSharefolder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestSharefolder* internal_default_instance() {
    return reinterpret_cast<const requestSharefolder*>(
               &_requestSharefolder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(requestSharefolder* other);
  friend void swap(requestSharefolder& a, requestSharefolder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestSharefolder* New() const final {
    return CreateMaybeMessage<requestSharefolder>(nullptr);
  }

  requestSharefolder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestSharefolder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestSharefolder& from);
  void MergeFrom(const requestSharefolder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestSharefolder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vmname = 2;
  void clear_vmname();
  static const int kVmnameFieldNumber = 2;
  const ::std::string& vmname() const;
  void set_vmname(const ::std::string& value);
  #if LANG_CXX11
  void set_vmname(::std::string&& value);
  #endif
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  ::std::string* mutable_vmname();
  ::std::string* release_vmname();
  void set_allocated_vmname(::std::string* vmname);

  // string sharefoldername = 3;
  void clear_sharefoldername();
  static const int kSharefoldernameFieldNumber = 3;
  const ::std::string& sharefoldername() const;
  void set_sharefoldername(const ::std::string& value);
  #if LANG_CXX11
  void set_sharefoldername(::std::string&& value);
  #endif
  void set_sharefoldername(const char* value);
  void set_sharefoldername(const char* value, size_t size);
  ::std::string* mutable_sharefoldername();
  ::std::string* release_sharefoldername();
  void set_allocated_sharefoldername(::std::string* sharefoldername);

  // string serverpath = 4;
  void clear_serverpath();
  static const int kServerpathFieldNumber = 4;
  const ::std::string& serverpath() const;
  void set_serverpath(const ::std::string& value);
  #if LANG_CXX11
  void set_serverpath(::std::string&& value);
  #endif
  void set_serverpath(const char* value);
  void set_serverpath(const char* value, size_t size);
  ::std::string* mutable_serverpath();
  ::std::string* release_serverpath();
  void set_allocated_serverpath(::std::string* serverpath);

  // string internalpath = 6;
  void clear_internalpath();
  static const int kInternalpathFieldNumber = 6;
  const ::std::string& internalpath() const;
  void set_internalpath(const ::std::string& value);
  #if LANG_CXX11
  void set_internalpath(::std::string&& value);
  #endif
  void set_internalpath(const char* value);
  void set_internalpath(const char* value, size_t size);
  ::std::string* mutable_internalpath();
  ::std::string* release_internalpath();
  void set_allocated_internalpath(::std::string* internalpath);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // bool writeable = 5;
  void clear_writeable();
  static const int kWriteableFieldNumber = 5;
  bool writeable() const;
  void set_writeable(bool value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestSharefolder)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vmname_;
  ::google::protobuf::internal::ArenaStringPtr sharefoldername_;
  ::google::protobuf::internal::ArenaStringPtr serverpath_;
  ::google::protobuf::internal::ArenaStringPtr internalpath_;
  ::google::protobuf::int32 vcamethod_;
  bool writeable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestConfig) */ {
 public:
  requestConfig();
  virtual ~requestConfig();

  requestConfig(const requestConfig& from);

  inline requestConfig& operator=(const requestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestConfig(requestConfig&& from) noexcept
    : requestConfig() {
    *this = ::std::move(from);
  }

  inline requestConfig& operator=(requestConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestConfig* internal_default_instance() {
    return reinterpret_cast<const requestConfig*>(
               &_requestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(requestConfig* other);
  friend void swap(requestConfig& a, requestConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestConfig* New() const final {
    return CreateMaybeMessage<requestConfig>(nullptr);
  }

  requestConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestConfig& from);
  void MergeFrom(const requestConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vmname = 2;
  void clear_vmname();
  static const int kVmnameFieldNumber = 2;
  const ::std::string& vmname() const;
  void set_vmname(const ::std::string& value);
  #if LANG_CXX11
  void set_vmname(::std::string&& value);
  #endif
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  ::std::string* mutable_vmname();
  ::std::string* release_vmname();
  void set_allocated_vmname(::std::string* vmname);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // int32 cpucount = 3;
  void clear_cpucount();
  static const int kCpucountFieldNumber = 3;
  ::google::protobuf::int32 cpucount() const;
  void set_cpucount(::google::protobuf::int32 value);

  // int32 memorysize = 4;
  void clear_memorysize();
  static const int kMemorysizeFieldNumber = 4;
  ::google::protobuf::int32 memorysize() const;
  void set_memorysize(::google::protobuf::int32 value);

  // int32 ramsize = 5;
  void clear_ramsize();
  static const int kRamsizeFieldNumber = 5;
  ::google::protobuf::int32 ramsize() const;
  void set_ramsize(::google::protobuf::int32 value);

  // int32 monitorcount = 6;
  void clear_monitorcount();
  static const int kMonitorcountFieldNumber = 6;
  ::google::protobuf::int32 monitorcount() const;
  void set_monitorcount(::google::protobuf::int32 value);

  // bool enable3d = 7;
  void clear_enable3d();
  static const int kEnable3DFieldNumber = 7;
  bool enable3d() const;
  void set_enable3d(bool value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vmname_;
  ::google::protobuf::int32 vcamethod_;
  ::google::protobuf::int32 cpucount_;
  ::google::protobuf::int32 memorysize_;
  ::google::protobuf::int32 ramsize_;
  ::google::protobuf::int32 monitorcount_;
  bool enable3d_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestUSB final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestUSB) */ {
 public:
  requestUSB();
  virtual ~requestUSB();

  requestUSB(const requestUSB& from);

  inline requestUSB& operator=(const requestUSB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestUSB(requestUSB&& from) noexcept
    : requestUSB() {
    *this = ::std::move(from);
  }

  inline requestUSB& operator=(requestUSB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestUSB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestUSB* internal_default_instance() {
    return reinterpret_cast<const requestUSB*>(
               &_requestUSB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(requestUSB* other);
  friend void swap(requestUSB& a, requestUSB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestUSB* New() const final {
    return CreateMaybeMessage<requestUSB>(nullptr);
  }

  requestUSB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestUSB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestUSB& from);
  void MergeFrom(const requestUSB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestUSB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vmname = 2;
  void clear_vmname();
  static const int kVmnameFieldNumber = 2;
  const ::std::string& vmname() const;
  void set_vmname(const ::std::string& value);
  #if LANG_CXX11
  void set_vmname(::std::string&& value);
  #endif
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  ::std::string* mutable_vmname();
  ::std::string* release_vmname();
  void set_allocated_vmname(::std::string* vmname);

  // string usbname = 3;
  void clear_usbname();
  static const int kUsbnameFieldNumber = 3;
  const ::std::string& usbname() const;
  void set_usbname(const ::std::string& value);
  #if LANG_CXX11
  void set_usbname(::std::string&& value);
  #endif
  void set_usbname(const char* value);
  void set_usbname(const char* value, size_t size);
  ::std::string* mutable_usbname();
  ::std::string* release_usbname();
  void set_allocated_usbname(::std::string* usbname);

  // string usbtype = 4;
  void clear_usbtype();
  static const int kUsbtypeFieldNumber = 4;
  const ::std::string& usbtype() const;
  void set_usbtype(const ::std::string& value);
  #if LANG_CXX11
  void set_usbtype(::std::string&& value);
  #endif
  void set_usbtype(const char* value);
  void set_usbtype(const char* value, size_t size);
  ::std::string* mutable_usbtype();
  ::std::string* release_usbtype();
  void set_allocated_usbtype(::std::string* usbtype);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestUSB)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vmname_;
  ::google::protobuf::internal::ArenaStringPtr usbname_;
  ::google::protobuf::internal::ArenaStringPtr usbtype_;
  ::google::protobuf::int32 vcamethod_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestAudio final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestAudio) */ {
 public:
  requestAudio();
  virtual ~requestAudio();

  requestAudio(const requestAudio& from);

  inline requestAudio& operator=(const requestAudio& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestAudio(requestAudio&& from) noexcept
    : requestAudio() {
    *this = ::std::move(from);
  }

  inline requestAudio& operator=(requestAudio&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestAudio& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestAudio* internal_default_instance() {
    return reinterpret_cast<const requestAudio*>(
               &_requestAudio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(requestAudio* other);
  friend void swap(requestAudio& a, requestAudio& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestAudio* New() const final {
    return CreateMaybeMessage<requestAudio>(nullptr);
  }

  requestAudio* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestAudio>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestAudio& from);
  void MergeFrom(const requestAudio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestAudio* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vmname = 2;
  void clear_vmname();
  static const int kVmnameFieldNumber = 2;
  const ::std::string& vmname() const;
  void set_vmname(const ::std::string& value);
  #if LANG_CXX11
  void set_vmname(::std::string&& value);
  #endif
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  ::std::string* mutable_vmname();
  ::std::string* release_vmname();
  void set_allocated_vmname(::std::string* vmname);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // bool audioswitch = 3;
  void clear_audioswitch();
  static const int kAudioswitchFieldNumber = 3;
  bool audioswitch() const;
  void set_audioswitch(bool value);

  // bool audioin = 4;
  void clear_audioin();
  static const int kAudioinFieldNumber = 4;
  bool audioin() const;
  void set_audioin(bool value);

  // bool audioout = 5;
  void clear_audioout();
  static const int kAudiooutFieldNumber = 5;
  bool audioout() const;
  void set_audioout(bool value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestAudio)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vmname_;
  ::google::protobuf::int32 vcamethod_;
  bool audioswitch_;
  bool audioin_;
  bool audioout_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestSerial final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestSerial) */ {
 public:
  requestSerial();
  virtual ~requestSerial();

  requestSerial(const requestSerial& from);

  inline requestSerial& operator=(const requestSerial& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestSerial(requestSerial&& from) noexcept
    : requestSerial() {
    *this = ::std::move(from);
  }

  inline requestSerial& operator=(requestSerial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestSerial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestSerial* internal_default_instance() {
    return reinterpret_cast<const requestSerial*>(
               &_requestSerial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(requestSerial* other);
  friend void swap(requestSerial& a, requestSerial& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestSerial* New() const final {
    return CreateMaybeMessage<requestSerial>(nullptr);
  }

  requestSerial* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestSerial>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestSerial& from);
  void MergeFrom(const requestSerial& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestSerial* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vmname = 2;
  void clear_vmname();
  static const int kVmnameFieldNumber = 2;
  const ::std::string& vmname() const;
  void set_vmname(const ::std::string& value);
  #if LANG_CXX11
  void set_vmname(::std::string&& value);
  #endif
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  ::std::string* mutable_vmname();
  ::std::string* release_vmname();
  void set_allocated_vmname(::std::string* vmname);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // int32 slot = 3;
  void clear_slot();
  static const int kSlotFieldNumber = 3;
  ::google::protobuf::int32 slot() const;
  void set_slot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestSerial)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vmname_;
  ::google::protobuf::int32 vcamethod_;
  ::google::protobuf::int32 slot_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestP2P final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestP2P) */ {
 public:
  requestP2P();
  virtual ~requestP2P();

  requestP2P(const requestP2P& from);

  inline requestP2P& operator=(const requestP2P& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestP2P(requestP2P&& from) noexcept
    : requestP2P() {
    *this = ::std::move(from);
  }

  inline requestP2P& operator=(requestP2P&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestP2P& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestP2P* internal_default_instance() {
    return reinterpret_cast<const requestP2P*>(
               &_requestP2P_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(requestP2P* other);
  friend void swap(requestP2P& a, requestP2P& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestP2P* New() const final {
    return CreateMaybeMessage<requestP2P>(nullptr);
  }

  requestP2P* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestP2P>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestP2P& from);
  void MergeFrom(const requestP2P& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestP2P* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sharefilepath = 2;
  void clear_sharefilepath();
  static const int kSharefilepathFieldNumber = 2;
  const ::std::string& sharefilepath() const;
  void set_sharefilepath(const ::std::string& value);
  #if LANG_CXX11
  void set_sharefilepath(::std::string&& value);
  #endif
  void set_sharefilepath(const char* value);
  void set_sharefilepath(const char* value, size_t size);
  ::std::string* mutable_sharefilepath();
  ::std::string* release_sharefilepath();
  void set_allocated_sharefilepath(::std::string* sharefilepath);

  // string shareseedpath = 3;
  void clear_shareseedpath();
  static const int kShareseedpathFieldNumber = 3;
  const ::std::string& shareseedpath() const;
  void set_shareseedpath(const ::std::string& value);
  #if LANG_CXX11
  void set_shareseedpath(::std::string&& value);
  #endif
  void set_shareseedpath(const char* value);
  void set_shareseedpath(const char* value, size_t size);
  ::std::string* mutable_shareseedpath();
  ::std::string* release_shareseedpath();
  void set_allocated_shareseedpath(::std::string* shareseedpath);

  // string shareip = 4;
  void clear_shareip();
  static const int kShareipFieldNumber = 4;
  const ::std::string& shareip() const;
  void set_shareip(const ::std::string& value);
  #if LANG_CXX11
  void set_shareip(::std::string&& value);
  #endif
  void set_shareip(const char* value);
  void set_shareip(const char* value, size_t size);
  ::std::string* mutable_shareip();
  ::std::string* release_shareip();
  void set_allocated_shareip(::std::string* shareip);

  // string downloadip = 5;
  void clear_downloadip();
  static const int kDownloadipFieldNumber = 5;
  const ::std::string& downloadip() const;
  void set_downloadip(const ::std::string& value);
  #if LANG_CXX11
  void set_downloadip(::std::string&& value);
  #endif
  void set_downloadip(const char* value);
  void set_downloadip(const char* value, size_t size);
  ::std::string* mutable_downloadip();
  ::std::string* release_downloadip();
  void set_allocated_downloadip(::std::string* downloadip);

  // string downloadseedpath = 6;
  void clear_downloadseedpath();
  static const int kDownloadseedpathFieldNumber = 6;
  const ::std::string& downloadseedpath() const;
  void set_downloadseedpath(const ::std::string& value);
  #if LANG_CXX11
  void set_downloadseedpath(::std::string&& value);
  #endif
  void set_downloadseedpath(const char* value);
  void set_downloadseedpath(const char* value, size_t size);
  ::std::string* mutable_downloadseedpath();
  ::std::string* release_downloadseedpath();
  void set_allocated_downloadseedpath(::std::string* downloadseedpath);

  // string downloadfilepath = 7;
  void clear_downloadfilepath();
  static const int kDownloadfilepathFieldNumber = 7;
  const ::std::string& downloadfilepath() const;
  void set_downloadfilepath(const ::std::string& value);
  #if LANG_CXX11
  void set_downloadfilepath(::std::string&& value);
  #endif
  void set_downloadfilepath(const char* value);
  void set_downloadfilepath(const char* value, size_t size);
  ::std::string* mutable_downloadfilepath();
  ::std::string* release_downloadfilepath();
  void set_allocated_downloadfilepath(::std::string* downloadfilepath);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestP2P)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sharefilepath_;
  ::google::protobuf::internal::ArenaStringPtr shareseedpath_;
  ::google::protobuf::internal::ArenaStringPtr shareip_;
  ::google::protobuf::internal::ArenaStringPtr downloadip_;
  ::google::protobuf::internal::ArenaStringPtr downloadseedpath_;
  ::google::protobuf::internal::ArenaStringPtr downloadfilepath_;
  ::google::protobuf::int32 vcamethod_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class requestVmExtends final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.requestVmExtends) */ {
 public:
  requestVmExtends();
  virtual ~requestVmExtends();

  requestVmExtends(const requestVmExtends& from);

  inline requestVmExtends& operator=(const requestVmExtends& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  requestVmExtends(requestVmExtends&& from) noexcept
    : requestVmExtends() {
    *this = ::std::move(from);
  }

  inline requestVmExtends& operator=(requestVmExtends&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const requestVmExtends& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const requestVmExtends* internal_default_instance() {
    return reinterpret_cast<const requestVmExtends*>(
               &_requestVmExtends_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(requestVmExtends* other);
  friend void swap(requestVmExtends& a, requestVmExtends& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline requestVmExtends* New() const final {
    return CreateMaybeMessage<requestVmExtends>(nullptr);
  }

  requestVmExtends* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<requestVmExtends>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const requestVmExtends& from);
  void MergeFrom(const requestVmExtends& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestVmExtends* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vmname = 2;
  void clear_vmname();
  static const int kVmnameFieldNumber = 2;
  const ::std::string& vmname() const;
  void set_vmname(const ::std::string& value);
  #if LANG_CXX11
  void set_vmname(::std::string&& value);
  #endif
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  ::std::string* mutable_vmname();
  ::std::string* release_vmname();
  void set_allocated_vmname(::std::string* vmname);

  // string diskname = 3;
  void clear_diskname();
  static const int kDisknameFieldNumber = 3;
  const ::std::string& diskname() const;
  void set_diskname(const ::std::string& value);
  #if LANG_CXX11
  void set_diskname(::std::string&& value);
  #endif
  void set_diskname(const char* value);
  void set_diskname(const char* value, size_t size);
  ::std::string* mutable_diskname();
  ::std::string* release_diskname();
  void set_allocated_diskname(::std::string* diskname);

  // string diskuuid = 4;
  void clear_diskuuid();
  static const int kDiskuuidFieldNumber = 4;
  const ::std::string& diskuuid() const;
  void set_diskuuid(const ::std::string& value);
  #if LANG_CXX11
  void set_diskuuid(::std::string&& value);
  #endif
  void set_diskuuid(const char* value);
  void set_diskuuid(const char* value, size_t size);
  ::std::string* mutable_diskuuid();
  ::std::string* release_diskuuid();
  void set_allocated_diskuuid(::std::string* diskuuid);

  // string diskformattype = 5;
  void clear_diskformattype();
  static const int kDiskformattypeFieldNumber = 5;
  const ::std::string& diskformattype() const;
  void set_diskformattype(const ::std::string& value);
  #if LANG_CXX11
  void set_diskformattype(::std::string&& value);
  #endif
  void set_diskformattype(const char* value);
  void set_diskformattype(const char* value, size_t size);
  ::std::string* mutable_diskformattype();
  ::std::string* release_diskformattype();
  void set_allocated_diskformattype(::std::string* diskformattype);

  // string basefolder = 6;
  void clear_basefolder();
  static const int kBasefolderFieldNumber = 6;
  const ::std::string& basefolder() const;
  void set_basefolder(const ::std::string& value);
  #if LANG_CXX11
  void set_basefolder(::std::string&& value);
  #endif
  void set_basefolder(const char* value);
  void set_basefolder(const char* value, size_t size);
  ::std::string* mutable_basefolder();
  ::std::string* release_basefolder();
  void set_allocated_basefolder(::std::string* basefolder);

  // string storagecontroller = 8;
  void clear_storagecontroller();
  static const int kStoragecontrollerFieldNumber = 8;
  const ::std::string& storagecontroller() const;
  void set_storagecontroller(const ::std::string& value);
  #if LANG_CXX11
  void set_storagecontroller(::std::string&& value);
  #endif
  void set_storagecontroller(const char* value);
  void set_storagecontroller(const char* value, size_t size);
  ::std::string* mutable_storagecontroller();
  ::std::string* release_storagecontroller();
  void set_allocated_storagecontroller(::std::string* storagecontroller);

  // int32 vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  ::google::protobuf::int32 vcamethod() const;
  void set_vcamethod(::google::protobuf::int32 value);

  // int32 slot = 9;
  void clear_slot();
  static const int kSlotFieldNumber = 9;
  ::google::protobuf::int32 slot() const;
  void set_slot(::google::protobuf::int32 value);

  // int64 size = 7;
  void clear_size();
  static const int kSizeFieldNumber = 7;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Qigrpc.requestVmExtends)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vmname_;
  ::google::protobuf::internal::ArenaStringPtr diskname_;
  ::google::protobuf::internal::ArenaStringPtr diskuuid_;
  ::google::protobuf::internal::ArenaStringPtr diskformattype_;
  ::google::protobuf::internal::ArenaStringPtr basefolder_;
  ::google::protobuf::internal::ArenaStringPtr storagecontroller_;
  ::google::protobuf::int32 vcamethod_;
  ::google::protobuf::int32 slot_;
  ::google::protobuf::int64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// -------------------------------------------------------------------

class vcaReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qigrpc.vcaReply) */ {
 public:
  vcaReply();
  virtual ~vcaReply();

  vcaReply(const vcaReply& from);

  inline vcaReply& operator=(const vcaReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  vcaReply(vcaReply&& from) noexcept
    : vcaReply() {
    *this = ::std::move(from);
  }

  inline vcaReply& operator=(vcaReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const vcaReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const vcaReply* internal_default_instance() {
    return reinterpret_cast<const vcaReply*>(
               &_vcaReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(vcaReply* other);
  friend void swap(vcaReply& a, vcaReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline vcaReply* New() const final {
    return CreateMaybeMessage<vcaReply>(nullptr);
  }

  vcaReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<vcaReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const vcaReply& from);
  void MergeFrom(const vcaReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vcaReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vcamethod = 1;
  void clear_vcamethod();
  static const int kVcamethodFieldNumber = 1;
  const ::std::string& vcamethod() const;
  void set_vcamethod(const ::std::string& value);
  #if LANG_CXX11
  void set_vcamethod(::std::string&& value);
  #endif
  void set_vcamethod(const char* value);
  void set_vcamethod(const char* value, size_t size);
  ::std::string* mutable_vcamethod();
  ::std::string* release_vcamethod();
  void set_allocated_vcamethod(::std::string* vcamethod);

  // string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 code = 3;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qigrpc.vcaReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vcamethod_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qigrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// requestNull

// -------------------------------------------------------------------

// requestSimple

// int32 vcamethod = 1;
inline void requestSimple::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestSimple::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestSimple.vcamethod)
  return vcamethod_;
}
inline void requestSimple::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestSimple.vcamethod)
}

// string vmname = 2;
inline void requestSimple::clear_vmname() {
  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestSimple::vmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestSimple.vmname)
  return vmname_.GetNoArena();
}
inline void requestSimple::set_vmname(const ::std::string& value) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestSimple.vmname)
}
#if LANG_CXX11
inline void requestSimple::set_vmname(::std::string&& value) {
  
  vmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestSimple.vmname)
}
#endif
inline void requestSimple::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestSimple.vmname)
}
inline void requestSimple::set_vmname(const char* value, size_t size) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestSimple.vmname)
}
inline ::std::string* requestSimple::mutable_vmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestSimple.vmname)
  return vmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestSimple::release_vmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestSimple.vmname)
  
  return vmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestSimple::set_allocated_vmname(::std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestSimple.vmname)
}

// -------------------------------------------------------------------

// requestSnapshot

// int32 vcamethod = 1;
inline void requestSnapshot::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestSnapshot::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestSnapshot.vcamethod)
  return vcamethod_;
}
inline void requestSnapshot::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestSnapshot.vcamethod)
}

// string vmname = 2;
inline void requestSnapshot::clear_vmname() {
  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestSnapshot::vmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestSnapshot.vmname)
  return vmname_.GetNoArena();
}
inline void requestSnapshot::set_vmname(const ::std::string& value) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestSnapshot.vmname)
}
#if LANG_CXX11
inline void requestSnapshot::set_vmname(::std::string&& value) {
  
  vmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestSnapshot.vmname)
}
#endif
inline void requestSnapshot::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestSnapshot.vmname)
}
inline void requestSnapshot::set_vmname(const char* value, size_t size) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestSnapshot.vmname)
}
inline ::std::string* requestSnapshot::mutable_vmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestSnapshot.vmname)
  return vmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestSnapshot::release_vmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestSnapshot.vmname)
  
  return vmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestSnapshot::set_allocated_vmname(::std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestSnapshot.vmname)
}

// string snapshotname = 3;
inline void requestSnapshot::clear_snapshotname() {
  snapshotname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestSnapshot::snapshotname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestSnapshot.snapshotname)
  return snapshotname_.GetNoArena();
}
inline void requestSnapshot::set_snapshotname(const ::std::string& value) {
  
  snapshotname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestSnapshot.snapshotname)
}
#if LANG_CXX11
inline void requestSnapshot::set_snapshotname(::std::string&& value) {
  
  snapshotname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestSnapshot.snapshotname)
}
#endif
inline void requestSnapshot::set_snapshotname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snapshotname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestSnapshot.snapshotname)
}
inline void requestSnapshot::set_snapshotname(const char* value, size_t size) {
  
  snapshotname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestSnapshot.snapshotname)
}
inline ::std::string* requestSnapshot::mutable_snapshotname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestSnapshot.snapshotname)
  return snapshotname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestSnapshot::release_snapshotname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestSnapshot.snapshotname)
  
  return snapshotname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestSnapshot::set_allocated_snapshotname(::std::string* snapshotname) {
  if (snapshotname != nullptr) {
    
  } else {
    
  }
  snapshotname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshotname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestSnapshot.snapshotname)
}

// -------------------------------------------------------------------

// requestClone

// int32 vcamethod = 1;
inline void requestClone::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestClone::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestClone.vcamethod)
  return vcamethod_;
}
inline void requestClone::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestClone.vcamethod)
}

// string vmname = 2;
inline void requestClone::clear_vmname() {
  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestClone::vmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestClone.vmname)
  return vmname_.GetNoArena();
}
inline void requestClone::set_vmname(const ::std::string& value) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestClone.vmname)
}
#if LANG_CXX11
inline void requestClone::set_vmname(::std::string&& value) {
  
  vmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestClone.vmname)
}
#endif
inline void requestClone::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestClone.vmname)
}
inline void requestClone::set_vmname(const char* value, size_t size) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestClone.vmname)
}
inline ::std::string* requestClone::mutable_vmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestClone.vmname)
  return vmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestClone::release_vmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestClone.vmname)
  
  return vmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestClone::set_allocated_vmname(::std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestClone.vmname)
}

// string targetvmname = 3;
inline void requestClone::clear_targetvmname() {
  targetvmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestClone::targetvmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestClone.targetvmname)
  return targetvmname_.GetNoArena();
}
inline void requestClone::set_targetvmname(const ::std::string& value) {
  
  targetvmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestClone.targetvmname)
}
#if LANG_CXX11
inline void requestClone::set_targetvmname(::std::string&& value) {
  
  targetvmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestClone.targetvmname)
}
#endif
inline void requestClone::set_targetvmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetvmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestClone.targetvmname)
}
inline void requestClone::set_targetvmname(const char* value, size_t size) {
  
  targetvmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestClone.targetvmname)
}
inline ::std::string* requestClone::mutable_targetvmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestClone.targetvmname)
  return targetvmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestClone::release_targetvmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestClone.targetvmname)
  
  return targetvmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestClone::set_allocated_targetvmname(::std::string* targetvmname) {
  if (targetvmname != nullptr) {
    
  } else {
    
  }
  targetvmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetvmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestClone.targetvmname)
}

// string basefolder = 4;
inline void requestClone::clear_basefolder() {
  basefolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestClone::basefolder() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestClone.basefolder)
  return basefolder_.GetNoArena();
}
inline void requestClone::set_basefolder(const ::std::string& value) {
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestClone.basefolder)
}
#if LANG_CXX11
inline void requestClone::set_basefolder(::std::string&& value) {
  
  basefolder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestClone.basefolder)
}
#endif
inline void requestClone::set_basefolder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestClone.basefolder)
}
inline void requestClone::set_basefolder(const char* value, size_t size) {
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestClone.basefolder)
}
inline ::std::string* requestClone::mutable_basefolder() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestClone.basefolder)
  return basefolder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestClone::release_basefolder() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestClone.basefolder)
  
  return basefolder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestClone::set_allocated_basefolder(::std::string* basefolder) {
  if (basefolder != nullptr) {
    
  } else {
    
  }
  basefolder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basefolder);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestClone.basefolder)
}

// bool keepmacs = 5;
inline void requestClone::clear_keepmacs() {
  keepmacs_ = false;
}
inline bool requestClone::keepmacs() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestClone.keepmacs)
  return keepmacs_;
}
inline void requestClone::set_keepmacs(bool value) {
  
  keepmacs_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestClone.keepmacs)
}

// bool keephwuuids = 6;
inline void requestClone::clear_keephwuuids() {
  keephwuuids_ = false;
}
inline bool requestClone::keephwuuids() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestClone.keephwuuids)
  return keephwuuids_;
}
inline void requestClone::set_keephwuuids(bool value) {
  
  keephwuuids_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestClone.keephwuuids)
}

// bool keepdiskname = 7;
inline void requestClone::clear_keepdiskname() {
  keepdiskname_ = false;
}
inline bool requestClone::keepdiskname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestClone.keepdiskname)
  return keepdiskname_;
}
inline void requestClone::set_keepdiskname(bool value) {
  
  keepdiskname_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestClone.keepdiskname)
}

// -------------------------------------------------------------------

// requestInstall

// int32 vcamethod = 1;
inline void requestInstall::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestInstall::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestInstall.vcamethod)
  return vcamethod_;
}
inline void requestInstall::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestInstall.vcamethod)
}

// string vmname = 2;
inline void requestInstall::clear_vmname() {
  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestInstall::vmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestInstall.vmname)
  return vmname_.GetNoArena();
}
inline void requestInstall::set_vmname(const ::std::string& value) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestInstall.vmname)
}
#if LANG_CXX11
inline void requestInstall::set_vmname(::std::string&& value) {
  
  vmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestInstall.vmname)
}
#endif
inline void requestInstall::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestInstall.vmname)
}
inline void requestInstall::set_vmname(const char* value, size_t size) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestInstall.vmname)
}
inline ::std::string* requestInstall::mutable_vmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestInstall.vmname)
  return vmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestInstall::release_vmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestInstall.vmname)
  
  return vmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestInstall::set_allocated_vmname(::std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestInstall.vmname)
}

// string ostypeid = 3;
inline void requestInstall::clear_ostypeid() {
  ostypeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestInstall::ostypeid() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestInstall.ostypeid)
  return ostypeid_.GetNoArena();
}
inline void requestInstall::set_ostypeid(const ::std::string& value) {
  
  ostypeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestInstall.ostypeid)
}
#if LANG_CXX11
inline void requestInstall::set_ostypeid(::std::string&& value) {
  
  ostypeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestInstall.ostypeid)
}
#endif
inline void requestInstall::set_ostypeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ostypeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestInstall.ostypeid)
}
inline void requestInstall::set_ostypeid(const char* value, size_t size) {
  
  ostypeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestInstall.ostypeid)
}
inline ::std::string* requestInstall::mutable_ostypeid() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestInstall.ostypeid)
  return ostypeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestInstall::release_ostypeid() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestInstall.ostypeid)
  
  return ostypeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestInstall::set_allocated_ostypeid(::std::string* ostypeid) {
  if (ostypeid != nullptr) {
    
  } else {
    
  }
  ostypeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ostypeid);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestInstall.ostypeid)
}

// int32 cpucount = 4;
inline void requestInstall::clear_cpucount() {
  cpucount_ = 0;
}
inline ::google::protobuf::int32 requestInstall::cpucount() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestInstall.cpucount)
  return cpucount_;
}
inline void requestInstall::set_cpucount(::google::protobuf::int32 value) {
  
  cpucount_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestInstall.cpucount)
}

// int32 memorysize = 5;
inline void requestInstall::clear_memorysize() {
  memorysize_ = 0;
}
inline ::google::protobuf::int32 requestInstall::memorysize() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestInstall.memorysize)
  return memorysize_;
}
inline void requestInstall::set_memorysize(::google::protobuf::int32 value) {
  
  memorysize_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestInstall.memorysize)
}

// string basefolder = 6;
inline void requestInstall::clear_basefolder() {
  basefolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestInstall::basefolder() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestInstall.basefolder)
  return basefolder_.GetNoArena();
}
inline void requestInstall::set_basefolder(const ::std::string& value) {
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestInstall.basefolder)
}
#if LANG_CXX11
inline void requestInstall::set_basefolder(::std::string&& value) {
  
  basefolder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestInstall.basefolder)
}
#endif
inline void requestInstall::set_basefolder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestInstall.basefolder)
}
inline void requestInstall::set_basefolder(const char* value, size_t size) {
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestInstall.basefolder)
}
inline ::std::string* requestInstall::mutable_basefolder() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestInstall.basefolder)
  return basefolder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestInstall::release_basefolder() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestInstall.basefolder)
  
  return basefolder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestInstall::set_allocated_basefolder(::std::string* basefolder) {
  if (basefolder != nullptr) {
    
  } else {
    
  }
  basefolder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basefolder);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestInstall.basefolder)
}

// string sourcepath = 7;
inline void requestInstall::clear_sourcepath() {
  sourcepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestInstall::sourcepath() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestInstall.sourcepath)
  return sourcepath_.GetNoArena();
}
inline void requestInstall::set_sourcepath(const ::std::string& value) {
  
  sourcepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestInstall.sourcepath)
}
#if LANG_CXX11
inline void requestInstall::set_sourcepath(::std::string&& value) {
  
  sourcepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestInstall.sourcepath)
}
#endif
inline void requestInstall::set_sourcepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourcepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestInstall.sourcepath)
}
inline void requestInstall::set_sourcepath(const char* value, size_t size) {
  
  sourcepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestInstall.sourcepath)
}
inline ::std::string* requestInstall::mutable_sourcepath() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestInstall.sourcepath)
  return sourcepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestInstall::release_sourcepath() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestInstall.sourcepath)
  
  return sourcepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestInstall::set_allocated_sourcepath(::std::string* sourcepath) {
  if (sourcepath != nullptr) {
    
  } else {
    
  }
  sourcepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcepath);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestInstall.sourcepath)
}

// string storagebustype = 8;
inline void requestInstall::clear_storagebustype() {
  storagebustype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestInstall::storagebustype() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestInstall.storagebustype)
  return storagebustype_.GetNoArena();
}
inline void requestInstall::set_storagebustype(const ::std::string& value) {
  
  storagebustype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestInstall.storagebustype)
}
#if LANG_CXX11
inline void requestInstall::set_storagebustype(::std::string&& value) {
  
  storagebustype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestInstall.storagebustype)
}
#endif
inline void requestInstall::set_storagebustype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  storagebustype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestInstall.storagebustype)
}
inline void requestInstall::set_storagebustype(const char* value, size_t size) {
  
  storagebustype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestInstall.storagebustype)
}
inline ::std::string* requestInstall::mutable_storagebustype() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestInstall.storagebustype)
  return storagebustype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestInstall::release_storagebustype() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestInstall.storagebustype)
  
  return storagebustype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestInstall::set_allocated_storagebustype(::std::string* storagebustype) {
  if (storagebustype != nullptr) {
    
  } else {
    
  }
  storagebustype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storagebustype);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestInstall.storagebustype)
}

// int64 logicdisksize = 9;
inline void requestInstall::clear_logicdisksize() {
  logicdisksize_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 requestInstall::logicdisksize() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestInstall.logicdisksize)
  return logicdisksize_;
}
inline void requestInstall::set_logicdisksize(::google::protobuf::int64 value) {
  
  logicdisksize_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestInstall.logicdisksize)
}

// string diskformat = 10;
inline void requestInstall::clear_diskformat() {
  diskformat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestInstall::diskformat() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestInstall.diskformat)
  return diskformat_.GetNoArena();
}
inline void requestInstall::set_diskformat(const ::std::string& value) {
  
  diskformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestInstall.diskformat)
}
#if LANG_CXX11
inline void requestInstall::set_diskformat(::std::string&& value) {
  
  diskformat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestInstall.diskformat)
}
#endif
inline void requestInstall::set_diskformat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diskformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestInstall.diskformat)
}
inline void requestInstall::set_diskformat(const char* value, size_t size) {
  
  diskformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestInstall.diskformat)
}
inline ::std::string* requestInstall::mutable_diskformat() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestInstall.diskformat)
  return diskformat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestInstall::release_diskformat() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestInstall.diskformat)
  
  return diskformat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestInstall::set_allocated_diskformat(::std::string* diskformat) {
  if (diskformat != nullptr) {
    
  } else {
    
  }
  diskformat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskformat);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestInstall.diskformat)
}

// bool fix = 11;
inline void requestInstall::clear_fix() {
  fix_ = false;
}
inline bool requestInstall::fix() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestInstall.fix)
  return fix_;
}
inline void requestInstall::set_fix(bool value) {
  
  fix_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestInstall.fix)
}

// -------------------------------------------------------------------

// requestImpAndexportVM

// int32 vcamethod = 1;
inline void requestImpAndexportVM::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestImpAndexportVM::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestImpAndexportVM.vcamethod)
  return vcamethod_;
}
inline void requestImpAndexportVM::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestImpAndexportVM.vcamethod)
}

// string vmname = 2;
inline void requestImpAndexportVM::clear_vmname() {
  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestImpAndexportVM::vmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestImpAndexportVM.vmname)
  return vmname_.GetNoArena();
}
inline void requestImpAndexportVM::set_vmname(const ::std::string& value) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestImpAndexportVM.vmname)
}
#if LANG_CXX11
inline void requestImpAndexportVM::set_vmname(::std::string&& value) {
  
  vmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestImpAndexportVM.vmname)
}
#endif
inline void requestImpAndexportVM::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestImpAndexportVM.vmname)
}
inline void requestImpAndexportVM::set_vmname(const char* value, size_t size) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestImpAndexportVM.vmname)
}
inline ::std::string* requestImpAndexportVM::mutable_vmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestImpAndexportVM.vmname)
  return vmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestImpAndexportVM::release_vmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestImpAndexportVM.vmname)
  
  return vmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestImpAndexportVM::set_allocated_vmname(::std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestImpAndexportVM.vmname)
}

// string ovapath = 3;
inline void requestImpAndexportVM::clear_ovapath() {
  ovapath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestImpAndexportVM::ovapath() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestImpAndexportVM.ovapath)
  return ovapath_.GetNoArena();
}
inline void requestImpAndexportVM::set_ovapath(const ::std::string& value) {
  
  ovapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestImpAndexportVM.ovapath)
}
#if LANG_CXX11
inline void requestImpAndexportVM::set_ovapath(::std::string&& value) {
  
  ovapath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestImpAndexportVM.ovapath)
}
#endif
inline void requestImpAndexportVM::set_ovapath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ovapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestImpAndexportVM.ovapath)
}
inline void requestImpAndexportVM::set_ovapath(const char* value, size_t size) {
  
  ovapath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestImpAndexportVM.ovapath)
}
inline ::std::string* requestImpAndexportVM::mutable_ovapath() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestImpAndexportVM.ovapath)
  return ovapath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestImpAndexportVM::release_ovapath() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestImpAndexportVM.ovapath)
  
  return ovapath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestImpAndexportVM::set_allocated_ovapath(::std::string* ovapath) {
  if (ovapath != nullptr) {
    
  } else {
    
  }
  ovapath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ovapath);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestImpAndexportVM.ovapath)
}

// string exportpath = 4;
inline void requestImpAndexportVM::clear_exportpath() {
  exportpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestImpAndexportVM::exportpath() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestImpAndexportVM.exportpath)
  return exportpath_.GetNoArena();
}
inline void requestImpAndexportVM::set_exportpath(const ::std::string& value) {
  
  exportpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestImpAndexportVM.exportpath)
}
#if LANG_CXX11
inline void requestImpAndexportVM::set_exportpath(::std::string&& value) {
  
  exportpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestImpAndexportVM.exportpath)
}
#endif
inline void requestImpAndexportVM::set_exportpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exportpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestImpAndexportVM.exportpath)
}
inline void requestImpAndexportVM::set_exportpath(const char* value, size_t size) {
  
  exportpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestImpAndexportVM.exportpath)
}
inline ::std::string* requestImpAndexportVM::mutable_exportpath() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestImpAndexportVM.exportpath)
  return exportpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestImpAndexportVM::release_exportpath() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestImpAndexportVM.exportpath)
  
  return exportpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestImpAndexportVM::set_allocated_exportpath(::std::string* exportpath) {
  if (exportpath != nullptr) {
    
  } else {
    
  }
  exportpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exportpath);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestImpAndexportVM.exportpath)
}

// bool keepmac = 5;
inline void requestImpAndexportVM::clear_keepmac() {
  keepmac_ = false;
}
inline bool requestImpAndexportVM::keepmac() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestImpAndexportVM.keepmac)
  return keepmac_;
}
inline void requestImpAndexportVM::set_keepmac(bool value) {
  
  keepmac_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestImpAndexportVM.keepmac)
}

// string ostypeid = 6;
inline void requestImpAndexportVM::clear_ostypeid() {
  ostypeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestImpAndexportVM::ostypeid() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestImpAndexportVM.ostypeid)
  return ostypeid_.GetNoArena();
}
inline void requestImpAndexportVM::set_ostypeid(const ::std::string& value) {
  
  ostypeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestImpAndexportVM.ostypeid)
}
#if LANG_CXX11
inline void requestImpAndexportVM::set_ostypeid(::std::string&& value) {
  
  ostypeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestImpAndexportVM.ostypeid)
}
#endif
inline void requestImpAndexportVM::set_ostypeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ostypeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestImpAndexportVM.ostypeid)
}
inline void requestImpAndexportVM::set_ostypeid(const char* value, size_t size) {
  
  ostypeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestImpAndexportVM.ostypeid)
}
inline ::std::string* requestImpAndexportVM::mutable_ostypeid() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestImpAndexportVM.ostypeid)
  return ostypeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestImpAndexportVM::release_ostypeid() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestImpAndexportVM.ostypeid)
  
  return ostypeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestImpAndexportVM::set_allocated_ostypeid(::std::string* ostypeid) {
  if (ostypeid != nullptr) {
    
  } else {
    
  }
  ostypeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ostypeid);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestImpAndexportVM.ostypeid)
}

// int32 cpucount = 7;
inline void requestImpAndexportVM::clear_cpucount() {
  cpucount_ = 0;
}
inline ::google::protobuf::int32 requestImpAndexportVM::cpucount() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestImpAndexportVM.cpucount)
  return cpucount_;
}
inline void requestImpAndexportVM::set_cpucount(::google::protobuf::int32 value) {
  
  cpucount_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestImpAndexportVM.cpucount)
}

// int32 memory = 8;
inline void requestImpAndexportVM::clear_memory() {
  memory_ = 0;
}
inline ::google::protobuf::int32 requestImpAndexportVM::memory() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestImpAndexportVM.memory)
  return memory_;
}
inline void requestImpAndexportVM::set_memory(::google::protobuf::int32 value) {
  
  memory_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestImpAndexportVM.memory)
}

// bool netup = 9;
inline void requestImpAndexportVM::clear_netup() {
  netup_ = false;
}
inline bool requestImpAndexportVM::netup() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestImpAndexportVM.netup)
  return netup_;
}
inline void requestImpAndexportVM::set_netup(bool value) {
  
  netup_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestImpAndexportVM.netup)
}

// string basefolder = 10;
inline void requestImpAndexportVM::clear_basefolder() {
  basefolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestImpAndexportVM::basefolder() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestImpAndexportVM.basefolder)
  return basefolder_.GetNoArena();
}
inline void requestImpAndexportVM::set_basefolder(const ::std::string& value) {
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestImpAndexportVM.basefolder)
}
#if LANG_CXX11
inline void requestImpAndexportVM::set_basefolder(::std::string&& value) {
  
  basefolder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestImpAndexportVM.basefolder)
}
#endif
inline void requestImpAndexportVM::set_basefolder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestImpAndexportVM.basefolder)
}
inline void requestImpAndexportVM::set_basefolder(const char* value, size_t size) {
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestImpAndexportVM.basefolder)
}
inline ::std::string* requestImpAndexportVM::mutable_basefolder() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestImpAndexportVM.basefolder)
  return basefolder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestImpAndexportVM::release_basefolder() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestImpAndexportVM.basefolder)
  
  return basefolder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestImpAndexportVM::set_allocated_basefolder(::std::string* basefolder) {
  if (basefolder != nullptr) {
    
  } else {
    
  }
  basefolder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basefolder);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestImpAndexportVM.basefolder)
}

// string ovsfiletype = 11;
inline void requestImpAndexportVM::clear_ovsfiletype() {
  ovsfiletype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestImpAndexportVM::ovsfiletype() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestImpAndexportVM.ovsfiletype)
  return ovsfiletype_.GetNoArena();
}
inline void requestImpAndexportVM::set_ovsfiletype(const ::std::string& value) {
  
  ovsfiletype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestImpAndexportVM.ovsfiletype)
}
#if LANG_CXX11
inline void requestImpAndexportVM::set_ovsfiletype(::std::string&& value) {
  
  ovsfiletype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestImpAndexportVM.ovsfiletype)
}
#endif
inline void requestImpAndexportVM::set_ovsfiletype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ovsfiletype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestImpAndexportVM.ovsfiletype)
}
inline void requestImpAndexportVM::set_ovsfiletype(const char* value, size_t size) {
  
  ovsfiletype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestImpAndexportVM.ovsfiletype)
}
inline ::std::string* requestImpAndexportVM::mutable_ovsfiletype() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestImpAndexportVM.ovsfiletype)
  return ovsfiletype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestImpAndexportVM::release_ovsfiletype() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestImpAndexportVM.ovsfiletype)
  
  return ovsfiletype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestImpAndexportVM::set_allocated_ovsfiletype(::std::string* ovsfiletype) {
  if (ovsfiletype != nullptr) {
    
  } else {
    
  }
  ovsfiletype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ovsfiletype);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestImpAndexportVM.ovsfiletype)
}

// -------------------------------------------------------------------

// requestNetwork

// int32 vcamethod = 1;
inline void requestNetwork::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestNetwork::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestNetwork.vcamethod)
  return vcamethod_;
}
inline void requestNetwork::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestNetwork.vcamethod)
}

// string vmname = 2;
inline void requestNetwork::clear_vmname() {
  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestNetwork::vmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestNetwork.vmname)
  return vmname_.GetNoArena();
}
inline void requestNetwork::set_vmname(const ::std::string& value) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestNetwork.vmname)
}
#if LANG_CXX11
inline void requestNetwork::set_vmname(::std::string&& value) {
  
  vmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestNetwork.vmname)
}
#endif
inline void requestNetwork::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestNetwork.vmname)
}
inline void requestNetwork::set_vmname(const char* value, size_t size) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestNetwork.vmname)
}
inline ::std::string* requestNetwork::mutable_vmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestNetwork.vmname)
  return vmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestNetwork::release_vmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestNetwork.vmname)
  
  return vmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestNetwork::set_allocated_vmname(::std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestNetwork.vmname)
}

// int32 slot = 3;
inline void requestNetwork::clear_slot() {
  slot_ = 0;
}
inline ::google::protobuf::int32 requestNetwork::slot() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestNetwork.slot)
  return slot_;
}
inline void requestNetwork::set_slot(::google::protobuf::int32 value) {
  
  slot_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestNetwork.slot)
}

// string hostpciname = 4;
inline void requestNetwork::clear_hostpciname() {
  hostpciname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestNetwork::hostpciname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestNetwork.hostpciname)
  return hostpciname_.GetNoArena();
}
inline void requestNetwork::set_hostpciname(const ::std::string& value) {
  
  hostpciname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestNetwork.hostpciname)
}
#if LANG_CXX11
inline void requestNetwork::set_hostpciname(::std::string&& value) {
  
  hostpciname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestNetwork.hostpciname)
}
#endif
inline void requestNetwork::set_hostpciname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostpciname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestNetwork.hostpciname)
}
inline void requestNetwork::set_hostpciname(const char* value, size_t size) {
  
  hostpciname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestNetwork.hostpciname)
}
inline ::std::string* requestNetwork::mutable_hostpciname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestNetwork.hostpciname)
  return hostpciname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestNetwork::release_hostpciname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestNetwork.hostpciname)
  
  return hostpciname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestNetwork::set_allocated_hostpciname(::std::string* hostpciname) {
  if (hostpciname != nullptr) {
    
  } else {
    
  }
  hostpciname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostpciname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestNetwork.hostpciname)
}

// string mac = 5;
inline void requestNetwork::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestNetwork::mac() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestNetwork.mac)
  return mac_.GetNoArena();
}
inline void requestNetwork::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestNetwork.mac)
}
#if LANG_CXX11
inline void requestNetwork::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestNetwork.mac)
}
#endif
inline void requestNetwork::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestNetwork.mac)
}
inline void requestNetwork::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestNetwork.mac)
}
inline ::std::string* requestNetwork::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestNetwork.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestNetwork::release_mac() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestNetwork.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestNetwork::set_allocated_mac(::std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestNetwork.mac)
}

// -------------------------------------------------------------------

// requestRdp

// int32 vcamethod = 1;
inline void requestRdp::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestRdp::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRdp.vcamethod)
  return vcamethod_;
}
inline void requestRdp::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestRdp.vcamethod)
}

// string vmname = 2;
inline void requestRdp::clear_vmname() {
  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestRdp::vmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRdp.vmname)
  return vmname_.GetNoArena();
}
inline void requestRdp::set_vmname(const ::std::string& value) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestRdp.vmname)
}
#if LANG_CXX11
inline void requestRdp::set_vmname(::std::string&& value) {
  
  vmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestRdp.vmname)
}
#endif
inline void requestRdp::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestRdp.vmname)
}
inline void requestRdp::set_vmname(const char* value, size_t size) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestRdp.vmname)
}
inline ::std::string* requestRdp::mutable_vmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestRdp.vmname)
  return vmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestRdp::release_vmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestRdp.vmname)
  
  return vmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestRdp::set_allocated_vmname(::std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestRdp.vmname)
}

// string listenaddress = 3;
inline void requestRdp::clear_listenaddress() {
  listenaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestRdp::listenaddress() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRdp.listenaddress)
  return listenaddress_.GetNoArena();
}
inline void requestRdp::set_listenaddress(const ::std::string& value) {
  
  listenaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestRdp.listenaddress)
}
#if LANG_CXX11
inline void requestRdp::set_listenaddress(::std::string&& value) {
  
  listenaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestRdp.listenaddress)
}
#endif
inline void requestRdp::set_listenaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  listenaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestRdp.listenaddress)
}
inline void requestRdp::set_listenaddress(const char* value, size_t size) {
  
  listenaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestRdp.listenaddress)
}
inline ::std::string* requestRdp::mutable_listenaddress() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestRdp.listenaddress)
  return listenaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestRdp::release_listenaddress() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestRdp.listenaddress)
  
  return listenaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestRdp::set_allocated_listenaddress(::std::string* listenaddress) {
  if (listenaddress != nullptr) {
    
  } else {
    
  }
  listenaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listenaddress);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestRdp.listenaddress)
}

// int32 listenport = 4;
inline void requestRdp::clear_listenport() {
  listenport_ = 0;
}
inline ::google::protobuf::int32 requestRdp::listenport() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRdp.listenport)
  return listenport_;
}
inline void requestRdp::set_listenport(::google::protobuf::int32 value) {
  
  listenport_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestRdp.listenport)
}

// bool allowmulticonnect = 5;
inline void requestRdp::clear_allowmulticonnect() {
  allowmulticonnect_ = false;
}
inline bool requestRdp::allowmulticonnect() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRdp.allowmulticonnect)
  return allowmulticonnect_;
}
inline void requestRdp::set_allowmulticonnect(bool value) {
  
  allowmulticonnect_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestRdp.allowmulticonnect)
}

// bool reusesingleconnect = 6;
inline void requestRdp::clear_reusesingleconnect() {
  reusesingleconnect_ = false;
}
inline bool requestRdp::reusesingleconnect() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRdp.reusesingleconnect)
  return reusesingleconnect_;
}
inline void requestRdp::set_reusesingleconnect(bool value) {
  
  reusesingleconnect_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestRdp.reusesingleconnect)
}

// -------------------------------------------------------------------

// requestRecord

// int32 vcamethod = 1;
inline void requestRecord::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestRecord::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRecord.vcamethod)
  return vcamethod_;
}
inline void requestRecord::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestRecord.vcamethod)
}

// string vmname = 2;
inline void requestRecord::clear_vmname() {
  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestRecord::vmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRecord.vmname)
  return vmname_.GetNoArena();
}
inline void requestRecord::set_vmname(const ::std::string& value) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestRecord.vmname)
}
#if LANG_CXX11
inline void requestRecord::set_vmname(::std::string&& value) {
  
  vmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestRecord.vmname)
}
#endif
inline void requestRecord::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestRecord.vmname)
}
inline void requestRecord::set_vmname(const char* value, size_t size) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestRecord.vmname)
}
inline ::std::string* requestRecord::mutable_vmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestRecord.vmname)
  return vmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestRecord::release_vmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestRecord.vmname)
  
  return vmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestRecord::set_allocated_vmname(::std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestRecord.vmname)
}

// bool on = 3;
inline void requestRecord::clear_on() {
  on_ = false;
}
inline bool requestRecord::on() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRecord.on)
  return on_;
}
inline void requestRecord::set_on(bool value) {
  
  on_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestRecord.on)
}

// int32 screenid = 4;
inline void requestRecord::clear_screenid() {
  screenid_ = 0;
}
inline ::google::protobuf::int32 requestRecord::screenid() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRecord.screenid)
  return screenid_;
}
inline void requestRecord::set_screenid(::google::protobuf::int32 value) {
  
  screenid_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestRecord.screenid)
}

// string basefolder = 5;
inline void requestRecord::clear_basefolder() {
  basefolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestRecord::basefolder() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRecord.basefolder)
  return basefolder_.GetNoArena();
}
inline void requestRecord::set_basefolder(const ::std::string& value) {
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestRecord.basefolder)
}
#if LANG_CXX11
inline void requestRecord::set_basefolder(::std::string&& value) {
  
  basefolder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestRecord.basefolder)
}
#endif
inline void requestRecord::set_basefolder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestRecord.basefolder)
}
inline void requestRecord::set_basefolder(const char* value, size_t size) {
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestRecord.basefolder)
}
inline ::std::string* requestRecord::mutable_basefolder() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestRecord.basefolder)
  return basefolder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestRecord::release_basefolder() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestRecord.basefolder)
  
  return basefolder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestRecord::set_allocated_basefolder(::std::string* basefolder) {
  if (basefolder != nullptr) {
    
  } else {
    
  }
  basefolder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basefolder);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestRecord.basefolder)
}

// int32 width = 6;
inline void requestRecord::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 requestRecord::width() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRecord.width)
  return width_;
}
inline void requestRecord::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestRecord.width)
}

// int32 height = 7;
inline void requestRecord::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 requestRecord::height() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRecord.height)
  return height_;
}
inline void requestRecord::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestRecord.height)
}

// int32 fps = 8;
inline void requestRecord::clear_fps() {
  fps_ = 0;
}
inline ::google::protobuf::int32 requestRecord::fps() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRecord.fps)
  return fps_;
}
inline void requestRecord::set_fps(::google::protobuf::int32 value) {
  
  fps_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestRecord.fps)
}

// int32 kbps = 9;
inline void requestRecord::clear_kbps() {
  kbps_ = 0;
}
inline ::google::protobuf::int32 requestRecord::kbps() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestRecord.kbps)
  return kbps_;
}
inline void requestRecord::set_kbps(::google::protobuf::int32 value) {
  
  kbps_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestRecord.kbps)
}

// -------------------------------------------------------------------

// requestSharefolder

// int32 vcamethod = 1;
inline void requestSharefolder::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestSharefolder::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestSharefolder.vcamethod)
  return vcamethod_;
}
inline void requestSharefolder::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestSharefolder.vcamethod)
}

// string vmname = 2;
inline void requestSharefolder::clear_vmname() {
  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestSharefolder::vmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestSharefolder.vmname)
  return vmname_.GetNoArena();
}
inline void requestSharefolder::set_vmname(const ::std::string& value) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestSharefolder.vmname)
}
#if LANG_CXX11
inline void requestSharefolder::set_vmname(::std::string&& value) {
  
  vmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestSharefolder.vmname)
}
#endif
inline void requestSharefolder::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestSharefolder.vmname)
}
inline void requestSharefolder::set_vmname(const char* value, size_t size) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestSharefolder.vmname)
}
inline ::std::string* requestSharefolder::mutable_vmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestSharefolder.vmname)
  return vmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestSharefolder::release_vmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestSharefolder.vmname)
  
  return vmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestSharefolder::set_allocated_vmname(::std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestSharefolder.vmname)
}

// string sharefoldername = 3;
inline void requestSharefolder::clear_sharefoldername() {
  sharefoldername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestSharefolder::sharefoldername() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestSharefolder.sharefoldername)
  return sharefoldername_.GetNoArena();
}
inline void requestSharefolder::set_sharefoldername(const ::std::string& value) {
  
  sharefoldername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestSharefolder.sharefoldername)
}
#if LANG_CXX11
inline void requestSharefolder::set_sharefoldername(::std::string&& value) {
  
  sharefoldername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestSharefolder.sharefoldername)
}
#endif
inline void requestSharefolder::set_sharefoldername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sharefoldername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestSharefolder.sharefoldername)
}
inline void requestSharefolder::set_sharefoldername(const char* value, size_t size) {
  
  sharefoldername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestSharefolder.sharefoldername)
}
inline ::std::string* requestSharefolder::mutable_sharefoldername() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestSharefolder.sharefoldername)
  return sharefoldername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestSharefolder::release_sharefoldername() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestSharefolder.sharefoldername)
  
  return sharefoldername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestSharefolder::set_allocated_sharefoldername(::std::string* sharefoldername) {
  if (sharefoldername != nullptr) {
    
  } else {
    
  }
  sharefoldername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sharefoldername);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestSharefolder.sharefoldername)
}

// string serverpath = 4;
inline void requestSharefolder::clear_serverpath() {
  serverpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestSharefolder::serverpath() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestSharefolder.serverpath)
  return serverpath_.GetNoArena();
}
inline void requestSharefolder::set_serverpath(const ::std::string& value) {
  
  serverpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestSharefolder.serverpath)
}
#if LANG_CXX11
inline void requestSharefolder::set_serverpath(::std::string&& value) {
  
  serverpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestSharefolder.serverpath)
}
#endif
inline void requestSharefolder::set_serverpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestSharefolder.serverpath)
}
inline void requestSharefolder::set_serverpath(const char* value, size_t size) {
  
  serverpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestSharefolder.serverpath)
}
inline ::std::string* requestSharefolder::mutable_serverpath() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestSharefolder.serverpath)
  return serverpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestSharefolder::release_serverpath() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestSharefolder.serverpath)
  
  return serverpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestSharefolder::set_allocated_serverpath(::std::string* serverpath) {
  if (serverpath != nullptr) {
    
  } else {
    
  }
  serverpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverpath);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestSharefolder.serverpath)
}

// bool writeable = 5;
inline void requestSharefolder::clear_writeable() {
  writeable_ = false;
}
inline bool requestSharefolder::writeable() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestSharefolder.writeable)
  return writeable_;
}
inline void requestSharefolder::set_writeable(bool value) {
  
  writeable_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestSharefolder.writeable)
}

// string internalpath = 6;
inline void requestSharefolder::clear_internalpath() {
  internalpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestSharefolder::internalpath() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestSharefolder.internalpath)
  return internalpath_.GetNoArena();
}
inline void requestSharefolder::set_internalpath(const ::std::string& value) {
  
  internalpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestSharefolder.internalpath)
}
#if LANG_CXX11
inline void requestSharefolder::set_internalpath(::std::string&& value) {
  
  internalpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestSharefolder.internalpath)
}
#endif
inline void requestSharefolder::set_internalpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  internalpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestSharefolder.internalpath)
}
inline void requestSharefolder::set_internalpath(const char* value, size_t size) {
  
  internalpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestSharefolder.internalpath)
}
inline ::std::string* requestSharefolder::mutable_internalpath() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestSharefolder.internalpath)
  return internalpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestSharefolder::release_internalpath() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestSharefolder.internalpath)
  
  return internalpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestSharefolder::set_allocated_internalpath(::std::string* internalpath) {
  if (internalpath != nullptr) {
    
  } else {
    
  }
  internalpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internalpath);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestSharefolder.internalpath)
}

// -------------------------------------------------------------------

// requestConfig

// int32 vcamethod = 1;
inline void requestConfig::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestConfig::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestConfig.vcamethod)
  return vcamethod_;
}
inline void requestConfig::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestConfig.vcamethod)
}

// string vmname = 2;
inline void requestConfig::clear_vmname() {
  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestConfig::vmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestConfig.vmname)
  return vmname_.GetNoArena();
}
inline void requestConfig::set_vmname(const ::std::string& value) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestConfig.vmname)
}
#if LANG_CXX11
inline void requestConfig::set_vmname(::std::string&& value) {
  
  vmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestConfig.vmname)
}
#endif
inline void requestConfig::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestConfig.vmname)
}
inline void requestConfig::set_vmname(const char* value, size_t size) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestConfig.vmname)
}
inline ::std::string* requestConfig::mutable_vmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestConfig.vmname)
  return vmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestConfig::release_vmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestConfig.vmname)
  
  return vmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestConfig::set_allocated_vmname(::std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestConfig.vmname)
}

// int32 cpucount = 3;
inline void requestConfig::clear_cpucount() {
  cpucount_ = 0;
}
inline ::google::protobuf::int32 requestConfig::cpucount() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestConfig.cpucount)
  return cpucount_;
}
inline void requestConfig::set_cpucount(::google::protobuf::int32 value) {
  
  cpucount_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestConfig.cpucount)
}

// int32 memorysize = 4;
inline void requestConfig::clear_memorysize() {
  memorysize_ = 0;
}
inline ::google::protobuf::int32 requestConfig::memorysize() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestConfig.memorysize)
  return memorysize_;
}
inline void requestConfig::set_memorysize(::google::protobuf::int32 value) {
  
  memorysize_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestConfig.memorysize)
}

// int32 ramsize = 5;
inline void requestConfig::clear_ramsize() {
  ramsize_ = 0;
}
inline ::google::protobuf::int32 requestConfig::ramsize() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestConfig.ramsize)
  return ramsize_;
}
inline void requestConfig::set_ramsize(::google::protobuf::int32 value) {
  
  ramsize_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestConfig.ramsize)
}

// int32 monitorcount = 6;
inline void requestConfig::clear_monitorcount() {
  monitorcount_ = 0;
}
inline ::google::protobuf::int32 requestConfig::monitorcount() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestConfig.monitorcount)
  return monitorcount_;
}
inline void requestConfig::set_monitorcount(::google::protobuf::int32 value) {
  
  monitorcount_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestConfig.monitorcount)
}

// bool enable3d = 7;
inline void requestConfig::clear_enable3d() {
  enable3d_ = false;
}
inline bool requestConfig::enable3d() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestConfig.enable3d)
  return enable3d_;
}
inline void requestConfig::set_enable3d(bool value) {
  
  enable3d_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestConfig.enable3d)
}

// -------------------------------------------------------------------

// requestUSB

// int32 vcamethod = 1;
inline void requestUSB::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestUSB::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestUSB.vcamethod)
  return vcamethod_;
}
inline void requestUSB::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestUSB.vcamethod)
}

// string vmname = 2;
inline void requestUSB::clear_vmname() {
  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestUSB::vmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestUSB.vmname)
  return vmname_.GetNoArena();
}
inline void requestUSB::set_vmname(const ::std::string& value) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestUSB.vmname)
}
#if LANG_CXX11
inline void requestUSB::set_vmname(::std::string&& value) {
  
  vmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestUSB.vmname)
}
#endif
inline void requestUSB::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestUSB.vmname)
}
inline void requestUSB::set_vmname(const char* value, size_t size) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestUSB.vmname)
}
inline ::std::string* requestUSB::mutable_vmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestUSB.vmname)
  return vmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestUSB::release_vmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestUSB.vmname)
  
  return vmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestUSB::set_allocated_vmname(::std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestUSB.vmname)
}

// string usbname = 3;
inline void requestUSB::clear_usbname() {
  usbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestUSB::usbname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestUSB.usbname)
  return usbname_.GetNoArena();
}
inline void requestUSB::set_usbname(const ::std::string& value) {
  
  usbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestUSB.usbname)
}
#if LANG_CXX11
inline void requestUSB::set_usbname(::std::string&& value) {
  
  usbname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestUSB.usbname)
}
#endif
inline void requestUSB::set_usbname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestUSB.usbname)
}
inline void requestUSB::set_usbname(const char* value, size_t size) {
  
  usbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestUSB.usbname)
}
inline ::std::string* requestUSB::mutable_usbname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestUSB.usbname)
  return usbname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestUSB::release_usbname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestUSB.usbname)
  
  return usbname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestUSB::set_allocated_usbname(::std::string* usbname) {
  if (usbname != nullptr) {
    
  } else {
    
  }
  usbname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usbname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestUSB.usbname)
}

// string usbtype = 4;
inline void requestUSB::clear_usbtype() {
  usbtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestUSB::usbtype() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestUSB.usbtype)
  return usbtype_.GetNoArena();
}
inline void requestUSB::set_usbtype(const ::std::string& value) {
  
  usbtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestUSB.usbtype)
}
#if LANG_CXX11
inline void requestUSB::set_usbtype(::std::string&& value) {
  
  usbtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestUSB.usbtype)
}
#endif
inline void requestUSB::set_usbtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usbtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestUSB.usbtype)
}
inline void requestUSB::set_usbtype(const char* value, size_t size) {
  
  usbtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestUSB.usbtype)
}
inline ::std::string* requestUSB::mutable_usbtype() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestUSB.usbtype)
  return usbtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestUSB::release_usbtype() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestUSB.usbtype)
  
  return usbtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestUSB::set_allocated_usbtype(::std::string* usbtype) {
  if (usbtype != nullptr) {
    
  } else {
    
  }
  usbtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usbtype);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestUSB.usbtype)
}

// -------------------------------------------------------------------

// requestAudio

// int32 vcamethod = 1;
inline void requestAudio::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestAudio::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestAudio.vcamethod)
  return vcamethod_;
}
inline void requestAudio::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestAudio.vcamethod)
}

// string vmname = 2;
inline void requestAudio::clear_vmname() {
  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestAudio::vmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestAudio.vmname)
  return vmname_.GetNoArena();
}
inline void requestAudio::set_vmname(const ::std::string& value) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestAudio.vmname)
}
#if LANG_CXX11
inline void requestAudio::set_vmname(::std::string&& value) {
  
  vmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestAudio.vmname)
}
#endif
inline void requestAudio::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestAudio.vmname)
}
inline void requestAudio::set_vmname(const char* value, size_t size) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestAudio.vmname)
}
inline ::std::string* requestAudio::mutable_vmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestAudio.vmname)
  return vmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestAudio::release_vmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestAudio.vmname)
  
  return vmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestAudio::set_allocated_vmname(::std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestAudio.vmname)
}

// bool audioswitch = 3;
inline void requestAudio::clear_audioswitch() {
  audioswitch_ = false;
}
inline bool requestAudio::audioswitch() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestAudio.audioswitch)
  return audioswitch_;
}
inline void requestAudio::set_audioswitch(bool value) {
  
  audioswitch_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestAudio.audioswitch)
}

// bool audioin = 4;
inline void requestAudio::clear_audioin() {
  audioin_ = false;
}
inline bool requestAudio::audioin() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestAudio.audioin)
  return audioin_;
}
inline void requestAudio::set_audioin(bool value) {
  
  audioin_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestAudio.audioin)
}

// bool audioout = 5;
inline void requestAudio::clear_audioout() {
  audioout_ = false;
}
inline bool requestAudio::audioout() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestAudio.audioout)
  return audioout_;
}
inline void requestAudio::set_audioout(bool value) {
  
  audioout_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestAudio.audioout)
}

// -------------------------------------------------------------------

// requestSerial

// int32 vcamethod = 1;
inline void requestSerial::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestSerial::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestSerial.vcamethod)
  return vcamethod_;
}
inline void requestSerial::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestSerial.vcamethod)
}

// string vmname = 2;
inline void requestSerial::clear_vmname() {
  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestSerial::vmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestSerial.vmname)
  return vmname_.GetNoArena();
}
inline void requestSerial::set_vmname(const ::std::string& value) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestSerial.vmname)
}
#if LANG_CXX11
inline void requestSerial::set_vmname(::std::string&& value) {
  
  vmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestSerial.vmname)
}
#endif
inline void requestSerial::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestSerial.vmname)
}
inline void requestSerial::set_vmname(const char* value, size_t size) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestSerial.vmname)
}
inline ::std::string* requestSerial::mutable_vmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestSerial.vmname)
  return vmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestSerial::release_vmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestSerial.vmname)
  
  return vmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestSerial::set_allocated_vmname(::std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestSerial.vmname)
}

// int32 slot = 3;
inline void requestSerial::clear_slot() {
  slot_ = 0;
}
inline ::google::protobuf::int32 requestSerial::slot() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestSerial.slot)
  return slot_;
}
inline void requestSerial::set_slot(::google::protobuf::int32 value) {
  
  slot_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestSerial.slot)
}

// -------------------------------------------------------------------

// requestP2P

// int32 vcamethod = 1;
inline void requestP2P::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestP2P::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestP2P.vcamethod)
  return vcamethod_;
}
inline void requestP2P::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestP2P.vcamethod)
}

// string sharefilepath = 2;
inline void requestP2P::clear_sharefilepath() {
  sharefilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestP2P::sharefilepath() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestP2P.sharefilepath)
  return sharefilepath_.GetNoArena();
}
inline void requestP2P::set_sharefilepath(const ::std::string& value) {
  
  sharefilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestP2P.sharefilepath)
}
#if LANG_CXX11
inline void requestP2P::set_sharefilepath(::std::string&& value) {
  
  sharefilepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestP2P.sharefilepath)
}
#endif
inline void requestP2P::set_sharefilepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sharefilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestP2P.sharefilepath)
}
inline void requestP2P::set_sharefilepath(const char* value, size_t size) {
  
  sharefilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestP2P.sharefilepath)
}
inline ::std::string* requestP2P::mutable_sharefilepath() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestP2P.sharefilepath)
  return sharefilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestP2P::release_sharefilepath() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestP2P.sharefilepath)
  
  return sharefilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestP2P::set_allocated_sharefilepath(::std::string* sharefilepath) {
  if (sharefilepath != nullptr) {
    
  } else {
    
  }
  sharefilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sharefilepath);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestP2P.sharefilepath)
}

// string shareseedpath = 3;
inline void requestP2P::clear_shareseedpath() {
  shareseedpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestP2P::shareseedpath() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestP2P.shareseedpath)
  return shareseedpath_.GetNoArena();
}
inline void requestP2P::set_shareseedpath(const ::std::string& value) {
  
  shareseedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestP2P.shareseedpath)
}
#if LANG_CXX11
inline void requestP2P::set_shareseedpath(::std::string&& value) {
  
  shareseedpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestP2P.shareseedpath)
}
#endif
inline void requestP2P::set_shareseedpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shareseedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestP2P.shareseedpath)
}
inline void requestP2P::set_shareseedpath(const char* value, size_t size) {
  
  shareseedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestP2P.shareseedpath)
}
inline ::std::string* requestP2P::mutable_shareseedpath() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestP2P.shareseedpath)
  return shareseedpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestP2P::release_shareseedpath() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestP2P.shareseedpath)
  
  return shareseedpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestP2P::set_allocated_shareseedpath(::std::string* shareseedpath) {
  if (shareseedpath != nullptr) {
    
  } else {
    
  }
  shareseedpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shareseedpath);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestP2P.shareseedpath)
}

// string shareip = 4;
inline void requestP2P::clear_shareip() {
  shareip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestP2P::shareip() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestP2P.shareip)
  return shareip_.GetNoArena();
}
inline void requestP2P::set_shareip(const ::std::string& value) {
  
  shareip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestP2P.shareip)
}
#if LANG_CXX11
inline void requestP2P::set_shareip(::std::string&& value) {
  
  shareip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestP2P.shareip)
}
#endif
inline void requestP2P::set_shareip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shareip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestP2P.shareip)
}
inline void requestP2P::set_shareip(const char* value, size_t size) {
  
  shareip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestP2P.shareip)
}
inline ::std::string* requestP2P::mutable_shareip() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestP2P.shareip)
  return shareip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestP2P::release_shareip() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestP2P.shareip)
  
  return shareip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestP2P::set_allocated_shareip(::std::string* shareip) {
  if (shareip != nullptr) {
    
  } else {
    
  }
  shareip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shareip);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestP2P.shareip)
}

// string downloadip = 5;
inline void requestP2P::clear_downloadip() {
  downloadip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestP2P::downloadip() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestP2P.downloadip)
  return downloadip_.GetNoArena();
}
inline void requestP2P::set_downloadip(const ::std::string& value) {
  
  downloadip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestP2P.downloadip)
}
#if LANG_CXX11
inline void requestP2P::set_downloadip(::std::string&& value) {
  
  downloadip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestP2P.downloadip)
}
#endif
inline void requestP2P::set_downloadip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  downloadip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestP2P.downloadip)
}
inline void requestP2P::set_downloadip(const char* value, size_t size) {
  
  downloadip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestP2P.downloadip)
}
inline ::std::string* requestP2P::mutable_downloadip() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestP2P.downloadip)
  return downloadip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestP2P::release_downloadip() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestP2P.downloadip)
  
  return downloadip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestP2P::set_allocated_downloadip(::std::string* downloadip) {
  if (downloadip != nullptr) {
    
  } else {
    
  }
  downloadip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), downloadip);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestP2P.downloadip)
}

// string downloadseedpath = 6;
inline void requestP2P::clear_downloadseedpath() {
  downloadseedpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestP2P::downloadseedpath() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestP2P.downloadseedpath)
  return downloadseedpath_.GetNoArena();
}
inline void requestP2P::set_downloadseedpath(const ::std::string& value) {
  
  downloadseedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestP2P.downloadseedpath)
}
#if LANG_CXX11
inline void requestP2P::set_downloadseedpath(::std::string&& value) {
  
  downloadseedpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestP2P.downloadseedpath)
}
#endif
inline void requestP2P::set_downloadseedpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  downloadseedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestP2P.downloadseedpath)
}
inline void requestP2P::set_downloadseedpath(const char* value, size_t size) {
  
  downloadseedpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestP2P.downloadseedpath)
}
inline ::std::string* requestP2P::mutable_downloadseedpath() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestP2P.downloadseedpath)
  return downloadseedpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestP2P::release_downloadseedpath() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestP2P.downloadseedpath)
  
  return downloadseedpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestP2P::set_allocated_downloadseedpath(::std::string* downloadseedpath) {
  if (downloadseedpath != nullptr) {
    
  } else {
    
  }
  downloadseedpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), downloadseedpath);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestP2P.downloadseedpath)
}

// string downloadfilepath = 7;
inline void requestP2P::clear_downloadfilepath() {
  downloadfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestP2P::downloadfilepath() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestP2P.downloadfilepath)
  return downloadfilepath_.GetNoArena();
}
inline void requestP2P::set_downloadfilepath(const ::std::string& value) {
  
  downloadfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestP2P.downloadfilepath)
}
#if LANG_CXX11
inline void requestP2P::set_downloadfilepath(::std::string&& value) {
  
  downloadfilepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestP2P.downloadfilepath)
}
#endif
inline void requestP2P::set_downloadfilepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  downloadfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestP2P.downloadfilepath)
}
inline void requestP2P::set_downloadfilepath(const char* value, size_t size) {
  
  downloadfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestP2P.downloadfilepath)
}
inline ::std::string* requestP2P::mutable_downloadfilepath() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestP2P.downloadfilepath)
  return downloadfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestP2P::release_downloadfilepath() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestP2P.downloadfilepath)
  
  return downloadfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestP2P::set_allocated_downloadfilepath(::std::string* downloadfilepath) {
  if (downloadfilepath != nullptr) {
    
  } else {
    
  }
  downloadfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), downloadfilepath);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestP2P.downloadfilepath)
}

// -------------------------------------------------------------------

// requestVmExtends

// int32 vcamethod = 1;
inline void requestVmExtends::clear_vcamethod() {
  vcamethod_ = 0;
}
inline ::google::protobuf::int32 requestVmExtends::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestVmExtends.vcamethod)
  return vcamethod_;
}
inline void requestVmExtends::set_vcamethod(::google::protobuf::int32 value) {
  
  vcamethod_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestVmExtends.vcamethod)
}

// string vmname = 2;
inline void requestVmExtends::clear_vmname() {
  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestVmExtends::vmname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestVmExtends.vmname)
  return vmname_.GetNoArena();
}
inline void requestVmExtends::set_vmname(const ::std::string& value) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestVmExtends.vmname)
}
#if LANG_CXX11
inline void requestVmExtends::set_vmname(::std::string&& value) {
  
  vmname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestVmExtends.vmname)
}
#endif
inline void requestVmExtends::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestVmExtends.vmname)
}
inline void requestVmExtends::set_vmname(const char* value, size_t size) {
  
  vmname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestVmExtends.vmname)
}
inline ::std::string* requestVmExtends::mutable_vmname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestVmExtends.vmname)
  return vmname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestVmExtends::release_vmname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestVmExtends.vmname)
  
  return vmname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestVmExtends::set_allocated_vmname(::std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vmname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestVmExtends.vmname)
}

// string diskname = 3;
inline void requestVmExtends::clear_diskname() {
  diskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestVmExtends::diskname() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestVmExtends.diskname)
  return diskname_.GetNoArena();
}
inline void requestVmExtends::set_diskname(const ::std::string& value) {
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestVmExtends.diskname)
}
#if LANG_CXX11
inline void requestVmExtends::set_diskname(::std::string&& value) {
  
  diskname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestVmExtends.diskname)
}
#endif
inline void requestVmExtends::set_diskname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestVmExtends.diskname)
}
inline void requestVmExtends::set_diskname(const char* value, size_t size) {
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestVmExtends.diskname)
}
inline ::std::string* requestVmExtends::mutable_diskname() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestVmExtends.diskname)
  return diskname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestVmExtends::release_diskname() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestVmExtends.diskname)
  
  return diskname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestVmExtends::set_allocated_diskname(::std::string* diskname) {
  if (diskname != nullptr) {
    
  } else {
    
  }
  diskname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskname);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestVmExtends.diskname)
}

// string diskuuid = 4;
inline void requestVmExtends::clear_diskuuid() {
  diskuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestVmExtends::diskuuid() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestVmExtends.diskuuid)
  return diskuuid_.GetNoArena();
}
inline void requestVmExtends::set_diskuuid(const ::std::string& value) {
  
  diskuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestVmExtends.diskuuid)
}
#if LANG_CXX11
inline void requestVmExtends::set_diskuuid(::std::string&& value) {
  
  diskuuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestVmExtends.diskuuid)
}
#endif
inline void requestVmExtends::set_diskuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diskuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestVmExtends.diskuuid)
}
inline void requestVmExtends::set_diskuuid(const char* value, size_t size) {
  
  diskuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestVmExtends.diskuuid)
}
inline ::std::string* requestVmExtends::mutable_diskuuid() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestVmExtends.diskuuid)
  return diskuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestVmExtends::release_diskuuid() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestVmExtends.diskuuid)
  
  return diskuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestVmExtends::set_allocated_diskuuid(::std::string* diskuuid) {
  if (diskuuid != nullptr) {
    
  } else {
    
  }
  diskuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskuuid);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestVmExtends.diskuuid)
}

// string diskformattype = 5;
inline void requestVmExtends::clear_diskformattype() {
  diskformattype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestVmExtends::diskformattype() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestVmExtends.diskformattype)
  return diskformattype_.GetNoArena();
}
inline void requestVmExtends::set_diskformattype(const ::std::string& value) {
  
  diskformattype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestVmExtends.diskformattype)
}
#if LANG_CXX11
inline void requestVmExtends::set_diskformattype(::std::string&& value) {
  
  diskformattype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestVmExtends.diskformattype)
}
#endif
inline void requestVmExtends::set_diskformattype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diskformattype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestVmExtends.diskformattype)
}
inline void requestVmExtends::set_diskformattype(const char* value, size_t size) {
  
  diskformattype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestVmExtends.diskformattype)
}
inline ::std::string* requestVmExtends::mutable_diskformattype() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestVmExtends.diskformattype)
  return diskformattype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestVmExtends::release_diskformattype() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestVmExtends.diskformattype)
  
  return diskformattype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestVmExtends::set_allocated_diskformattype(::std::string* diskformattype) {
  if (diskformattype != nullptr) {
    
  } else {
    
  }
  diskformattype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskformattype);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestVmExtends.diskformattype)
}

// string basefolder = 6;
inline void requestVmExtends::clear_basefolder() {
  basefolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestVmExtends::basefolder() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestVmExtends.basefolder)
  return basefolder_.GetNoArena();
}
inline void requestVmExtends::set_basefolder(const ::std::string& value) {
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestVmExtends.basefolder)
}
#if LANG_CXX11
inline void requestVmExtends::set_basefolder(::std::string&& value) {
  
  basefolder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestVmExtends.basefolder)
}
#endif
inline void requestVmExtends::set_basefolder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestVmExtends.basefolder)
}
inline void requestVmExtends::set_basefolder(const char* value, size_t size) {
  
  basefolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestVmExtends.basefolder)
}
inline ::std::string* requestVmExtends::mutable_basefolder() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestVmExtends.basefolder)
  return basefolder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestVmExtends::release_basefolder() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestVmExtends.basefolder)
  
  return basefolder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestVmExtends::set_allocated_basefolder(::std::string* basefolder) {
  if (basefolder != nullptr) {
    
  } else {
    
  }
  basefolder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basefolder);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestVmExtends.basefolder)
}

// int64 size = 7;
inline void requestVmExtends::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 requestVmExtends::size() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestVmExtends.size)
  return size_;
}
inline void requestVmExtends::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestVmExtends.size)
}

// string storagecontroller = 8;
inline void requestVmExtends::clear_storagecontroller() {
  storagecontroller_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& requestVmExtends::storagecontroller() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestVmExtends.storagecontroller)
  return storagecontroller_.GetNoArena();
}
inline void requestVmExtends::set_storagecontroller(const ::std::string& value) {
  
  storagecontroller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.requestVmExtends.storagecontroller)
}
#if LANG_CXX11
inline void requestVmExtends::set_storagecontroller(::std::string&& value) {
  
  storagecontroller_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.requestVmExtends.storagecontroller)
}
#endif
inline void requestVmExtends::set_storagecontroller(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  storagecontroller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.requestVmExtends.storagecontroller)
}
inline void requestVmExtends::set_storagecontroller(const char* value, size_t size) {
  
  storagecontroller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.requestVmExtends.storagecontroller)
}
inline ::std::string* requestVmExtends::mutable_storagecontroller() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.requestVmExtends.storagecontroller)
  return storagecontroller_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* requestVmExtends::release_storagecontroller() {
  // @@protoc_insertion_point(field_release:Qigrpc.requestVmExtends.storagecontroller)
  
  return storagecontroller_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void requestVmExtends::set_allocated_storagecontroller(::std::string* storagecontroller) {
  if (storagecontroller != nullptr) {
    
  } else {
    
  }
  storagecontroller_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storagecontroller);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.requestVmExtends.storagecontroller)
}

// int32 slot = 9;
inline void requestVmExtends::clear_slot() {
  slot_ = 0;
}
inline ::google::protobuf::int32 requestVmExtends::slot() const {
  // @@protoc_insertion_point(field_get:Qigrpc.requestVmExtends.slot)
  return slot_;
}
inline void requestVmExtends::set_slot(::google::protobuf::int32 value) {
  
  slot_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.requestVmExtends.slot)
}

// -------------------------------------------------------------------

// vcaReply

// string vcamethod = 1;
inline void vcaReply::clear_vcamethod() {
  vcamethod_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& vcaReply::vcamethod() const {
  // @@protoc_insertion_point(field_get:Qigrpc.vcaReply.vcamethod)
  return vcamethod_.GetNoArena();
}
inline void vcaReply::set_vcamethod(const ::std::string& value) {
  
  vcamethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.vcaReply.vcamethod)
}
#if LANG_CXX11
inline void vcaReply::set_vcamethod(::std::string&& value) {
  
  vcamethod_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.vcaReply.vcamethod)
}
#endif
inline void vcaReply::set_vcamethod(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vcamethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.vcaReply.vcamethod)
}
inline void vcaReply::set_vcamethod(const char* value, size_t size) {
  
  vcamethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.vcaReply.vcamethod)
}
inline ::std::string* vcaReply::mutable_vcamethod() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.vcaReply.vcamethod)
  return vcamethod_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* vcaReply::release_vcamethod() {
  // @@protoc_insertion_point(field_release:Qigrpc.vcaReply.vcamethod)
  
  return vcamethod_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void vcaReply::set_allocated_vcamethod(::std::string* vcamethod) {
  if (vcamethod != nullptr) {
    
  } else {
    
  }
  vcamethod_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vcamethod);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.vcaReply.vcamethod)
}

// string data = 2;
inline void vcaReply::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& vcaReply::data() const {
  // @@protoc_insertion_point(field_get:Qigrpc.vcaReply.data)
  return data_.GetNoArena();
}
inline void vcaReply::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qigrpc.vcaReply.data)
}
#if LANG_CXX11
inline void vcaReply::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qigrpc.vcaReply.data)
}
#endif
inline void vcaReply::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qigrpc.vcaReply.data)
}
inline void vcaReply::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qigrpc.vcaReply.data)
}
inline ::std::string* vcaReply::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Qigrpc.vcaReply.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* vcaReply::release_data() {
  // @@protoc_insertion_point(field_release:Qigrpc.vcaReply.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void vcaReply::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Qigrpc.vcaReply.data)
}

// int32 code = 3;
inline void vcaReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 vcaReply::code() const {
  // @@protoc_insertion_point(field_get:Qigrpc.vcaReply.code)
  return code_;
}
inline void vcaReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Qigrpc.vcaReply.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Qigrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_qigrpc_2eproto
