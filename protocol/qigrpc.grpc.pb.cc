// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: qigrpc.proto

#include "qigrpc.pb.h"
#include "qigrpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Qigrpc {

static const char* Server_method_names[] = {
  "/Qigrpc.Server/Test",
  "/Qigrpc.Server/HostInfo",
  "/Qigrpc.Server/VmInstall",
  "/Qigrpc.Server/VmCommon",
  "/Qigrpc.Server/VmOperateSnapshot",
  "/Qigrpc.Server/VmClone",
  "/Qigrpc.Server/VmImpAndExp",
  "/Qigrpc.Server/VmNetwork",
  "/Qigrpc.Server/VmRdp",
  "/Qigrpc.Server/VmRecord",
  "/Qigrpc.Server/VmSharefolder",
  "/Qigrpc.Server/VmConfig",
  "/Qigrpc.Server/VmUSB",
  "/Qigrpc.Server/VmAudio",
  "/Qigrpc.Server/VmSerial",
  "/Qigrpc.Server/P2P",
  "/Qigrpc.Server/VmExtends",
};

std::unique_ptr< Server::Stub> Server::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Server::Stub> stub(new Server::Stub(channel));
  return stub;
}

Server::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Test_(Server_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HostInfo_(Server_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VmInstall_(Server_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VmCommon_(Server_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VmOperateSnapshot_(Server_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VmClone_(Server_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VmImpAndExp_(Server_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VmNetwork_(Server_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VmRdp_(Server_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VmRecord_(Server_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VmSharefolder_(Server_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VmConfig_(Server_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VmUSB_(Server_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VmAudio_(Server_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VmSerial_(Server_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_P2P_(Server_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VmExtends_(Server_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Server::Stub::Test(::grpc::ClientContext* context, const ::Qigrpc::requestNull& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Test_, context, request, response);
}

void Server::Stub::experimental_async::Test(::grpc::ClientContext* context, const ::Qigrpc::requestNull* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Test_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::Test(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Test_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncTestRaw(::grpc::ClientContext* context, const ::Qigrpc::requestNull& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_Test_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncTestRaw(::grpc::ClientContext* context, const ::Qigrpc::requestNull& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_Test_, context, request, false);
}

::grpc::Status Server::Stub::HostInfo(::grpc::ClientContext* context, const ::Qigrpc::requestNull& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HostInfo_, context, request, response);
}

void Server::Stub::experimental_async::HostInfo(::grpc::ClientContext* context, const ::Qigrpc::requestNull* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HostInfo_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::HostInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HostInfo_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncHostInfoRaw(::grpc::ClientContext* context, const ::Qigrpc::requestNull& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_HostInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncHostInfoRaw(::grpc::ClientContext* context, const ::Qigrpc::requestNull& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_HostInfo_, context, request, false);
}

::grpc::Status Server::Stub::VmInstall(::grpc::ClientContext* context, const ::Qigrpc::requestInstall& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VmInstall_, context, request, response);
}

void Server::Stub::experimental_async::VmInstall(::grpc::ClientContext* context, const ::Qigrpc::requestInstall* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmInstall_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::VmInstall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmInstall_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncVmInstallRaw(::grpc::ClientContext* context, const ::Qigrpc::requestInstall& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmInstall_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncVmInstallRaw(::grpc::ClientContext* context, const ::Qigrpc::requestInstall& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmInstall_, context, request, false);
}

::grpc::Status Server::Stub::VmCommon(::grpc::ClientContext* context, const ::Qigrpc::requestSimple& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VmCommon_, context, request, response);
}

void Server::Stub::experimental_async::VmCommon(::grpc::ClientContext* context, const ::Qigrpc::requestSimple* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmCommon_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::VmCommon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmCommon_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncVmCommonRaw(::grpc::ClientContext* context, const ::Qigrpc::requestSimple& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmCommon_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncVmCommonRaw(::grpc::ClientContext* context, const ::Qigrpc::requestSimple& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmCommon_, context, request, false);
}

::grpc::Status Server::Stub::VmOperateSnapshot(::grpc::ClientContext* context, const ::Qigrpc::requestSnapshot& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VmOperateSnapshot_, context, request, response);
}

void Server::Stub::experimental_async::VmOperateSnapshot(::grpc::ClientContext* context, const ::Qigrpc::requestSnapshot* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmOperateSnapshot_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::VmOperateSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmOperateSnapshot_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncVmOperateSnapshotRaw(::grpc::ClientContext* context, const ::Qigrpc::requestSnapshot& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmOperateSnapshot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncVmOperateSnapshotRaw(::grpc::ClientContext* context, const ::Qigrpc::requestSnapshot& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmOperateSnapshot_, context, request, false);
}

::grpc::Status Server::Stub::VmClone(::grpc::ClientContext* context, const ::Qigrpc::requestClone& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VmClone_, context, request, response);
}

void Server::Stub::experimental_async::VmClone(::grpc::ClientContext* context, const ::Qigrpc::requestClone* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmClone_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::VmClone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmClone_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncVmCloneRaw(::grpc::ClientContext* context, const ::Qigrpc::requestClone& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmClone_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncVmCloneRaw(::grpc::ClientContext* context, const ::Qigrpc::requestClone& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmClone_, context, request, false);
}

::grpc::Status Server::Stub::VmImpAndExp(::grpc::ClientContext* context, const ::Qigrpc::requestImpAndexportVM& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VmImpAndExp_, context, request, response);
}

void Server::Stub::experimental_async::VmImpAndExp(::grpc::ClientContext* context, const ::Qigrpc::requestImpAndexportVM* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmImpAndExp_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::VmImpAndExp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmImpAndExp_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncVmImpAndExpRaw(::grpc::ClientContext* context, const ::Qigrpc::requestImpAndexportVM& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmImpAndExp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncVmImpAndExpRaw(::grpc::ClientContext* context, const ::Qigrpc::requestImpAndexportVM& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmImpAndExp_, context, request, false);
}

::grpc::Status Server::Stub::VmNetwork(::grpc::ClientContext* context, const ::Qigrpc::requestNetwork& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VmNetwork_, context, request, response);
}

void Server::Stub::experimental_async::VmNetwork(::grpc::ClientContext* context, const ::Qigrpc::requestNetwork* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmNetwork_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::VmNetwork(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmNetwork_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncVmNetworkRaw(::grpc::ClientContext* context, const ::Qigrpc::requestNetwork& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmNetwork_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncVmNetworkRaw(::grpc::ClientContext* context, const ::Qigrpc::requestNetwork& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmNetwork_, context, request, false);
}

::grpc::Status Server::Stub::VmRdp(::grpc::ClientContext* context, const ::Qigrpc::requestRdp& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VmRdp_, context, request, response);
}

void Server::Stub::experimental_async::VmRdp(::grpc::ClientContext* context, const ::Qigrpc::requestRdp* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmRdp_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::VmRdp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmRdp_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncVmRdpRaw(::grpc::ClientContext* context, const ::Qigrpc::requestRdp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmRdp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncVmRdpRaw(::grpc::ClientContext* context, const ::Qigrpc::requestRdp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmRdp_, context, request, false);
}

::grpc::Status Server::Stub::VmRecord(::grpc::ClientContext* context, const ::Qigrpc::requestRecord& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VmRecord_, context, request, response);
}

void Server::Stub::experimental_async::VmRecord(::grpc::ClientContext* context, const ::Qigrpc::requestRecord* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmRecord_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::VmRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmRecord_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncVmRecordRaw(::grpc::ClientContext* context, const ::Qigrpc::requestRecord& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmRecord_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncVmRecordRaw(::grpc::ClientContext* context, const ::Qigrpc::requestRecord& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmRecord_, context, request, false);
}

::grpc::Status Server::Stub::VmSharefolder(::grpc::ClientContext* context, const ::Qigrpc::requestSharefolder& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VmSharefolder_, context, request, response);
}

void Server::Stub::experimental_async::VmSharefolder(::grpc::ClientContext* context, const ::Qigrpc::requestSharefolder* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmSharefolder_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::VmSharefolder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmSharefolder_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncVmSharefolderRaw(::grpc::ClientContext* context, const ::Qigrpc::requestSharefolder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmSharefolder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncVmSharefolderRaw(::grpc::ClientContext* context, const ::Qigrpc::requestSharefolder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmSharefolder_, context, request, false);
}

::grpc::Status Server::Stub::VmConfig(::grpc::ClientContext* context, const ::Qigrpc::requestConfig& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VmConfig_, context, request, response);
}

void Server::Stub::experimental_async::VmConfig(::grpc::ClientContext* context, const ::Qigrpc::requestConfig* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmConfig_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::VmConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmConfig_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncVmConfigRaw(::grpc::ClientContext* context, const ::Qigrpc::requestConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncVmConfigRaw(::grpc::ClientContext* context, const ::Qigrpc::requestConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmConfig_, context, request, false);
}

::grpc::Status Server::Stub::VmUSB(::grpc::ClientContext* context, const ::Qigrpc::requestUSB& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VmUSB_, context, request, response);
}

void Server::Stub::experimental_async::VmUSB(::grpc::ClientContext* context, const ::Qigrpc::requestUSB* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmUSB_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::VmUSB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmUSB_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncVmUSBRaw(::grpc::ClientContext* context, const ::Qigrpc::requestUSB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmUSB_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncVmUSBRaw(::grpc::ClientContext* context, const ::Qigrpc::requestUSB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmUSB_, context, request, false);
}

::grpc::Status Server::Stub::VmAudio(::grpc::ClientContext* context, const ::Qigrpc::requestAudio& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VmAudio_, context, request, response);
}

void Server::Stub::experimental_async::VmAudio(::grpc::ClientContext* context, const ::Qigrpc::requestAudio* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmAudio_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::VmAudio(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmAudio_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncVmAudioRaw(::grpc::ClientContext* context, const ::Qigrpc::requestAudio& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmAudio_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncVmAudioRaw(::grpc::ClientContext* context, const ::Qigrpc::requestAudio& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmAudio_, context, request, false);
}

::grpc::Status Server::Stub::VmSerial(::grpc::ClientContext* context, const ::Qigrpc::requestSerial& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VmSerial_, context, request, response);
}

void Server::Stub::experimental_async::VmSerial(::grpc::ClientContext* context, const ::Qigrpc::requestSerial* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmSerial_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::VmSerial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmSerial_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncVmSerialRaw(::grpc::ClientContext* context, const ::Qigrpc::requestSerial& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmSerial_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncVmSerialRaw(::grpc::ClientContext* context, const ::Qigrpc::requestSerial& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmSerial_, context, request, false);
}

::grpc::Status Server::Stub::P2P(::grpc::ClientContext* context, const ::Qigrpc::requestP2P& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_P2P_, context, request, response);
}

void Server::Stub::experimental_async::P2P(::grpc::ClientContext* context, const ::Qigrpc::requestP2P* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_P2P_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::P2P(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_P2P_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncP2PRaw(::grpc::ClientContext* context, const ::Qigrpc::requestP2P& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_P2P_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncP2PRaw(::grpc::ClientContext* context, const ::Qigrpc::requestP2P& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_P2P_, context, request, false);
}

::grpc::Status Server::Stub::VmExtends(::grpc::ClientContext* context, const ::Qigrpc::requestVmExtends& request, ::Qigrpc::vcaReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VmExtends_, context, request, response);
}

void Server::Stub::experimental_async::VmExtends(::grpc::ClientContext* context, const ::Qigrpc::requestVmExtends* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmExtends_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::VmExtends(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Qigrpc::vcaReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VmExtends_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::AsyncVmExtendsRaw(::grpc::ClientContext* context, const ::Qigrpc::requestVmExtends& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmExtends_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Qigrpc::vcaReply>* Server::Stub::PrepareAsyncVmExtendsRaw(::grpc::ClientContext* context, const ::Qigrpc::requestVmExtends& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Qigrpc::vcaReply>::Create(channel_.get(), cq, rpcmethod_VmExtends_, context, request, false);
}

Server::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestNull, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::Test), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestNull, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::HostInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestInstall, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::VmInstall), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestSimple, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::VmCommon), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestSnapshot, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::VmOperateSnapshot), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestClone, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::VmClone), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestImpAndexportVM, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::VmImpAndExp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestNetwork, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::VmNetwork), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestRdp, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::VmRdp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestRecord, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::VmRecord), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestSharefolder, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::VmSharefolder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestConfig, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::VmConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestUSB, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::VmUSB), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestAudio, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::VmAudio), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestSerial, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::VmSerial), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestP2P, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::P2P), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Qigrpc::requestVmExtends, ::Qigrpc::vcaReply>(
          std::mem_fn(&Server::Service::VmExtends), this)));
}

Server::Service::~Service() {
}

::grpc::Status Server::Service::Test(::grpc::ServerContext* context, const ::Qigrpc::requestNull* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::HostInfo(::grpc::ServerContext* context, const ::Qigrpc::requestNull* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::VmInstall(::grpc::ServerContext* context, const ::Qigrpc::requestInstall* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::VmCommon(::grpc::ServerContext* context, const ::Qigrpc::requestSimple* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::VmOperateSnapshot(::grpc::ServerContext* context, const ::Qigrpc::requestSnapshot* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::VmClone(::grpc::ServerContext* context, const ::Qigrpc::requestClone* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::VmImpAndExp(::grpc::ServerContext* context, const ::Qigrpc::requestImpAndexportVM* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::VmNetwork(::grpc::ServerContext* context, const ::Qigrpc::requestNetwork* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::VmRdp(::grpc::ServerContext* context, const ::Qigrpc::requestRdp* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::VmRecord(::grpc::ServerContext* context, const ::Qigrpc::requestRecord* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::VmSharefolder(::grpc::ServerContext* context, const ::Qigrpc::requestSharefolder* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::VmConfig(::grpc::ServerContext* context, const ::Qigrpc::requestConfig* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::VmUSB(::grpc::ServerContext* context, const ::Qigrpc::requestUSB* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::VmAudio(::grpc::ServerContext* context, const ::Qigrpc::requestAudio* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::VmSerial(::grpc::ServerContext* context, const ::Qigrpc::requestSerial* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::P2P(::grpc::ServerContext* context, const ::Qigrpc::requestP2P* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::VmExtends(::grpc::ServerContext* context, const ::Qigrpc::requestVmExtends* request, ::Qigrpc::vcaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Qigrpc

