// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qigrpc.proto

#include "qigrpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace Qigrpc {
class requestNullDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestNull> _instance;
} _requestNull_default_instance_;
class requestSimpleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestSimple> _instance;
} _requestSimple_default_instance_;
class requestSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestSnapshot> _instance;
} _requestSnapshot_default_instance_;
class requestCloneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestClone> _instance;
} _requestClone_default_instance_;
class requestInstallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestInstall> _instance;
} _requestInstall_default_instance_;
class requestImpAndexportVMDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestImpAndexportVM> _instance;
} _requestImpAndexportVM_default_instance_;
class requestNetworkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestNetwork> _instance;
} _requestNetwork_default_instance_;
class requestRdpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestRdp> _instance;
} _requestRdp_default_instance_;
class requestRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestRecord> _instance;
} _requestRecord_default_instance_;
class requestSharefolderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestSharefolder> _instance;
} _requestSharefolder_default_instance_;
class requestConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestConfig> _instance;
} _requestConfig_default_instance_;
class requestUSBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestUSB> _instance;
} _requestUSB_default_instance_;
class requestAudioDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestAudio> _instance;
} _requestAudio_default_instance_;
class requestSerialDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestSerial> _instance;
} _requestSerial_default_instance_;
class requestP2PDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestP2P> _instance;
} _requestP2P_default_instance_;
class requestVmExtendsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<requestVmExtends> _instance;
} _requestVmExtends_default_instance_;
class vcaReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<vcaReply> _instance;
} _vcaReply_default_instance_;
}  // namespace Qigrpc
static void InitDefaultsrequestNull_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestNull_default_instance_;
    new (ptr) ::Qigrpc::requestNull();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestNull::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestNull_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestNull_qigrpc_2eproto}, {}};

static void InitDefaultsrequestSimple_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestSimple_default_instance_;
    new (ptr) ::Qigrpc::requestSimple();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestSimple::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestSimple_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestSimple_qigrpc_2eproto}, {}};

static void InitDefaultsrequestSnapshot_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestSnapshot_default_instance_;
    new (ptr) ::Qigrpc::requestSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestSnapshot_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestSnapshot_qigrpc_2eproto}, {}};

static void InitDefaultsrequestClone_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestClone_default_instance_;
    new (ptr) ::Qigrpc::requestClone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestClone::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestClone_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestClone_qigrpc_2eproto}, {}};

static void InitDefaultsrequestInstall_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestInstall_default_instance_;
    new (ptr) ::Qigrpc::requestInstall();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestInstall::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestInstall_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestInstall_qigrpc_2eproto}, {}};

static void InitDefaultsrequestImpAndexportVM_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestImpAndexportVM_default_instance_;
    new (ptr) ::Qigrpc::requestImpAndexportVM();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestImpAndexportVM::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestImpAndexportVM_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestImpAndexportVM_qigrpc_2eproto}, {}};

static void InitDefaultsrequestNetwork_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestNetwork_default_instance_;
    new (ptr) ::Qigrpc::requestNetwork();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestNetwork::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestNetwork_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestNetwork_qigrpc_2eproto}, {}};

static void InitDefaultsrequestRdp_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestRdp_default_instance_;
    new (ptr) ::Qigrpc::requestRdp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestRdp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestRdp_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestRdp_qigrpc_2eproto}, {}};

static void InitDefaultsrequestRecord_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestRecord_default_instance_;
    new (ptr) ::Qigrpc::requestRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestRecord_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestRecord_qigrpc_2eproto}, {}};

static void InitDefaultsrequestSharefolder_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestSharefolder_default_instance_;
    new (ptr) ::Qigrpc::requestSharefolder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestSharefolder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestSharefolder_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestSharefolder_qigrpc_2eproto}, {}};

static void InitDefaultsrequestConfig_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestConfig_default_instance_;
    new (ptr) ::Qigrpc::requestConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestConfig_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestConfig_qigrpc_2eproto}, {}};

static void InitDefaultsrequestUSB_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestUSB_default_instance_;
    new (ptr) ::Qigrpc::requestUSB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestUSB::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestUSB_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestUSB_qigrpc_2eproto}, {}};

static void InitDefaultsrequestAudio_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestAudio_default_instance_;
    new (ptr) ::Qigrpc::requestAudio();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestAudio::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestAudio_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestAudio_qigrpc_2eproto}, {}};

static void InitDefaultsrequestSerial_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestSerial_default_instance_;
    new (ptr) ::Qigrpc::requestSerial();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestSerial::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestSerial_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestSerial_qigrpc_2eproto}, {}};

static void InitDefaultsrequestP2P_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestP2P_default_instance_;
    new (ptr) ::Qigrpc::requestP2P();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestP2P::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestP2P_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestP2P_qigrpc_2eproto}, {}};

static void InitDefaultsrequestVmExtends_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_requestVmExtends_default_instance_;
    new (ptr) ::Qigrpc::requestVmExtends();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::requestVmExtends::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_requestVmExtends_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrequestVmExtends_qigrpc_2eproto}, {}};

static void InitDefaultsvcaReply_qigrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Qigrpc::_vcaReply_default_instance_;
    new (ptr) ::Qigrpc::vcaReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Qigrpc::vcaReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_vcaReply_qigrpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsvcaReply_qigrpc_2eproto}, {}};

void InitDefaults_qigrpc_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_requestNull_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestSimple_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestSnapshot_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestClone_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestInstall_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestImpAndexportVM_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestNetwork_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestRdp_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestRecord_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestSharefolder_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestConfig_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestUSB_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestAudio_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestSerial_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestP2P_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_requestVmExtends_qigrpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_vcaReply_qigrpc_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_qigrpc_2eproto[17];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_qigrpc_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_qigrpc_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_qigrpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestNull, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSimple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSimple, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSimple, vmname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSnapshot, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSnapshot, vmname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSnapshot, snapshotname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestClone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestClone, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestClone, vmname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestClone, targetvmname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestClone, basefolder_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestClone, keepmacs_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestClone, keephwuuids_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestClone, keepdiskname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestInstall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestInstall, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestInstall, vmname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestInstall, ostypeid_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestInstall, cpucount_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestInstall, memorysize_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestInstall, basefolder_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestInstall, sourcepath_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestInstall, storagebustype_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestInstall, logicdisksize_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestInstall, diskformat_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestInstall, fix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestImpAndexportVM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestImpAndexportVM, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestImpAndexportVM, vmname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestImpAndexportVM, ovapath_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestImpAndexportVM, exportpath_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestImpAndexportVM, keepmac_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestImpAndexportVM, ostypeid_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestImpAndexportVM, cpucount_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestImpAndexportVM, memory_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestImpAndexportVM, netup_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestImpAndexportVM, basefolder_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestImpAndexportVM, ovsfiletype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestNetwork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestNetwork, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestNetwork, vmname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestNetwork, slot_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestNetwork, hostpciname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestNetwork, mac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRdp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRdp, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRdp, vmname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRdp, listenaddress_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRdp, listenport_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRdp, allowmulticonnect_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRdp, reusesingleconnect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRecord, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRecord, vmname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRecord, on_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRecord, screenid_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRecord, basefolder_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRecord, width_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRecord, height_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRecord, fps_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestRecord, kbps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSharefolder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSharefolder, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSharefolder, vmname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSharefolder, sharefoldername_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSharefolder, serverpath_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSharefolder, writeable_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSharefolder, internalpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestConfig, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestConfig, vmname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestConfig, cpucount_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestConfig, memorysize_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestConfig, ramsize_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestConfig, monitorcount_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestConfig, enable3d_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestUSB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestUSB, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestUSB, vmname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestUSB, usbname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestUSB, usbtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestAudio, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestAudio, vmname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestAudio, audioswitch_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestAudio, audioin_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestAudio, audioout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSerial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSerial, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSerial, vmname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestSerial, slot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestP2P, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestP2P, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestP2P, sharefilepath_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestP2P, shareseedpath_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestP2P, shareip_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestP2P, downloadip_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestP2P, downloadseedpath_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestP2P, downloadfilepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestVmExtends, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestVmExtends, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestVmExtends, vmname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestVmExtends, diskname_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestVmExtends, diskuuid_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestVmExtends, diskformattype_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestVmExtends, basefolder_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestVmExtends, size_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestVmExtends, storagecontroller_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::requestVmExtends, slot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::vcaReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Qigrpc::vcaReply, vcamethod_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::vcaReply, data_),
  PROTOBUF_FIELD_OFFSET(::Qigrpc::vcaReply, code_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Qigrpc::requestNull)},
  { 5, -1, sizeof(::Qigrpc::requestSimple)},
  { 12, -1, sizeof(::Qigrpc::requestSnapshot)},
  { 20, -1, sizeof(::Qigrpc::requestClone)},
  { 32, -1, sizeof(::Qigrpc::requestInstall)},
  { 48, -1, sizeof(::Qigrpc::requestImpAndexportVM)},
  { 64, -1, sizeof(::Qigrpc::requestNetwork)},
  { 74, -1, sizeof(::Qigrpc::requestRdp)},
  { 85, -1, sizeof(::Qigrpc::requestRecord)},
  { 99, -1, sizeof(::Qigrpc::requestSharefolder)},
  { 110, -1, sizeof(::Qigrpc::requestConfig)},
  { 122, -1, sizeof(::Qigrpc::requestUSB)},
  { 131, -1, sizeof(::Qigrpc::requestAudio)},
  { 141, -1, sizeof(::Qigrpc::requestSerial)},
  { 149, -1, sizeof(::Qigrpc::requestP2P)},
  { 161, -1, sizeof(::Qigrpc::requestVmExtends)},
  { 175, -1, sizeof(::Qigrpc::vcaReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestNull_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestSimple_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestClone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestInstall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestImpAndexportVM_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestNetwork_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestRdp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestSharefolder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestUSB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestAudio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestSerial_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestP2P_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_requestVmExtends_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Qigrpc::_vcaReply_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_qigrpc_2eproto = {
  {}, AddDescriptors_qigrpc_2eproto, "qigrpc.proto", schemas,
  file_default_instances, TableStruct_qigrpc_2eproto::offsets,
  file_level_metadata_qigrpc_2eproto, 17, file_level_enum_descriptors_qigrpc_2eproto, file_level_service_descriptors_qigrpc_2eproto,
};

const char descriptor_table_protodef_qigrpc_2eproto[] =
  "\n\014qigrpc.proto\022\006Qigrpc\"\r\n\013requestNull\"2\n"
  "\rrequestSimple\022\021\n\tvcamethod\030\001 \001(\005\022\016\n\006vmn"
  "ame\030\002 \001(\t\"J\n\017requestSnapshot\022\021\n\tvcametho"
  "d\030\001 \001(\005\022\016\n\006vmname\030\002 \001(\t\022\024\n\014snapshotname\030"
  "\003 \001(\t\"\230\001\n\014requestClone\022\021\n\tvcamethod\030\001 \001("
  "\005\022\016\n\006vmname\030\002 \001(\t\022\024\n\014targetvmname\030\003 \001(\t\022"
  "\022\n\nbasefolder\030\004 \001(\t\022\020\n\010keepmacs\030\005 \001(\010\022\023\n"
  "\013keephwuuids\030\006 \001(\010\022\024\n\014keepdiskname\030\007 \001(\010"
  "\"\343\001\n\016requestInstall\022\021\n\tvcamethod\030\001 \001(\005\022\016"
  "\n\006vmname\030\002 \001(\t\022\020\n\010ostypeid\030\003 \001(\t\022\020\n\010cpuc"
  "ount\030\004 \001(\005\022\022\n\nmemorysize\030\005 \001(\005\022\022\n\nbasefo"
  "lder\030\006 \001(\t\022\022\n\nsourcepath\030\007 \001(\t\022\026\n\016storag"
  "ebustype\030\010 \001(\t\022\025\n\rlogicdisksize\030\t \001(\003\022\022\n"
  "\ndiskformat\030\n \001(\t\022\013\n\003fix\030\013 \001(\010\"\334\001\n\025reque"
  "stImpAndexportVM\022\021\n\tvcamethod\030\001 \001(\005\022\016\n\006v"
  "mname\030\002 \001(\t\022\017\n\007ovapath\030\003 \001(\t\022\022\n\nexportpa"
  "th\030\004 \001(\t\022\017\n\007keepmac\030\005 \001(\010\022\020\n\010ostypeid\030\006 "
  "\001(\t\022\020\n\010cpucount\030\007 \001(\005\022\016\n\006memory\030\010 \001(\005\022\r\n"
  "\005netup\030\t \001(\010\022\022\n\nbasefolder\030\n \001(\t\022\023\n\013ovsf"
  "iletype\030\013 \001(\t\"c\n\016requestNetwork\022\021\n\tvcame"
  "thod\030\001 \001(\005\022\016\n\006vmname\030\002 \001(\t\022\014\n\004slot\030\003 \001(\005"
  "\022\023\n\013hostpciname\030\004 \001(\t\022\013\n\003mac\030\005 \001(\t\"\221\001\n\nr"
  "equestRdp\022\021\n\tvcamethod\030\001 \001(\005\022\016\n\006vmname\030\002"
  " \001(\t\022\025\n\rlistenaddress\030\003 \001(\t\022\022\n\nlistenpor"
  "t\030\004 \001(\005\022\031\n\021allowmulticonnect\030\005 \001(\010\022\032\n\022re"
  "usesingleconnect\030\006 \001(\010\"\236\001\n\rrequestRecord"
  "\022\021\n\tvcamethod\030\001 \001(\005\022\016\n\006vmname\030\002 \001(\t\022\n\n\002o"
  "n\030\003 \001(\010\022\020\n\010screenid\030\004 \001(\005\022\022\n\nbasefolder\030"
  "\005 \001(\t\022\r\n\005width\030\006 \001(\005\022\016\n\006height\030\007 \001(\005\022\013\n\003"
  "fps\030\010 \001(\005\022\014\n\004kbps\030\t \001(\005\"\215\001\n\022requestShare"
  "folder\022\021\n\tvcamethod\030\001 \001(\005\022\016\n\006vmname\030\002 \001("
  "\t\022\027\n\017sharefoldername\030\003 \001(\t\022\022\n\nserverpath"
  "\030\004 \001(\t\022\021\n\twriteable\030\005 \001(\010\022\024\n\014internalpat"
  "h\030\006 \001(\t\"\221\001\n\rrequestConfig\022\021\n\tvcamethod\030\001"
  " \001(\005\022\016\n\006vmname\030\002 \001(\t\022\020\n\010cpucount\030\003 \001(\005\022\022"
  "\n\nmemorysize\030\004 \001(\005\022\017\n\007ramsize\030\005 \001(\005\022\024\n\014m"
  "onitorcount\030\006 \001(\005\022\020\n\010enable3d\030\007 \001(\010\"Q\n\nr"
  "equestUSB\022\021\n\tvcamethod\030\001 \001(\005\022\016\n\006vmname\030\002"
  " \001(\t\022\017\n\007usbname\030\003 \001(\t\022\017\n\007usbtype\030\004 \001(\t\"i"
  "\n\014requestAudio\022\021\n\tvcamethod\030\001 \001(\005\022\016\n\006vmn"
  "ame\030\002 \001(\t\022\023\n\013audioswitch\030\003 \001(\010\022\017\n\007audioi"
  "n\030\004 \001(\010\022\020\n\010audioout\030\005 \001(\010\"@\n\rrequestSeri"
  "al\022\021\n\tvcamethod\030\001 \001(\005\022\016\n\006vmname\030\002 \001(\t\022\014\n"
  "\004slot\030\003 \001(\005\"\246\001\n\nrequestP2P\022\021\n\tvcamethod\030"
  "\001 \001(\005\022\025\n\rsharefilepath\030\002 \001(\t\022\025\n\rsharesee"
  "dpath\030\003 \001(\t\022\017\n\007shareip\030\004 \001(\t\022\022\n\ndownload"
  "ip\030\005 \001(\t\022\030\n\020downloadseedpath\030\006 \001(\t\022\030\n\020do"
  "wnloadfilepath\030\007 \001(\t\"\274\001\n\020requestVmExtend"
  "s\022\021\n\tvcamethod\030\001 \001(\005\022\016\n\006vmname\030\002 \001(\t\022\020\n\010"
  "diskname\030\003 \001(\t\022\020\n\010diskuuid\030\004 \001(\t\022\026\n\016disk"
  "formattype\030\005 \001(\t\022\022\n\nbasefolder\030\006 \001(\t\022\014\n\004"
  "size\030\007 \001(\003\022\031\n\021storagecontroller\030\010 \001(\t\022\014\n"
  "\004slot\030\t \001(\005\"9\n\010vcaReply\022\021\n\tvcamethod\030\001 \001"
  "(\t\022\014\n\004data\030\002 \001(\t\022\014\n\004code\030\003 \001(\0052\267\007\n\006Serve"
  "r\022/\n\004Test\022\023.Qigrpc.requestNull\032\020.Qigrpc."
  "vcaReply\"\000\0223\n\010HostInfo\022\023.Qigrpc.requestN"
  "ull\032\020.Qigrpc.vcaReply\"\000\0227\n\tVmInstall\022\026.Q"
  "igrpc.requestInstall\032\020.Qigrpc.vcaReply\"\000"
  "\0225\n\010VmCommon\022\025.Qigrpc.requestSimple\032\020.Qi"
  "grpc.vcaReply\"\000\022@\n\021VmOperateSnapshot\022\027.Q"
  "igrpc.requestSnapshot\032\020.Qigrpc.vcaReply\""
  "\000\0223\n\007VmClone\022\024.Qigrpc.requestClone\032\020.Qig"
  "rpc.vcaReply\"\000\022@\n\013VmImpAndExp\022\035.Qigrpc.r"
  "equestImpAndexportVM\032\020.Qigrpc.vcaReply\"\000"
  "\0227\n\tVmNetwork\022\026.Qigrpc.requestNetwork\032\020."
  "Qigrpc.vcaReply\"\000\022/\n\005VmRdp\022\022.Qigrpc.requ"
  "estRdp\032\020.Qigrpc.vcaReply\"\000\0225\n\010VmRecord\022\025"
  ".Qigrpc.requestRecord\032\020.Qigrpc.vcaReply\""
  "\000\022\?\n\rVmSharefolder\022\032.Qigrpc.requestShare"
  "folder\032\020.Qigrpc.vcaReply\"\000\0225\n\010VmConfig\022\025"
  ".Qigrpc.requestConfig\032\020.Qigrpc.vcaReply\""
  "\000\022/\n\005VmUSB\022\022.Qigrpc.requestUSB\032\020.Qigrpc."
  "vcaReply\"\000\0223\n\007VmAudio\022\024.Qigrpc.requestAu"
  "dio\032\020.Qigrpc.vcaReply\"\000\0225\n\010VmSerial\022\025.Qi"
  "grpc.requestSerial\032\020.Qigrpc.vcaReply\"\000\022-"
  "\n\003P2P\022\022.Qigrpc.requestP2P\032\020.Qigrpc.vcaRe"
  "ply\"\000\0229\n\tVmExtends\022\030.Qigrpc.requestVmExt"
  "ends\032\020.Qigrpc.vcaReply\"\000b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_qigrpc_2eproto = {
  false, InitDefaults_qigrpc_2eproto, 
  descriptor_table_protodef_qigrpc_2eproto,
  "qigrpc.proto", &assign_descriptors_table_qigrpc_2eproto, 3112,
};

void AddDescriptors_qigrpc_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_qigrpc_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_qigrpc_2eproto = []() { AddDescriptors_qigrpc_2eproto(); return true; }();
namespace Qigrpc {

// ===================================================================

void requestNull::InitAsDefaultInstance() {
}
class requestNull::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestNull::requestNull()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestNull)
}
requestNull::requestNull(const requestNull& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestNull)
}

void requestNull::SharedCtor() {
}

requestNull::~requestNull() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestNull)
  SharedDtor();
}

void requestNull::SharedDtor() {
}

void requestNull::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestNull& requestNull::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestNull_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestNull::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestNull)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestNull::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestNull*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestNull::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestNull)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestNull)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestNull)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestNull::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestNull)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestNull)
}

::google::protobuf::uint8* requestNull::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestNull)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestNull)
  return target;
}

size_t requestNull::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestNull)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestNull::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestNull)
  GOOGLE_DCHECK_NE(&from, this);
  const requestNull* source =
      ::google::protobuf::DynamicCastToGenerated<requestNull>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestNull)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestNull)
    MergeFrom(*source);
  }
}

void requestNull::MergeFrom(const requestNull& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestNull)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void requestNull::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestNull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestNull::CopyFrom(const requestNull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestNull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestNull::IsInitialized() const {
  return true;
}

void requestNull::Swap(requestNull* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestNull::InternalSwap(requestNull* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata requestNull::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestSimple::InitAsDefaultInstance() {
}
class requestSimple::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestSimple::kVcamethodFieldNumber;
const int requestSimple::kVmnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestSimple::requestSimple()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestSimple)
}
requestSimple::requestSimple(const requestSimple& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vmname().size() > 0) {
    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  vcamethod_ = from.vcamethod_;
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestSimple)
}

void requestSimple::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestSimple_qigrpc_2eproto.base);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vcamethod_ = 0;
}

requestSimple::~requestSimple() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestSimple)
  SharedDtor();
}

void requestSimple::SharedDtor() {
  vmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestSimple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestSimple& requestSimple::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestSimple_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestSimple::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestSimple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vcamethod_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestSimple::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestSimple*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string vmname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestSimple.vmname");
        object = msg->mutable_vmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestSimple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestSimple)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vmname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmname().data(), static_cast<int>(this->vmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestSimple.vmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestSimple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestSimple)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestSimple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestSimple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSimple.vmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vmname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestSimple)
}

::google::protobuf::uint8* requestSimple::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestSimple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSimple.vmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vmname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestSimple)
  return target;
}

size_t requestSimple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestSimple)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vmname());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestSimple::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestSimple)
  GOOGLE_DCHECK_NE(&from, this);
  const requestSimple* source =
      ::google::protobuf::DynamicCastToGenerated<requestSimple>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestSimple)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestSimple)
    MergeFrom(*source);
  }
}

void requestSimple::MergeFrom(const requestSimple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestSimple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vmname().size() > 0) {

    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
}

void requestSimple::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestSimple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestSimple::CopyFrom(const requestSimple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestSimple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestSimple::IsInitialized() const {
  return true;
}

void requestSimple::Swap(requestSimple* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestSimple::InternalSwap(requestSimple* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmname_.Swap(&other->vmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
}

::google::protobuf::Metadata requestSimple::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestSnapshot::InitAsDefaultInstance() {
}
class requestSnapshot::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestSnapshot::kVcamethodFieldNumber;
const int requestSnapshot::kVmnameFieldNumber;
const int requestSnapshot::kSnapshotnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestSnapshot::requestSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestSnapshot)
}
requestSnapshot::requestSnapshot(const requestSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vmname().size() > 0) {
    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  snapshotname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.snapshotname().size() > 0) {
    snapshotname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshotname_);
  }
  vcamethod_ = from.vcamethod_;
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestSnapshot)
}

void requestSnapshot::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestSnapshot_qigrpc_2eproto.base);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snapshotname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vcamethod_ = 0;
}

requestSnapshot::~requestSnapshot() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestSnapshot)
  SharedDtor();
}

void requestSnapshot::SharedDtor() {
  vmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snapshotname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestSnapshot& requestSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestSnapshot_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snapshotname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vcamethod_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestSnapshot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestSnapshot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string vmname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestSnapshot.vmname");
        object = msg->mutable_vmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string snapshotname = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestSnapshot.snapshotname");
        object = msg->mutable_snapshotname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vmname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmname().data(), static_cast<int>(this->vmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestSnapshot.vmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string snapshotname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshotname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshotname().data(), static_cast<int>(this->snapshotname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestSnapshot.snapshotname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestSnapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSnapshot.vmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vmname(), output);
  }

  // string snapshotname = 3;
  if (this->snapshotname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshotname().data(), static_cast<int>(this->snapshotname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSnapshot.snapshotname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->snapshotname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestSnapshot)
}

::google::protobuf::uint8* requestSnapshot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSnapshot.vmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vmname(), target);
  }

  // string snapshotname = 3;
  if (this->snapshotname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshotname().data(), static_cast<int>(this->snapshotname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSnapshot.snapshotname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->snapshotname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestSnapshot)
  return target;
}

size_t requestSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestSnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vmname());
  }

  // string snapshotname = 3;
  if (this->snapshotname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snapshotname());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const requestSnapshot* source =
      ::google::protobuf::DynamicCastToGenerated<requestSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestSnapshot)
    MergeFrom(*source);
  }
}

void requestSnapshot::MergeFrom(const requestSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vmname().size() > 0) {

    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  if (from.snapshotname().size() > 0) {

    snapshotname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshotname_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
}

void requestSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestSnapshot::CopyFrom(const requestSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestSnapshot::IsInitialized() const {
  return true;
}

void requestSnapshot::Swap(requestSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestSnapshot::InternalSwap(requestSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmname_.Swap(&other->vmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  snapshotname_.Swap(&other->snapshotname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
}

::google::protobuf::Metadata requestSnapshot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestClone::InitAsDefaultInstance() {
}
class requestClone::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestClone::kVcamethodFieldNumber;
const int requestClone::kVmnameFieldNumber;
const int requestClone::kTargetvmnameFieldNumber;
const int requestClone::kBasefolderFieldNumber;
const int requestClone::kKeepmacsFieldNumber;
const int requestClone::kKeephwuuidsFieldNumber;
const int requestClone::kKeepdisknameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestClone::requestClone()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestClone)
}
requestClone::requestClone(const requestClone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vmname().size() > 0) {
    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  targetvmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.targetvmname().size() > 0) {
    targetvmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetvmname_);
  }
  basefolder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.basefolder().size() > 0) {
    basefolder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basefolder_);
  }
  ::memcpy(&vcamethod_, &from.vcamethod_,
    static_cast<size_t>(reinterpret_cast<char*>(&keepdiskname_) -
    reinterpret_cast<char*>(&vcamethod_)) + sizeof(keepdiskname_));
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestClone)
}

void requestClone::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestClone_qigrpc_2eproto.base);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetvmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keepdiskname_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(keepdiskname_));
}

requestClone::~requestClone() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestClone)
  SharedDtor();
}

void requestClone::SharedDtor() {
  vmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetvmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestClone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestClone& requestClone::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestClone_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestClone::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestClone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetvmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keepdiskname_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(keepdiskname_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestClone::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestClone*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string vmname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestClone.vmname");
        object = msg->mutable_vmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string targetvmname = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestClone.targetvmname");
        object = msg->mutable_targetvmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string basefolder = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestClone.basefolder");
        object = msg->mutable_basefolder();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool keepmacs = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_keepmacs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool keephwuuids = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_keephwuuids(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool keepdiskname = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_keepdiskname(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestClone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestClone)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vmname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmname().data(), static_cast<int>(this->vmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestClone.vmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string targetvmname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetvmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->targetvmname().data(), static_cast<int>(this->targetvmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestClone.targetvmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string basefolder = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basefolder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->basefolder().data(), static_cast<int>(this->basefolder().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestClone.basefolder"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keepmacs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keepmacs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keephwuuids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keephwuuids_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keepdiskname = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keepdiskname_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestClone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestClone)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestClone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestClone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestClone.vmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vmname(), output);
  }

  // string targetvmname = 3;
  if (this->targetvmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->targetvmname().data(), static_cast<int>(this->targetvmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestClone.targetvmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->targetvmname(), output);
  }

  // string basefolder = 4;
  if (this->basefolder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basefolder().data(), static_cast<int>(this->basefolder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestClone.basefolder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->basefolder(), output);
  }

  // bool keepmacs = 5;
  if (this->keepmacs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->keepmacs(), output);
  }

  // bool keephwuuids = 6;
  if (this->keephwuuids() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->keephwuuids(), output);
  }

  // bool keepdiskname = 7;
  if (this->keepdiskname() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->keepdiskname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestClone)
}

::google::protobuf::uint8* requestClone::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestClone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestClone.vmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vmname(), target);
  }

  // string targetvmname = 3;
  if (this->targetvmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->targetvmname().data(), static_cast<int>(this->targetvmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestClone.targetvmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->targetvmname(), target);
  }

  // string basefolder = 4;
  if (this->basefolder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basefolder().data(), static_cast<int>(this->basefolder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestClone.basefolder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->basefolder(), target);
  }

  // bool keepmacs = 5;
  if (this->keepmacs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->keepmacs(), target);
  }

  // bool keephwuuids = 6;
  if (this->keephwuuids() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->keephwuuids(), target);
  }

  // bool keepdiskname = 7;
  if (this->keepdiskname() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->keepdiskname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestClone)
  return target;
}

size_t requestClone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestClone)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vmname());
  }

  // string targetvmname = 3;
  if (this->targetvmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetvmname());
  }

  // string basefolder = 4;
  if (this->basefolder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basefolder());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  // bool keepmacs = 5;
  if (this->keepmacs() != 0) {
    total_size += 1 + 1;
  }

  // bool keephwuuids = 6;
  if (this->keephwuuids() != 0) {
    total_size += 1 + 1;
  }

  // bool keepdiskname = 7;
  if (this->keepdiskname() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestClone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestClone)
  GOOGLE_DCHECK_NE(&from, this);
  const requestClone* source =
      ::google::protobuf::DynamicCastToGenerated<requestClone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestClone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestClone)
    MergeFrom(*source);
  }
}

void requestClone::MergeFrom(const requestClone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestClone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vmname().size() > 0) {

    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  if (from.targetvmname().size() > 0) {

    targetvmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetvmname_);
  }
  if (from.basefolder().size() > 0) {

    basefolder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basefolder_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
  if (from.keepmacs() != 0) {
    set_keepmacs(from.keepmacs());
  }
  if (from.keephwuuids() != 0) {
    set_keephwuuids(from.keephwuuids());
  }
  if (from.keepdiskname() != 0) {
    set_keepdiskname(from.keepdiskname());
  }
}

void requestClone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestClone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestClone::CopyFrom(const requestClone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestClone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestClone::IsInitialized() const {
  return true;
}

void requestClone::Swap(requestClone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestClone::InternalSwap(requestClone* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmname_.Swap(&other->vmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  targetvmname_.Swap(&other->targetvmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  basefolder_.Swap(&other->basefolder_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
  swap(keepmacs_, other->keepmacs_);
  swap(keephwuuids_, other->keephwuuids_);
  swap(keepdiskname_, other->keepdiskname_);
}

::google::protobuf::Metadata requestClone::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestInstall::InitAsDefaultInstance() {
}
class requestInstall::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestInstall::kVcamethodFieldNumber;
const int requestInstall::kVmnameFieldNumber;
const int requestInstall::kOstypeidFieldNumber;
const int requestInstall::kCpucountFieldNumber;
const int requestInstall::kMemorysizeFieldNumber;
const int requestInstall::kBasefolderFieldNumber;
const int requestInstall::kSourcepathFieldNumber;
const int requestInstall::kStoragebustypeFieldNumber;
const int requestInstall::kLogicdisksizeFieldNumber;
const int requestInstall::kDiskformatFieldNumber;
const int requestInstall::kFixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestInstall::requestInstall()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestInstall)
}
requestInstall::requestInstall(const requestInstall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vmname().size() > 0) {
    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  ostypeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ostypeid().size() > 0) {
    ostypeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ostypeid_);
  }
  basefolder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.basefolder().size() > 0) {
    basefolder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basefolder_);
  }
  sourcepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sourcepath().size() > 0) {
    sourcepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourcepath_);
  }
  storagebustype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.storagebustype().size() > 0) {
    storagebustype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storagebustype_);
  }
  diskformat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskformat().size() > 0) {
    diskformat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskformat_);
  }
  ::memcpy(&vcamethod_, &from.vcamethod_,
    static_cast<size_t>(reinterpret_cast<char*>(&logicdisksize_) -
    reinterpret_cast<char*>(&vcamethod_)) + sizeof(logicdisksize_));
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestInstall)
}

void requestInstall::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestInstall_qigrpc_2eproto.base);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostypeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourcepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storagebustype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskformat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logicdisksize_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(logicdisksize_));
}

requestInstall::~requestInstall() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestInstall)
  SharedDtor();
}

void requestInstall::SharedDtor() {
  vmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostypeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourcepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storagebustype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskformat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestInstall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestInstall& requestInstall::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestInstall_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestInstall::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestInstall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostypeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourcepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storagebustype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskformat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logicdisksize_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(logicdisksize_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestInstall::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestInstall*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string vmname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestInstall.vmname");
        object = msg->mutable_vmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ostypeid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestInstall.ostypeid");
        object = msg->mutable_ostypeid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 cpucount = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_cpucount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 memorysize = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_memorysize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string basefolder = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestInstall.basefolder");
        object = msg->mutable_basefolder();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string sourcepath = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestInstall.sourcepath");
        object = msg->mutable_sourcepath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string storagebustype = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestInstall.storagebustype");
        object = msg->mutable_storagebustype();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 logicdisksize = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_logicdisksize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string diskformat = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestInstall.diskformat");
        object = msg->mutable_diskformat();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool fix = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_fix(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestInstall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestInstall)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vmname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmname().data(), static_cast<int>(this->vmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestInstall.vmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ostypeid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ostypeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ostypeid().data(), static_cast<int>(this->ostypeid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestInstall.ostypeid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cpucount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpucount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 memorysize = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memorysize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string basefolder = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basefolder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->basefolder().data(), static_cast<int>(this->basefolder().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestInstall.basefolder"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sourcepath = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sourcepath().data(), static_cast<int>(this->sourcepath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestInstall.sourcepath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string storagebustype = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storagebustype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->storagebustype().data(), static_cast<int>(this->storagebustype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestInstall.storagebustype"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 logicdisksize = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logicdisksize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskformat = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskformat()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskformat().data(), static_cast<int>(this->diskformat().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestInstall.diskformat"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fix = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestInstall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestInstall)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestInstall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestInstall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestInstall.vmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vmname(), output);
  }

  // string ostypeid = 3;
  if (this->ostypeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ostypeid().data(), static_cast<int>(this->ostypeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestInstall.ostypeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ostypeid(), output);
  }

  // int32 cpucount = 4;
  if (this->cpucount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cpucount(), output);
  }

  // int32 memorysize = 5;
  if (this->memorysize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->memorysize(), output);
  }

  // string basefolder = 6;
  if (this->basefolder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basefolder().data(), static_cast<int>(this->basefolder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestInstall.basefolder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->basefolder(), output);
  }

  // string sourcepath = 7;
  if (this->sourcepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourcepath().data(), static_cast<int>(this->sourcepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestInstall.sourcepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sourcepath(), output);
  }

  // string storagebustype = 8;
  if (this->storagebustype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->storagebustype().data(), static_cast<int>(this->storagebustype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestInstall.storagebustype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->storagebustype(), output);
  }

  // int64 logicdisksize = 9;
  if (this->logicdisksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->logicdisksize(), output);
  }

  // string diskformat = 10;
  if (this->diskformat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskformat().data(), static_cast<int>(this->diskformat().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestInstall.diskformat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->diskformat(), output);
  }

  // bool fix = 11;
  if (this->fix() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->fix(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestInstall)
}

::google::protobuf::uint8* requestInstall::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestInstall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestInstall.vmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vmname(), target);
  }

  // string ostypeid = 3;
  if (this->ostypeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ostypeid().data(), static_cast<int>(this->ostypeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestInstall.ostypeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ostypeid(), target);
  }

  // int32 cpucount = 4;
  if (this->cpucount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cpucount(), target);
  }

  // int32 memorysize = 5;
  if (this->memorysize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->memorysize(), target);
  }

  // string basefolder = 6;
  if (this->basefolder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basefolder().data(), static_cast<int>(this->basefolder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestInstall.basefolder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->basefolder(), target);
  }

  // string sourcepath = 7;
  if (this->sourcepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourcepath().data(), static_cast<int>(this->sourcepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestInstall.sourcepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sourcepath(), target);
  }

  // string storagebustype = 8;
  if (this->storagebustype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->storagebustype().data(), static_cast<int>(this->storagebustype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestInstall.storagebustype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->storagebustype(), target);
  }

  // int64 logicdisksize = 9;
  if (this->logicdisksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->logicdisksize(), target);
  }

  // string diskformat = 10;
  if (this->diskformat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskformat().data(), static_cast<int>(this->diskformat().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestInstall.diskformat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->diskformat(), target);
  }

  // bool fix = 11;
  if (this->fix() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->fix(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestInstall)
  return target;
}

size_t requestInstall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestInstall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vmname());
  }

  // string ostypeid = 3;
  if (this->ostypeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ostypeid());
  }

  // string basefolder = 6;
  if (this->basefolder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basefolder());
  }

  // string sourcepath = 7;
  if (this->sourcepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourcepath());
  }

  // string storagebustype = 8;
  if (this->storagebustype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->storagebustype());
  }

  // string diskformat = 10;
  if (this->diskformat().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskformat());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  // int32 cpucount = 4;
  if (this->cpucount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cpucount());
  }

  // int32 memorysize = 5;
  if (this->memorysize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->memorysize());
  }

  // bool fix = 11;
  if (this->fix() != 0) {
    total_size += 1 + 1;
  }

  // int64 logicdisksize = 9;
  if (this->logicdisksize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->logicdisksize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestInstall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestInstall)
  GOOGLE_DCHECK_NE(&from, this);
  const requestInstall* source =
      ::google::protobuf::DynamicCastToGenerated<requestInstall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestInstall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestInstall)
    MergeFrom(*source);
  }
}

void requestInstall::MergeFrom(const requestInstall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestInstall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vmname().size() > 0) {

    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  if (from.ostypeid().size() > 0) {

    ostypeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ostypeid_);
  }
  if (from.basefolder().size() > 0) {

    basefolder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basefolder_);
  }
  if (from.sourcepath().size() > 0) {

    sourcepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourcepath_);
  }
  if (from.storagebustype().size() > 0) {

    storagebustype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storagebustype_);
  }
  if (from.diskformat().size() > 0) {

    diskformat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskformat_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
  if (from.cpucount() != 0) {
    set_cpucount(from.cpucount());
  }
  if (from.memorysize() != 0) {
    set_memorysize(from.memorysize());
  }
  if (from.fix() != 0) {
    set_fix(from.fix());
  }
  if (from.logicdisksize() != 0) {
    set_logicdisksize(from.logicdisksize());
  }
}

void requestInstall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestInstall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestInstall::CopyFrom(const requestInstall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestInstall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestInstall::IsInitialized() const {
  return true;
}

void requestInstall::Swap(requestInstall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestInstall::InternalSwap(requestInstall* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmname_.Swap(&other->vmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ostypeid_.Swap(&other->ostypeid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  basefolder_.Swap(&other->basefolder_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sourcepath_.Swap(&other->sourcepath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  storagebustype_.Swap(&other->storagebustype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  diskformat_.Swap(&other->diskformat_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
  swap(cpucount_, other->cpucount_);
  swap(memorysize_, other->memorysize_);
  swap(fix_, other->fix_);
  swap(logicdisksize_, other->logicdisksize_);
}

::google::protobuf::Metadata requestInstall::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestImpAndexportVM::InitAsDefaultInstance() {
}
class requestImpAndexportVM::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestImpAndexportVM::kVcamethodFieldNumber;
const int requestImpAndexportVM::kVmnameFieldNumber;
const int requestImpAndexportVM::kOvapathFieldNumber;
const int requestImpAndexportVM::kExportpathFieldNumber;
const int requestImpAndexportVM::kKeepmacFieldNumber;
const int requestImpAndexportVM::kOstypeidFieldNumber;
const int requestImpAndexportVM::kCpucountFieldNumber;
const int requestImpAndexportVM::kMemoryFieldNumber;
const int requestImpAndexportVM::kNetupFieldNumber;
const int requestImpAndexportVM::kBasefolderFieldNumber;
const int requestImpAndexportVM::kOvsfiletypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestImpAndexportVM::requestImpAndexportVM()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestImpAndexportVM)
}
requestImpAndexportVM::requestImpAndexportVM(const requestImpAndexportVM& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vmname().size() > 0) {
    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  ovapath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ovapath().size() > 0) {
    ovapath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ovapath_);
  }
  exportpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exportpath().size() > 0) {
    exportpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exportpath_);
  }
  ostypeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ostypeid().size() > 0) {
    ostypeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ostypeid_);
  }
  basefolder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.basefolder().size() > 0) {
    basefolder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basefolder_);
  }
  ovsfiletype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ovsfiletype().size() > 0) {
    ovsfiletype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ovsfiletype_);
  }
  ::memcpy(&vcamethod_, &from.vcamethod_,
    static_cast<size_t>(reinterpret_cast<char*>(&memory_) -
    reinterpret_cast<char*>(&vcamethod_)) + sizeof(memory_));
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestImpAndexportVM)
}

void requestImpAndexportVM::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestImpAndexportVM_qigrpc_2eproto.base);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ovapath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exportpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostypeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ovsfiletype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(memory_));
}

requestImpAndexportVM::~requestImpAndexportVM() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestImpAndexportVM)
  SharedDtor();
}

void requestImpAndexportVM::SharedDtor() {
  vmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ovapath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exportpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostypeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ovsfiletype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestImpAndexportVM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestImpAndexportVM& requestImpAndexportVM::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestImpAndexportVM_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestImpAndexportVM::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestImpAndexportVM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ovapath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exportpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostypeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ovsfiletype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(memory_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestImpAndexportVM::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestImpAndexportVM*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string vmname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestImpAndexportVM.vmname");
        object = msg->mutable_vmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ovapath = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestImpAndexportVM.ovapath");
        object = msg->mutable_ovapath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string exportpath = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestImpAndexportVM.exportpath");
        object = msg->mutable_exportpath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool keepmac = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_keepmac(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string ostypeid = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestImpAndexportVM.ostypeid");
        object = msg->mutable_ostypeid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 cpucount = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_cpucount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 memory = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_memory(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool netup = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_netup(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string basefolder = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestImpAndexportVM.basefolder");
        object = msg->mutable_basefolder();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ovsfiletype = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestImpAndexportVM.ovsfiletype");
        object = msg->mutable_ovsfiletype();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestImpAndexportVM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestImpAndexportVM)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vmname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmname().data(), static_cast<int>(this->vmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestImpAndexportVM.vmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ovapath = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ovapath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ovapath().data(), static_cast<int>(this->ovapath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestImpAndexportVM.ovapath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exportpath = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exportpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exportpath().data(), static_cast<int>(this->exportpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestImpAndexportVM.exportpath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keepmac = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keepmac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ostypeid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ostypeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ostypeid().data(), static_cast<int>(this->ostypeid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestImpAndexportVM.ostypeid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cpucount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpucount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 memory = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool netup = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &netup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string basefolder = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basefolder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->basefolder().data(), static_cast<int>(this->basefolder().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestImpAndexportVM.basefolder"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ovsfiletype = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ovsfiletype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ovsfiletype().data(), static_cast<int>(this->ovsfiletype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestImpAndexportVM.ovsfiletype"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestImpAndexportVM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestImpAndexportVM)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestImpAndexportVM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestImpAndexportVM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestImpAndexportVM.vmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vmname(), output);
  }

  // string ovapath = 3;
  if (this->ovapath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ovapath().data(), static_cast<int>(this->ovapath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestImpAndexportVM.ovapath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ovapath(), output);
  }

  // string exportpath = 4;
  if (this->exportpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exportpath().data(), static_cast<int>(this->exportpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestImpAndexportVM.exportpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exportpath(), output);
  }

  // bool keepmac = 5;
  if (this->keepmac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->keepmac(), output);
  }

  // string ostypeid = 6;
  if (this->ostypeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ostypeid().data(), static_cast<int>(this->ostypeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestImpAndexportVM.ostypeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ostypeid(), output);
  }

  // int32 cpucount = 7;
  if (this->cpucount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cpucount(), output);
  }

  // int32 memory = 8;
  if (this->memory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->memory(), output);
  }

  // bool netup = 9;
  if (this->netup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->netup(), output);
  }

  // string basefolder = 10;
  if (this->basefolder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basefolder().data(), static_cast<int>(this->basefolder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestImpAndexportVM.basefolder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->basefolder(), output);
  }

  // string ovsfiletype = 11;
  if (this->ovsfiletype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ovsfiletype().data(), static_cast<int>(this->ovsfiletype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestImpAndexportVM.ovsfiletype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->ovsfiletype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestImpAndexportVM)
}

::google::protobuf::uint8* requestImpAndexportVM::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestImpAndexportVM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestImpAndexportVM.vmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vmname(), target);
  }

  // string ovapath = 3;
  if (this->ovapath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ovapath().data(), static_cast<int>(this->ovapath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestImpAndexportVM.ovapath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ovapath(), target);
  }

  // string exportpath = 4;
  if (this->exportpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exportpath().data(), static_cast<int>(this->exportpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestImpAndexportVM.exportpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exportpath(), target);
  }

  // bool keepmac = 5;
  if (this->keepmac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->keepmac(), target);
  }

  // string ostypeid = 6;
  if (this->ostypeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ostypeid().data(), static_cast<int>(this->ostypeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestImpAndexportVM.ostypeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ostypeid(), target);
  }

  // int32 cpucount = 7;
  if (this->cpucount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cpucount(), target);
  }

  // int32 memory = 8;
  if (this->memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->memory(), target);
  }

  // bool netup = 9;
  if (this->netup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->netup(), target);
  }

  // string basefolder = 10;
  if (this->basefolder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basefolder().data(), static_cast<int>(this->basefolder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestImpAndexportVM.basefolder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->basefolder(), target);
  }

  // string ovsfiletype = 11;
  if (this->ovsfiletype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ovsfiletype().data(), static_cast<int>(this->ovsfiletype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestImpAndexportVM.ovsfiletype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ovsfiletype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestImpAndexportVM)
  return target;
}

size_t requestImpAndexportVM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestImpAndexportVM)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vmname());
  }

  // string ovapath = 3;
  if (this->ovapath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ovapath());
  }

  // string exportpath = 4;
  if (this->exportpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exportpath());
  }

  // string ostypeid = 6;
  if (this->ostypeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ostypeid());
  }

  // string basefolder = 10;
  if (this->basefolder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basefolder());
  }

  // string ovsfiletype = 11;
  if (this->ovsfiletype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ovsfiletype());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  // int32 cpucount = 7;
  if (this->cpucount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cpucount());
  }

  // bool keepmac = 5;
  if (this->keepmac() != 0) {
    total_size += 1 + 1;
  }

  // bool netup = 9;
  if (this->netup() != 0) {
    total_size += 1 + 1;
  }

  // int32 memory = 8;
  if (this->memory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->memory());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestImpAndexportVM::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestImpAndexportVM)
  GOOGLE_DCHECK_NE(&from, this);
  const requestImpAndexportVM* source =
      ::google::protobuf::DynamicCastToGenerated<requestImpAndexportVM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestImpAndexportVM)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestImpAndexportVM)
    MergeFrom(*source);
  }
}

void requestImpAndexportVM::MergeFrom(const requestImpAndexportVM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestImpAndexportVM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vmname().size() > 0) {

    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  if (from.ovapath().size() > 0) {

    ovapath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ovapath_);
  }
  if (from.exportpath().size() > 0) {

    exportpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exportpath_);
  }
  if (from.ostypeid().size() > 0) {

    ostypeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ostypeid_);
  }
  if (from.basefolder().size() > 0) {

    basefolder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basefolder_);
  }
  if (from.ovsfiletype().size() > 0) {

    ovsfiletype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ovsfiletype_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
  if (from.cpucount() != 0) {
    set_cpucount(from.cpucount());
  }
  if (from.keepmac() != 0) {
    set_keepmac(from.keepmac());
  }
  if (from.netup() != 0) {
    set_netup(from.netup());
  }
  if (from.memory() != 0) {
    set_memory(from.memory());
  }
}

void requestImpAndexportVM::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestImpAndexportVM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestImpAndexportVM::CopyFrom(const requestImpAndexportVM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestImpAndexportVM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestImpAndexportVM::IsInitialized() const {
  return true;
}

void requestImpAndexportVM::Swap(requestImpAndexportVM* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestImpAndexportVM::InternalSwap(requestImpAndexportVM* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmname_.Swap(&other->vmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ovapath_.Swap(&other->ovapath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exportpath_.Swap(&other->exportpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ostypeid_.Swap(&other->ostypeid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  basefolder_.Swap(&other->basefolder_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ovsfiletype_.Swap(&other->ovsfiletype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
  swap(cpucount_, other->cpucount_);
  swap(keepmac_, other->keepmac_);
  swap(netup_, other->netup_);
  swap(memory_, other->memory_);
}

::google::protobuf::Metadata requestImpAndexportVM::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestNetwork::InitAsDefaultInstance() {
}
class requestNetwork::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestNetwork::kVcamethodFieldNumber;
const int requestNetwork::kVmnameFieldNumber;
const int requestNetwork::kSlotFieldNumber;
const int requestNetwork::kHostpcinameFieldNumber;
const int requestNetwork::kMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestNetwork::requestNetwork()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestNetwork)
}
requestNetwork::requestNetwork(const requestNetwork& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vmname().size() > 0) {
    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  hostpciname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hostpciname().size() > 0) {
    hostpciname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostpciname_);
  }
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac().size() > 0) {
    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  ::memcpy(&vcamethod_, &from.vcamethod_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_) -
    reinterpret_cast<char*>(&vcamethod_)) + sizeof(slot_));
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestNetwork)
}

void requestNetwork::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestNetwork_qigrpc_2eproto.base);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostpciname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(slot_));
}

requestNetwork::~requestNetwork() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestNetwork)
  SharedDtor();
}

void requestNetwork::SharedDtor() {
  vmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostpciname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestNetwork::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestNetwork& requestNetwork::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestNetwork_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestNetwork::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostpciname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(slot_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestNetwork::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestNetwork*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string vmname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestNetwork.vmname");
        object = msg->mutable_vmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 slot = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string hostpciname = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestNetwork.hostpciname");
        object = msg->mutable_hostpciname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string mac = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestNetwork.mac");
        object = msg->mutable_mac();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestNetwork)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vmname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmname().data(), static_cast<int>(this->vmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestNetwork.vmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 slot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hostpciname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostpciname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostpciname().data(), static_cast<int>(this->hostpciname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestNetwork.hostpciname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mac = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac().data(), static_cast<int>(this->mac().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestNetwork.mac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestNetwork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestNetwork)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestNetwork.vmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vmname(), output);
  }

  // int32 slot = 3;
  if (this->slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot(), output);
  }

  // string hostpciname = 4;
  if (this->hostpciname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostpciname().data(), static_cast<int>(this->hostpciname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestNetwork.hostpciname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hostpciname(), output);
  }

  // string mac = 5;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), static_cast<int>(this->mac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestNetwork.mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mac(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestNetwork)
}

::google::protobuf::uint8* requestNetwork::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestNetwork.vmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vmname(), target);
  }

  // int32 slot = 3;
  if (this->slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot(), target);
  }

  // string hostpciname = 4;
  if (this->hostpciname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostpciname().data(), static_cast<int>(this->hostpciname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestNetwork.hostpciname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostpciname(), target);
  }

  // string mac = 5;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), static_cast<int>(this->mac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestNetwork.mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mac(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestNetwork)
  return target;
}

size_t requestNetwork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestNetwork)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vmname());
  }

  // string hostpciname = 4;
  if (this->hostpciname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostpciname());
  }

  // string mac = 5;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  // int32 slot = 3;
  if (this->slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestNetwork::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  const requestNetwork* source =
      ::google::protobuf::DynamicCastToGenerated<requestNetwork>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestNetwork)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestNetwork)
    MergeFrom(*source);
  }
}

void requestNetwork::MergeFrom(const requestNetwork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vmname().size() > 0) {

    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  if (from.hostpciname().size() > 0) {

    hostpciname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostpciname_);
  }
  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
  if (from.slot() != 0) {
    set_slot(from.slot());
  }
}

void requestNetwork::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestNetwork::CopyFrom(const requestNetwork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestNetwork::IsInitialized() const {
  return true;
}

void requestNetwork::Swap(requestNetwork* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestNetwork::InternalSwap(requestNetwork* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmname_.Swap(&other->vmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostpciname_.Swap(&other->hostpciname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mac_.Swap(&other->mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
  swap(slot_, other->slot_);
}

::google::protobuf::Metadata requestNetwork::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestRdp::InitAsDefaultInstance() {
}
class requestRdp::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestRdp::kVcamethodFieldNumber;
const int requestRdp::kVmnameFieldNumber;
const int requestRdp::kListenaddressFieldNumber;
const int requestRdp::kListenportFieldNumber;
const int requestRdp::kAllowmulticonnectFieldNumber;
const int requestRdp::kReusesingleconnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestRdp::requestRdp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestRdp)
}
requestRdp::requestRdp(const requestRdp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vmname().size() > 0) {
    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  listenaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.listenaddress().size() > 0) {
    listenaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.listenaddress_);
  }
  ::memcpy(&vcamethod_, &from.vcamethod_,
    static_cast<size_t>(reinterpret_cast<char*>(&reusesingleconnect_) -
    reinterpret_cast<char*>(&vcamethod_)) + sizeof(reusesingleconnect_));
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestRdp)
}

void requestRdp::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestRdp_qigrpc_2eproto.base);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listenaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reusesingleconnect_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(reusesingleconnect_));
}

requestRdp::~requestRdp() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestRdp)
  SharedDtor();
}

void requestRdp::SharedDtor() {
  vmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listenaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestRdp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestRdp& requestRdp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestRdp_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestRdp::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestRdp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listenaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reusesingleconnect_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(reusesingleconnect_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestRdp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestRdp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string vmname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestRdp.vmname");
        object = msg->mutable_vmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string listenaddress = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestRdp.listenaddress");
        object = msg->mutable_listenaddress();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 listenport = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_listenport(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool allowmulticonnect = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_allowmulticonnect(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool reusesingleconnect = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_reusesingleconnect(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestRdp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestRdp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vmname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmname().data(), static_cast<int>(this->vmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestRdp.vmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string listenaddress = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_listenaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->listenaddress().data(), static_cast<int>(this->listenaddress().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestRdp.listenaddress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 listenport = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listenport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allowmulticonnect = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowmulticonnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reusesingleconnect = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reusesingleconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestRdp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestRdp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestRdp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestRdp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestRdp.vmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vmname(), output);
  }

  // string listenaddress = 3;
  if (this->listenaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->listenaddress().data(), static_cast<int>(this->listenaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestRdp.listenaddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->listenaddress(), output);
  }

  // int32 listenport = 4;
  if (this->listenport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->listenport(), output);
  }

  // bool allowmulticonnect = 5;
  if (this->allowmulticonnect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allowmulticonnect(), output);
  }

  // bool reusesingleconnect = 6;
  if (this->reusesingleconnect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->reusesingleconnect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestRdp)
}

::google::protobuf::uint8* requestRdp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestRdp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestRdp.vmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vmname(), target);
  }

  // string listenaddress = 3;
  if (this->listenaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->listenaddress().data(), static_cast<int>(this->listenaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestRdp.listenaddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->listenaddress(), target);
  }

  // int32 listenport = 4;
  if (this->listenport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->listenport(), target);
  }

  // bool allowmulticonnect = 5;
  if (this->allowmulticonnect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allowmulticonnect(), target);
  }

  // bool reusesingleconnect = 6;
  if (this->reusesingleconnect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->reusesingleconnect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestRdp)
  return target;
}

size_t requestRdp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestRdp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vmname());
  }

  // string listenaddress = 3;
  if (this->listenaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->listenaddress());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  // int32 listenport = 4;
  if (this->listenport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->listenport());
  }

  // bool allowmulticonnect = 5;
  if (this->allowmulticonnect() != 0) {
    total_size += 1 + 1;
  }

  // bool reusesingleconnect = 6;
  if (this->reusesingleconnect() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestRdp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestRdp)
  GOOGLE_DCHECK_NE(&from, this);
  const requestRdp* source =
      ::google::protobuf::DynamicCastToGenerated<requestRdp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestRdp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestRdp)
    MergeFrom(*source);
  }
}

void requestRdp::MergeFrom(const requestRdp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestRdp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vmname().size() > 0) {

    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  if (from.listenaddress().size() > 0) {

    listenaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.listenaddress_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
  if (from.listenport() != 0) {
    set_listenport(from.listenport());
  }
  if (from.allowmulticonnect() != 0) {
    set_allowmulticonnect(from.allowmulticonnect());
  }
  if (from.reusesingleconnect() != 0) {
    set_reusesingleconnect(from.reusesingleconnect());
  }
}

void requestRdp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestRdp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestRdp::CopyFrom(const requestRdp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestRdp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestRdp::IsInitialized() const {
  return true;
}

void requestRdp::Swap(requestRdp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestRdp::InternalSwap(requestRdp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmname_.Swap(&other->vmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  listenaddress_.Swap(&other->listenaddress_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
  swap(listenport_, other->listenport_);
  swap(allowmulticonnect_, other->allowmulticonnect_);
  swap(reusesingleconnect_, other->reusesingleconnect_);
}

::google::protobuf::Metadata requestRdp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestRecord::InitAsDefaultInstance() {
}
class requestRecord::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestRecord::kVcamethodFieldNumber;
const int requestRecord::kVmnameFieldNumber;
const int requestRecord::kOnFieldNumber;
const int requestRecord::kScreenidFieldNumber;
const int requestRecord::kBasefolderFieldNumber;
const int requestRecord::kWidthFieldNumber;
const int requestRecord::kHeightFieldNumber;
const int requestRecord::kFpsFieldNumber;
const int requestRecord::kKbpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestRecord::requestRecord()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestRecord)
}
requestRecord::requestRecord(const requestRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vmname().size() > 0) {
    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  basefolder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.basefolder().size() > 0) {
    basefolder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basefolder_);
  }
  ::memcpy(&vcamethod_, &from.vcamethod_,
    static_cast<size_t>(reinterpret_cast<char*>(&kbps_) -
    reinterpret_cast<char*>(&vcamethod_)) + sizeof(kbps_));
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestRecord)
}

void requestRecord::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestRecord_qigrpc_2eproto.base);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kbps_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(kbps_));
}

requestRecord::~requestRecord() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestRecord)
  SharedDtor();
}

void requestRecord::SharedDtor() {
  vmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestRecord& requestRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestRecord_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kbps_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(kbps_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestRecord::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestRecord*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string vmname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestRecord.vmname");
        object = msg->mutable_vmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool on = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_on(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 screenid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_screenid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string basefolder = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestRecord.basefolder");
        object = msg->mutable_basefolder();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 width = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 height = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 fps = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_fps(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 kbps = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_kbps(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vmname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmname().data(), static_cast<int>(this->vmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestRecord.vmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool on = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 screenid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string basefolder = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basefolder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->basefolder().data(), static_cast<int>(this->basefolder().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestRecord.basefolder"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fps = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 kbps = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kbps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestRecord.vmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vmname(), output);
  }

  // bool on = 3;
  if (this->on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->on(), output);
  }

  // int32 screenid = 4;
  if (this->screenid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->screenid(), output);
  }

  // string basefolder = 5;
  if (this->basefolder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basefolder().data(), static_cast<int>(this->basefolder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestRecord.basefolder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->basefolder(), output);
  }

  // int32 width = 6;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->width(), output);
  }

  // int32 height = 7;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->height(), output);
  }

  // int32 fps = 8;
  if (this->fps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fps(), output);
  }

  // int32 kbps = 9;
  if (this->kbps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->kbps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestRecord)
}

::google::protobuf::uint8* requestRecord::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestRecord.vmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vmname(), target);
  }

  // bool on = 3;
  if (this->on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->on(), target);
  }

  // int32 screenid = 4;
  if (this->screenid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->screenid(), target);
  }

  // string basefolder = 5;
  if (this->basefolder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basefolder().data(), static_cast<int>(this->basefolder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestRecord.basefolder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->basefolder(), target);
  }

  // int32 width = 6;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->width(), target);
  }

  // int32 height = 7;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->height(), target);
  }

  // int32 fps = 8;
  if (this->fps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fps(), target);
  }

  // int32 kbps = 9;
  if (this->kbps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->kbps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestRecord)
  return target;
}

size_t requestRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vmname());
  }

  // string basefolder = 5;
  if (this->basefolder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basefolder());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  // bool on = 3;
  if (this->on() != 0) {
    total_size += 1 + 1;
  }

  // int32 screenid = 4;
  if (this->screenid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->screenid());
  }

  // int32 width = 6;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 7;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 fps = 8;
  if (this->fps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fps());
  }

  // int32 kbps = 9;
  if (this->kbps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kbps());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const requestRecord* source =
      ::google::protobuf::DynamicCastToGenerated<requestRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestRecord)
    MergeFrom(*source);
  }
}

void requestRecord::MergeFrom(const requestRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vmname().size() > 0) {

    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  if (from.basefolder().size() > 0) {

    basefolder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basefolder_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
  if (from.on() != 0) {
    set_on(from.on());
  }
  if (from.screenid() != 0) {
    set_screenid(from.screenid());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.fps() != 0) {
    set_fps(from.fps());
  }
  if (from.kbps() != 0) {
    set_kbps(from.kbps());
  }
}

void requestRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestRecord::CopyFrom(const requestRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestRecord::IsInitialized() const {
  return true;
}

void requestRecord::Swap(requestRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestRecord::InternalSwap(requestRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmname_.Swap(&other->vmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  basefolder_.Swap(&other->basefolder_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
  swap(on_, other->on_);
  swap(screenid_, other->screenid_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(fps_, other->fps_);
  swap(kbps_, other->kbps_);
}

::google::protobuf::Metadata requestRecord::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestSharefolder::InitAsDefaultInstance() {
}
class requestSharefolder::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestSharefolder::kVcamethodFieldNumber;
const int requestSharefolder::kVmnameFieldNumber;
const int requestSharefolder::kSharefoldernameFieldNumber;
const int requestSharefolder::kServerpathFieldNumber;
const int requestSharefolder::kWriteableFieldNumber;
const int requestSharefolder::kInternalpathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestSharefolder::requestSharefolder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestSharefolder)
}
requestSharefolder::requestSharefolder(const requestSharefolder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vmname().size() > 0) {
    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  sharefoldername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sharefoldername().size() > 0) {
    sharefoldername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sharefoldername_);
  }
  serverpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serverpath().size() > 0) {
    serverpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverpath_);
  }
  internalpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.internalpath().size() > 0) {
    internalpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internalpath_);
  }
  ::memcpy(&vcamethod_, &from.vcamethod_,
    static_cast<size_t>(reinterpret_cast<char*>(&writeable_) -
    reinterpret_cast<char*>(&vcamethod_)) + sizeof(writeable_));
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestSharefolder)
}

void requestSharefolder::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestSharefolder_qigrpc_2eproto.base);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sharefoldername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internalpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&writeable_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(writeable_));
}

requestSharefolder::~requestSharefolder() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestSharefolder)
  SharedDtor();
}

void requestSharefolder::SharedDtor() {
  vmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sharefoldername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internalpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestSharefolder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestSharefolder& requestSharefolder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestSharefolder_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestSharefolder::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestSharefolder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sharefoldername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internalpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&writeable_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(writeable_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestSharefolder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestSharefolder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string vmname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestSharefolder.vmname");
        object = msg->mutable_vmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string sharefoldername = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestSharefolder.sharefoldername");
        object = msg->mutable_sharefoldername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string serverpath = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestSharefolder.serverpath");
        object = msg->mutable_serverpath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool writeable = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_writeable(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string internalpath = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestSharefolder.internalpath");
        object = msg->mutable_internalpath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestSharefolder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestSharefolder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vmname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmname().data(), static_cast<int>(this->vmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestSharefolder.vmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sharefoldername = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sharefoldername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sharefoldername().data(), static_cast<int>(this->sharefoldername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestSharefolder.sharefoldername"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serverpath = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverpath().data(), static_cast<int>(this->serverpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestSharefolder.serverpath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool writeable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &writeable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string internalpath = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internalpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->internalpath().data(), static_cast<int>(this->internalpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestSharefolder.internalpath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestSharefolder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestSharefolder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestSharefolder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestSharefolder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSharefolder.vmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vmname(), output);
  }

  // string sharefoldername = 3;
  if (this->sharefoldername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sharefoldername().data(), static_cast<int>(this->sharefoldername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSharefolder.sharefoldername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sharefoldername(), output);
  }

  // string serverpath = 4;
  if (this->serverpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverpath().data(), static_cast<int>(this->serverpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSharefolder.serverpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serverpath(), output);
  }

  // bool writeable = 5;
  if (this->writeable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->writeable(), output);
  }

  // string internalpath = 6;
  if (this->internalpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internalpath().data(), static_cast<int>(this->internalpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSharefolder.internalpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->internalpath(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestSharefolder)
}

::google::protobuf::uint8* requestSharefolder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestSharefolder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSharefolder.vmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vmname(), target);
  }

  // string sharefoldername = 3;
  if (this->sharefoldername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sharefoldername().data(), static_cast<int>(this->sharefoldername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSharefolder.sharefoldername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sharefoldername(), target);
  }

  // string serverpath = 4;
  if (this->serverpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverpath().data(), static_cast<int>(this->serverpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSharefolder.serverpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->serverpath(), target);
  }

  // bool writeable = 5;
  if (this->writeable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->writeable(), target);
  }

  // string internalpath = 6;
  if (this->internalpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internalpath().data(), static_cast<int>(this->internalpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSharefolder.internalpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->internalpath(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestSharefolder)
  return target;
}

size_t requestSharefolder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestSharefolder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vmname());
  }

  // string sharefoldername = 3;
  if (this->sharefoldername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sharefoldername());
  }

  // string serverpath = 4;
  if (this->serverpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverpath());
  }

  // string internalpath = 6;
  if (this->internalpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->internalpath());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  // bool writeable = 5;
  if (this->writeable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestSharefolder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestSharefolder)
  GOOGLE_DCHECK_NE(&from, this);
  const requestSharefolder* source =
      ::google::protobuf::DynamicCastToGenerated<requestSharefolder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestSharefolder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestSharefolder)
    MergeFrom(*source);
  }
}

void requestSharefolder::MergeFrom(const requestSharefolder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestSharefolder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vmname().size() > 0) {

    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  if (from.sharefoldername().size() > 0) {

    sharefoldername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sharefoldername_);
  }
  if (from.serverpath().size() > 0) {

    serverpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverpath_);
  }
  if (from.internalpath().size() > 0) {

    internalpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internalpath_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
  if (from.writeable() != 0) {
    set_writeable(from.writeable());
  }
}

void requestSharefolder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestSharefolder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestSharefolder::CopyFrom(const requestSharefolder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestSharefolder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestSharefolder::IsInitialized() const {
  return true;
}

void requestSharefolder::Swap(requestSharefolder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestSharefolder::InternalSwap(requestSharefolder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmname_.Swap(&other->vmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sharefoldername_.Swap(&other->sharefoldername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serverpath_.Swap(&other->serverpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  internalpath_.Swap(&other->internalpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
  swap(writeable_, other->writeable_);
}

::google::protobuf::Metadata requestSharefolder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestConfig::InitAsDefaultInstance() {
}
class requestConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestConfig::kVcamethodFieldNumber;
const int requestConfig::kVmnameFieldNumber;
const int requestConfig::kCpucountFieldNumber;
const int requestConfig::kMemorysizeFieldNumber;
const int requestConfig::kRamsizeFieldNumber;
const int requestConfig::kMonitorcountFieldNumber;
const int requestConfig::kEnable3DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestConfig::requestConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestConfig)
}
requestConfig::requestConfig(const requestConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vmname().size() > 0) {
    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  ::memcpy(&vcamethod_, &from.vcamethod_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable3d_) -
    reinterpret_cast<char*>(&vcamethod_)) + sizeof(enable3d_));
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestConfig)
}

void requestConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestConfig_qigrpc_2eproto.base);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable3d_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(enable3d_));
}

requestConfig::~requestConfig() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestConfig)
  SharedDtor();
}

void requestConfig::SharedDtor() {
  vmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestConfig& requestConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestConfig_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable3d_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(enable3d_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string vmname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestConfig.vmname");
        object = msg->mutable_vmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 cpucount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_cpucount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 memorysize = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_memorysize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 ramsize = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_ramsize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 monitorcount = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_monitorcount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool enable3d = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_enable3d(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vmname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmname().data(), static_cast<int>(this->vmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestConfig.vmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cpucount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpucount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 memorysize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memorysize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ramsize = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ramsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 monitorcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monitorcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable3d = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable3d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestConfig.vmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vmname(), output);
  }

  // int32 cpucount = 3;
  if (this->cpucount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cpucount(), output);
  }

  // int32 memorysize = 4;
  if (this->memorysize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->memorysize(), output);
  }

  // int32 ramsize = 5;
  if (this->ramsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ramsize(), output);
  }

  // int32 monitorcount = 6;
  if (this->monitorcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->monitorcount(), output);
  }

  // bool enable3d = 7;
  if (this->enable3d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable3d(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestConfig)
}

::google::protobuf::uint8* requestConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestConfig.vmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vmname(), target);
  }

  // int32 cpucount = 3;
  if (this->cpucount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cpucount(), target);
  }

  // int32 memorysize = 4;
  if (this->memorysize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->memorysize(), target);
  }

  // int32 ramsize = 5;
  if (this->ramsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ramsize(), target);
  }

  // int32 monitorcount = 6;
  if (this->monitorcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->monitorcount(), target);
  }

  // bool enable3d = 7;
  if (this->enable3d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enable3d(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestConfig)
  return target;
}

size_t requestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vmname());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  // int32 cpucount = 3;
  if (this->cpucount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cpucount());
  }

  // int32 memorysize = 4;
  if (this->memorysize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->memorysize());
  }

  // int32 ramsize = 5;
  if (this->ramsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ramsize());
  }

  // int32 monitorcount = 6;
  if (this->monitorcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->monitorcount());
  }

  // bool enable3d = 7;
  if (this->enable3d() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const requestConfig* source =
      ::google::protobuf::DynamicCastToGenerated<requestConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestConfig)
    MergeFrom(*source);
  }
}

void requestConfig::MergeFrom(const requestConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vmname().size() > 0) {

    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
  if (from.cpucount() != 0) {
    set_cpucount(from.cpucount());
  }
  if (from.memorysize() != 0) {
    set_memorysize(from.memorysize());
  }
  if (from.ramsize() != 0) {
    set_ramsize(from.ramsize());
  }
  if (from.monitorcount() != 0) {
    set_monitorcount(from.monitorcount());
  }
  if (from.enable3d() != 0) {
    set_enable3d(from.enable3d());
  }
}

void requestConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestConfig::CopyFrom(const requestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestConfig::IsInitialized() const {
  return true;
}

void requestConfig::Swap(requestConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestConfig::InternalSwap(requestConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmname_.Swap(&other->vmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
  swap(cpucount_, other->cpucount_);
  swap(memorysize_, other->memorysize_);
  swap(ramsize_, other->ramsize_);
  swap(monitorcount_, other->monitorcount_);
  swap(enable3d_, other->enable3d_);
}

::google::protobuf::Metadata requestConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestUSB::InitAsDefaultInstance() {
}
class requestUSB::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestUSB::kVcamethodFieldNumber;
const int requestUSB::kVmnameFieldNumber;
const int requestUSB::kUsbnameFieldNumber;
const int requestUSB::kUsbtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestUSB::requestUSB()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestUSB)
}
requestUSB::requestUSB(const requestUSB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vmname().size() > 0) {
    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  usbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.usbname().size() > 0) {
    usbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usbname_);
  }
  usbtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.usbtype().size() > 0) {
    usbtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usbtype_);
  }
  vcamethod_ = from.vcamethod_;
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestUSB)
}

void requestUSB::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestUSB_qigrpc_2eproto.base);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usbtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vcamethod_ = 0;
}

requestUSB::~requestUSB() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestUSB)
  SharedDtor();
}

void requestUSB::SharedDtor() {
  vmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usbname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usbtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestUSB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestUSB& requestUSB::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestUSB_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestUSB::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestUSB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usbtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vcamethod_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestUSB::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestUSB*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string vmname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestUSB.vmname");
        object = msg->mutable_vmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string usbname = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestUSB.usbname");
        object = msg->mutable_usbname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string usbtype = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestUSB.usbtype");
        object = msg->mutable_usbtype();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestUSB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestUSB)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vmname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmname().data(), static_cast<int>(this->vmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestUSB.vmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usbname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usbname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usbname().data(), static_cast<int>(this->usbname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestUSB.usbname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usbtype = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usbtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usbtype().data(), static_cast<int>(this->usbtype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestUSB.usbtype"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestUSB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestUSB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestUSB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestUSB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestUSB.vmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vmname(), output);
  }

  // string usbname = 3;
  if (this->usbname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usbname().data(), static_cast<int>(this->usbname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestUSB.usbname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->usbname(), output);
  }

  // string usbtype = 4;
  if (this->usbtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usbtype().data(), static_cast<int>(this->usbtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestUSB.usbtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->usbtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestUSB)
}

::google::protobuf::uint8* requestUSB::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestUSB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestUSB.vmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vmname(), target);
  }

  // string usbname = 3;
  if (this->usbname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usbname().data(), static_cast<int>(this->usbname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestUSB.usbname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->usbname(), target);
  }

  // string usbtype = 4;
  if (this->usbtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usbtype().data(), static_cast<int>(this->usbtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestUSB.usbtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->usbtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestUSB)
  return target;
}

size_t requestUSB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestUSB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vmname());
  }

  // string usbname = 3;
  if (this->usbname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->usbname());
  }

  // string usbtype = 4;
  if (this->usbtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->usbtype());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestUSB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestUSB)
  GOOGLE_DCHECK_NE(&from, this);
  const requestUSB* source =
      ::google::protobuf::DynamicCastToGenerated<requestUSB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestUSB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestUSB)
    MergeFrom(*source);
  }
}

void requestUSB::MergeFrom(const requestUSB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestUSB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vmname().size() > 0) {

    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  if (from.usbname().size() > 0) {

    usbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usbname_);
  }
  if (from.usbtype().size() > 0) {

    usbtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usbtype_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
}

void requestUSB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestUSB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestUSB::CopyFrom(const requestUSB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestUSB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestUSB::IsInitialized() const {
  return true;
}

void requestUSB::Swap(requestUSB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestUSB::InternalSwap(requestUSB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmname_.Swap(&other->vmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usbname_.Swap(&other->usbname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usbtype_.Swap(&other->usbtype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
}

::google::protobuf::Metadata requestUSB::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestAudio::InitAsDefaultInstance() {
}
class requestAudio::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestAudio::kVcamethodFieldNumber;
const int requestAudio::kVmnameFieldNumber;
const int requestAudio::kAudioswitchFieldNumber;
const int requestAudio::kAudioinFieldNumber;
const int requestAudio::kAudiooutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestAudio::requestAudio()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestAudio)
}
requestAudio::requestAudio(const requestAudio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vmname().size() > 0) {
    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  ::memcpy(&vcamethod_, &from.vcamethod_,
    static_cast<size_t>(reinterpret_cast<char*>(&audioout_) -
    reinterpret_cast<char*>(&vcamethod_)) + sizeof(audioout_));
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestAudio)
}

void requestAudio::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestAudio_qigrpc_2eproto.base);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audioout_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(audioout_));
}

requestAudio::~requestAudio() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestAudio)
  SharedDtor();
}

void requestAudio::SharedDtor() {
  vmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestAudio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestAudio& requestAudio::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestAudio_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audioout_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(audioout_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestAudio::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestAudio*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string vmname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestAudio.vmname");
        object = msg->mutable_vmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool audioswitch = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_audioswitch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool audioin = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_audioin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool audioout = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_audioout(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestAudio)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vmname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmname().data(), static_cast<int>(this->vmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestAudio.vmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool audioswitch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &audioswitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool audioin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &audioin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool audioout = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &audioout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestAudio)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestAudio.vmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vmname(), output);
  }

  // bool audioswitch = 3;
  if (this->audioswitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->audioswitch(), output);
  }

  // bool audioin = 4;
  if (this->audioin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->audioin(), output);
  }

  // bool audioout = 5;
  if (this->audioout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->audioout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestAudio)
}

::google::protobuf::uint8* requestAudio::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestAudio.vmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vmname(), target);
  }

  // bool audioswitch = 3;
  if (this->audioswitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->audioswitch(), target);
  }

  // bool audioin = 4;
  if (this->audioin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->audioin(), target);
  }

  // bool audioout = 5;
  if (this->audioout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->audioout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestAudio)
  return target;
}

size_t requestAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestAudio)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vmname());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  // bool audioswitch = 3;
  if (this->audioswitch() != 0) {
    total_size += 1 + 1;
  }

  // bool audioin = 4;
  if (this->audioin() != 0) {
    total_size += 1 + 1;
  }

  // bool audioout = 5;
  if (this->audioout() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestAudio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestAudio)
  GOOGLE_DCHECK_NE(&from, this);
  const requestAudio* source =
      ::google::protobuf::DynamicCastToGenerated<requestAudio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestAudio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestAudio)
    MergeFrom(*source);
  }
}

void requestAudio::MergeFrom(const requestAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestAudio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vmname().size() > 0) {

    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
  if (from.audioswitch() != 0) {
    set_audioswitch(from.audioswitch());
  }
  if (from.audioin() != 0) {
    set_audioin(from.audioin());
  }
  if (from.audioout() != 0) {
    set_audioout(from.audioout());
  }
}

void requestAudio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestAudio::CopyFrom(const requestAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestAudio::IsInitialized() const {
  return true;
}

void requestAudio::Swap(requestAudio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestAudio::InternalSwap(requestAudio* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmname_.Swap(&other->vmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
  swap(audioswitch_, other->audioswitch_);
  swap(audioin_, other->audioin_);
  swap(audioout_, other->audioout_);
}

::google::protobuf::Metadata requestAudio::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestSerial::InitAsDefaultInstance() {
}
class requestSerial::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestSerial::kVcamethodFieldNumber;
const int requestSerial::kVmnameFieldNumber;
const int requestSerial::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestSerial::requestSerial()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestSerial)
}
requestSerial::requestSerial(const requestSerial& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vmname().size() > 0) {
    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  ::memcpy(&vcamethod_, &from.vcamethod_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_) -
    reinterpret_cast<char*>(&vcamethod_)) + sizeof(slot_));
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestSerial)
}

void requestSerial::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestSerial_qigrpc_2eproto.base);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(slot_));
}

requestSerial::~requestSerial() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestSerial)
  SharedDtor();
}

void requestSerial::SharedDtor() {
  vmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestSerial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestSerial& requestSerial::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestSerial_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestSerial::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestSerial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(slot_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestSerial::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestSerial*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string vmname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestSerial.vmname");
        object = msg->mutable_vmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 slot = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestSerial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestSerial)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vmname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmname().data(), static_cast<int>(this->vmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestSerial.vmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 slot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestSerial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestSerial)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestSerial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestSerial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSerial.vmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vmname(), output);
  }

  // int32 slot = 3;
  if (this->slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestSerial)
}

::google::protobuf::uint8* requestSerial::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestSerial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestSerial.vmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vmname(), target);
  }

  // int32 slot = 3;
  if (this->slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestSerial)
  return target;
}

size_t requestSerial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestSerial)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vmname());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  // int32 slot = 3;
  if (this->slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestSerial::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestSerial)
  GOOGLE_DCHECK_NE(&from, this);
  const requestSerial* source =
      ::google::protobuf::DynamicCastToGenerated<requestSerial>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestSerial)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestSerial)
    MergeFrom(*source);
  }
}

void requestSerial::MergeFrom(const requestSerial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestSerial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vmname().size() > 0) {

    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
  if (from.slot() != 0) {
    set_slot(from.slot());
  }
}

void requestSerial::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestSerial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestSerial::CopyFrom(const requestSerial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestSerial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestSerial::IsInitialized() const {
  return true;
}

void requestSerial::Swap(requestSerial* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestSerial::InternalSwap(requestSerial* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmname_.Swap(&other->vmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
  swap(slot_, other->slot_);
}

::google::protobuf::Metadata requestSerial::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestP2P::InitAsDefaultInstance() {
}
class requestP2P::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestP2P::kVcamethodFieldNumber;
const int requestP2P::kSharefilepathFieldNumber;
const int requestP2P::kShareseedpathFieldNumber;
const int requestP2P::kShareipFieldNumber;
const int requestP2P::kDownloadipFieldNumber;
const int requestP2P::kDownloadseedpathFieldNumber;
const int requestP2P::kDownloadfilepathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestP2P::requestP2P()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestP2P)
}
requestP2P::requestP2P(const requestP2P& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sharefilepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sharefilepath().size() > 0) {
    sharefilepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sharefilepath_);
  }
  shareseedpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.shareseedpath().size() > 0) {
    shareseedpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shareseedpath_);
  }
  shareip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.shareip().size() > 0) {
    shareip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shareip_);
  }
  downloadip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.downloadip().size() > 0) {
    downloadip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downloadip_);
  }
  downloadseedpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.downloadseedpath().size() > 0) {
    downloadseedpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downloadseedpath_);
  }
  downloadfilepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.downloadfilepath().size() > 0) {
    downloadfilepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downloadfilepath_);
  }
  vcamethod_ = from.vcamethod_;
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestP2P)
}

void requestP2P::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestP2P_qigrpc_2eproto.base);
  sharefilepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shareseedpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shareip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadseedpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadfilepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vcamethod_ = 0;
}

requestP2P::~requestP2P() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestP2P)
  SharedDtor();
}

void requestP2P::SharedDtor() {
  sharefilepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shareseedpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shareip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadseedpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadfilepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestP2P::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestP2P& requestP2P::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestP2P_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestP2P::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestP2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sharefilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shareseedpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shareip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadseedpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vcamethod_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestP2P::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestP2P*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string sharefilepath = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestP2P.sharefilepath");
        object = msg->mutable_sharefilepath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string shareseedpath = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestP2P.shareseedpath");
        object = msg->mutable_shareseedpath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string shareip = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestP2P.shareip");
        object = msg->mutable_shareip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string downloadip = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestP2P.downloadip");
        object = msg->mutable_downloadip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string downloadseedpath = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestP2P.downloadseedpath");
        object = msg->mutable_downloadseedpath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string downloadfilepath = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestP2P.downloadfilepath");
        object = msg->mutable_downloadfilepath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestP2P::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestP2P)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sharefilepath = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sharefilepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sharefilepath().data(), static_cast<int>(this->sharefilepath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestP2P.sharefilepath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string shareseedpath = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shareseedpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shareseedpath().data(), static_cast<int>(this->shareseedpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestP2P.shareseedpath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string shareip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shareip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shareip().data(), static_cast<int>(this->shareip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestP2P.shareip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string downloadip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->downloadip().data(), static_cast<int>(this->downloadip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestP2P.downloadip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string downloadseedpath = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadseedpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->downloadseedpath().data(), static_cast<int>(this->downloadseedpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestP2P.downloadseedpath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string downloadfilepath = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadfilepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->downloadfilepath().data(), static_cast<int>(this->downloadfilepath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestP2P.downloadfilepath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestP2P)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestP2P)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestP2P::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestP2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string sharefilepath = 2;
  if (this->sharefilepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sharefilepath().data(), static_cast<int>(this->sharefilepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestP2P.sharefilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sharefilepath(), output);
  }

  // string shareseedpath = 3;
  if (this->shareseedpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shareseedpath().data(), static_cast<int>(this->shareseedpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestP2P.shareseedpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->shareseedpath(), output);
  }

  // string shareip = 4;
  if (this->shareip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shareip().data(), static_cast<int>(this->shareip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestP2P.shareip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->shareip(), output);
  }

  // string downloadip = 5;
  if (this->downloadip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->downloadip().data(), static_cast<int>(this->downloadip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestP2P.downloadip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->downloadip(), output);
  }

  // string downloadseedpath = 6;
  if (this->downloadseedpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->downloadseedpath().data(), static_cast<int>(this->downloadseedpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestP2P.downloadseedpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->downloadseedpath(), output);
  }

  // string downloadfilepath = 7;
  if (this->downloadfilepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->downloadfilepath().data(), static_cast<int>(this->downloadfilepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestP2P.downloadfilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->downloadfilepath(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestP2P)
}

::google::protobuf::uint8* requestP2P::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestP2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string sharefilepath = 2;
  if (this->sharefilepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sharefilepath().data(), static_cast<int>(this->sharefilepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestP2P.sharefilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sharefilepath(), target);
  }

  // string shareseedpath = 3;
  if (this->shareseedpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shareseedpath().data(), static_cast<int>(this->shareseedpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestP2P.shareseedpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shareseedpath(), target);
  }

  // string shareip = 4;
  if (this->shareip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shareip().data(), static_cast<int>(this->shareip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestP2P.shareip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->shareip(), target);
  }

  // string downloadip = 5;
  if (this->downloadip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->downloadip().data(), static_cast<int>(this->downloadip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestP2P.downloadip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->downloadip(), target);
  }

  // string downloadseedpath = 6;
  if (this->downloadseedpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->downloadseedpath().data(), static_cast<int>(this->downloadseedpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestP2P.downloadseedpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->downloadseedpath(), target);
  }

  // string downloadfilepath = 7;
  if (this->downloadfilepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->downloadfilepath().data(), static_cast<int>(this->downloadfilepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestP2P.downloadfilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->downloadfilepath(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestP2P)
  return target;
}

size_t requestP2P::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestP2P)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sharefilepath = 2;
  if (this->sharefilepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sharefilepath());
  }

  // string shareseedpath = 3;
  if (this->shareseedpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shareseedpath());
  }

  // string shareip = 4;
  if (this->shareip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shareip());
  }

  // string downloadip = 5;
  if (this->downloadip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->downloadip());
  }

  // string downloadseedpath = 6;
  if (this->downloadseedpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->downloadseedpath());
  }

  // string downloadfilepath = 7;
  if (this->downloadfilepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->downloadfilepath());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestP2P::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestP2P)
  GOOGLE_DCHECK_NE(&from, this);
  const requestP2P* source =
      ::google::protobuf::DynamicCastToGenerated<requestP2P>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestP2P)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestP2P)
    MergeFrom(*source);
  }
}

void requestP2P::MergeFrom(const requestP2P& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestP2P)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sharefilepath().size() > 0) {

    sharefilepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sharefilepath_);
  }
  if (from.shareseedpath().size() > 0) {

    shareseedpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shareseedpath_);
  }
  if (from.shareip().size() > 0) {

    shareip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shareip_);
  }
  if (from.downloadip().size() > 0) {

    downloadip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downloadip_);
  }
  if (from.downloadseedpath().size() > 0) {

    downloadseedpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downloadseedpath_);
  }
  if (from.downloadfilepath().size() > 0) {

    downloadfilepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downloadfilepath_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
}

void requestP2P::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestP2P)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestP2P::CopyFrom(const requestP2P& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestP2P)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestP2P::IsInitialized() const {
  return true;
}

void requestP2P::Swap(requestP2P* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestP2P::InternalSwap(requestP2P* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sharefilepath_.Swap(&other->sharefilepath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shareseedpath_.Swap(&other->shareseedpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shareip_.Swap(&other->shareip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  downloadip_.Swap(&other->downloadip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  downloadseedpath_.Swap(&other->downloadseedpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  downloadfilepath_.Swap(&other->downloadfilepath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
}

::google::protobuf::Metadata requestP2P::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void requestVmExtends::InitAsDefaultInstance() {
}
class requestVmExtends::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int requestVmExtends::kVcamethodFieldNumber;
const int requestVmExtends::kVmnameFieldNumber;
const int requestVmExtends::kDisknameFieldNumber;
const int requestVmExtends::kDiskuuidFieldNumber;
const int requestVmExtends::kDiskformattypeFieldNumber;
const int requestVmExtends::kBasefolderFieldNumber;
const int requestVmExtends::kSizeFieldNumber;
const int requestVmExtends::kStoragecontrollerFieldNumber;
const int requestVmExtends::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

requestVmExtends::requestVmExtends()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.requestVmExtends)
}
requestVmExtends::requestVmExtends(const requestVmExtends& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vmname().size() > 0) {
    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  diskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskname().size() > 0) {
    diskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskname_);
  }
  diskuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskuuid().size() > 0) {
    diskuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskuuid_);
  }
  diskformattype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskformattype().size() > 0) {
    diskformattype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskformattype_);
  }
  basefolder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.basefolder().size() > 0) {
    basefolder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basefolder_);
  }
  storagecontroller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.storagecontroller().size() > 0) {
    storagecontroller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storagecontroller_);
  }
  ::memcpy(&vcamethod_, &from.vcamethod_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&vcamethod_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Qigrpc.requestVmExtends)
}

void requestVmExtends::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_requestVmExtends_qigrpc_2eproto.base);
  vmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskformattype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storagecontroller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(size_));
}

requestVmExtends::~requestVmExtends() {
  // @@protoc_insertion_point(destructor:Qigrpc.requestVmExtends)
  SharedDtor();
}

void requestVmExtends::SharedDtor() {
  vmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskformattype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storagecontroller_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void requestVmExtends::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const requestVmExtends& requestVmExtends::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_requestVmExtends_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void requestVmExtends::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.requestVmExtends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskformattype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basefolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storagecontroller_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vcamethod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&vcamethod_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* requestVmExtends::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<requestVmExtends*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vcamethod(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string vmname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestVmExtends.vmname");
        object = msg->mutable_vmname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string diskname = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestVmExtends.diskname");
        object = msg->mutable_diskname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string diskuuid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestVmExtends.diskuuid");
        object = msg->mutable_diskuuid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string diskformattype = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestVmExtends.diskformattype");
        object = msg->mutable_diskformattype();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string basefolder = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestVmExtends.basefolder");
        object = msg->mutable_basefolder();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 size = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string storagecontroller = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.requestVmExtends.storagecontroller");
        object = msg->mutable_storagecontroller();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 slot = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool requestVmExtends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.requestVmExtends)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcamethod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vmname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmname().data(), static_cast<int>(this->vmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestVmExtends.vmname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskname().data(), static_cast<int>(this->diskname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestVmExtends.diskname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskuuid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskuuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskuuid().data(), static_cast<int>(this->diskuuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestVmExtends.diskuuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskformattype = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskformattype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskformattype().data(), static_cast<int>(this->diskformattype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestVmExtends.diskformattype"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string basefolder = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basefolder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->basefolder().data(), static_cast<int>(this->basefolder().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestVmExtends.basefolder"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string storagecontroller = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storagecontroller()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->storagecontroller().data(), static_cast<int>(this->storagecontroller().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.requestVmExtends.storagecontroller"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 slot = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.requestVmExtends)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.requestVmExtends)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void requestVmExtends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.requestVmExtends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vcamethod(), output);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestVmExtends.vmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vmname(), output);
  }

  // string diskname = 3;
  if (this->diskname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskname().data(), static_cast<int>(this->diskname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestVmExtends.diskname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->diskname(), output);
  }

  // string diskuuid = 4;
  if (this->diskuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskuuid().data(), static_cast<int>(this->diskuuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestVmExtends.diskuuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->diskuuid(), output);
  }

  // string diskformattype = 5;
  if (this->diskformattype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskformattype().data(), static_cast<int>(this->diskformattype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestVmExtends.diskformattype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->diskformattype(), output);
  }

  // string basefolder = 6;
  if (this->basefolder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basefolder().data(), static_cast<int>(this->basefolder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestVmExtends.basefolder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->basefolder(), output);
  }

  // int64 size = 7;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->size(), output);
  }

  // string storagecontroller = 8;
  if (this->storagecontroller().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->storagecontroller().data(), static_cast<int>(this->storagecontroller().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestVmExtends.storagecontroller");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->storagecontroller(), output);
  }

  // int32 slot = 9;
  if (this->slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.requestVmExtends)
}

::google::protobuf::uint8* requestVmExtends::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.requestVmExtends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vcamethod(), target);
  }

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmname().data(), static_cast<int>(this->vmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestVmExtends.vmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vmname(), target);
  }

  // string diskname = 3;
  if (this->diskname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskname().data(), static_cast<int>(this->diskname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestVmExtends.diskname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->diskname(), target);
  }

  // string diskuuid = 4;
  if (this->diskuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskuuid().data(), static_cast<int>(this->diskuuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestVmExtends.diskuuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->diskuuid(), target);
  }

  // string diskformattype = 5;
  if (this->diskformattype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskformattype().data(), static_cast<int>(this->diskformattype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestVmExtends.diskformattype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->diskformattype(), target);
  }

  // string basefolder = 6;
  if (this->basefolder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basefolder().data(), static_cast<int>(this->basefolder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestVmExtends.basefolder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->basefolder(), target);
  }

  // int64 size = 7;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->size(), target);
  }

  // string storagecontroller = 8;
  if (this->storagecontroller().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->storagecontroller().data(), static_cast<int>(this->storagecontroller().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.requestVmExtends.storagecontroller");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->storagecontroller(), target);
  }

  // int32 slot = 9;
  if (this->slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.requestVmExtends)
  return target;
}

size_t requestVmExtends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.requestVmExtends)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmname = 2;
  if (this->vmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vmname());
  }

  // string diskname = 3;
  if (this->diskname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskname());
  }

  // string diskuuid = 4;
  if (this->diskuuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskuuid());
  }

  // string diskformattype = 5;
  if (this->diskformattype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskformattype());
  }

  // string basefolder = 6;
  if (this->basefolder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basefolder());
  }

  // string storagecontroller = 8;
  if (this->storagecontroller().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->storagecontroller());
  }

  // int32 vcamethod = 1;
  if (this->vcamethod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcamethod());
  }

  // int32 slot = 9;
  if (this->slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot());
  }

  // int64 size = 7;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void requestVmExtends::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.requestVmExtends)
  GOOGLE_DCHECK_NE(&from, this);
  const requestVmExtends* source =
      ::google::protobuf::DynamicCastToGenerated<requestVmExtends>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.requestVmExtends)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.requestVmExtends)
    MergeFrom(*source);
  }
}

void requestVmExtends::MergeFrom(const requestVmExtends& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.requestVmExtends)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vmname().size() > 0) {

    vmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vmname_);
  }
  if (from.diskname().size() > 0) {

    diskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskname_);
  }
  if (from.diskuuid().size() > 0) {

    diskuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskuuid_);
  }
  if (from.diskformattype().size() > 0) {

    diskformattype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskformattype_);
  }
  if (from.basefolder().size() > 0) {

    basefolder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basefolder_);
  }
  if (from.storagecontroller().size() > 0) {

    storagecontroller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storagecontroller_);
  }
  if (from.vcamethod() != 0) {
    set_vcamethod(from.vcamethod());
  }
  if (from.slot() != 0) {
    set_slot(from.slot());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void requestVmExtends::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.requestVmExtends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void requestVmExtends::CopyFrom(const requestVmExtends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.requestVmExtends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestVmExtends::IsInitialized() const {
  return true;
}

void requestVmExtends::Swap(requestVmExtends* other) {
  if (other == this) return;
  InternalSwap(other);
}
void requestVmExtends::InternalSwap(requestVmExtends* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmname_.Swap(&other->vmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  diskname_.Swap(&other->diskname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  diskuuid_.Swap(&other->diskuuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  diskformattype_.Swap(&other->diskformattype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  basefolder_.Swap(&other->basefolder_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  storagecontroller_.Swap(&other->storagecontroller_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vcamethod_, other->vcamethod_);
  swap(slot_, other->slot_);
  swap(size_, other->size_);
}

::google::protobuf::Metadata requestVmExtends::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void vcaReply::InitAsDefaultInstance() {
}
class vcaReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int vcaReply::kVcamethodFieldNumber;
const int vcaReply::kDataFieldNumber;
const int vcaReply::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

vcaReply::vcaReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Qigrpc.vcaReply)
}
vcaReply::vcaReply(const vcaReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vcamethod_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vcamethod().size() > 0) {
    vcamethod_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vcamethod_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:Qigrpc.vcaReply)
}

void vcaReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_vcaReply_qigrpc_2eproto.base);
  vcamethod_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

vcaReply::~vcaReply() {
  // @@protoc_insertion_point(destructor:Qigrpc.vcaReply)
  SharedDtor();
}

void vcaReply::SharedDtor() {
  vcamethod_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void vcaReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vcaReply& vcaReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_vcaReply_qigrpc_2eproto.base);
  return *internal_default_instance();
}


void vcaReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Qigrpc.vcaReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vcamethod_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* vcaReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<vcaReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string vcamethod = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.vcaReply.vcamethod");
        object = msg->mutable_vcamethod();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Qigrpc.vcaReply.data");
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 code = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool vcaReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Qigrpc.vcaReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string vcamethod = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vcamethod()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vcamethod().data(), static_cast<int>(this->vcamethod().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.vcaReply.vcamethod"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Qigrpc.vcaReply.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Qigrpc.vcaReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Qigrpc.vcaReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void vcaReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Qigrpc.vcaReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vcamethod = 1;
  if (this->vcamethod().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vcamethod().data(), static_cast<int>(this->vcamethod().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.vcaReply.vcamethod");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vcamethod(), output);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.vcaReply.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Qigrpc.vcaReply)
}

::google::protobuf::uint8* vcaReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Qigrpc.vcaReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vcamethod = 1;
  if (this->vcamethod().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vcamethod().data(), static_cast<int>(this->vcamethod().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.vcaReply.vcamethod");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vcamethod(), target);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Qigrpc.vcaReply.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Qigrpc.vcaReply)
  return target;
}

size_t vcaReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Qigrpc.vcaReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vcamethod = 1;
  if (this->vcamethod().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vcamethod());
  }

  // string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vcaReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Qigrpc.vcaReply)
  GOOGLE_DCHECK_NE(&from, this);
  const vcaReply* source =
      ::google::protobuf::DynamicCastToGenerated<vcaReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Qigrpc.vcaReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Qigrpc.vcaReply)
    MergeFrom(*source);
  }
}

void vcaReply::MergeFrom(const vcaReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Qigrpc.vcaReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vcamethod().size() > 0) {

    vcamethod_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vcamethod_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void vcaReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Qigrpc.vcaReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vcaReply::CopyFrom(const vcaReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Qigrpc.vcaReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vcaReply::IsInitialized() const {
  return true;
}

void vcaReply::Swap(vcaReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void vcaReply::InternalSwap(vcaReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vcamethod_.Swap(&other->vcamethod_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::google::protobuf::Metadata vcaReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_qigrpc_2eproto);
  return ::file_level_metadata_qigrpc_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Qigrpc
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Qigrpc::requestNull* Arena::CreateMaybeMessage< ::Qigrpc::requestNull >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestNull >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestSimple* Arena::CreateMaybeMessage< ::Qigrpc::requestSimple >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestSimple >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestSnapshot* Arena::CreateMaybeMessage< ::Qigrpc::requestSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestClone* Arena::CreateMaybeMessage< ::Qigrpc::requestClone >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestClone >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestInstall* Arena::CreateMaybeMessage< ::Qigrpc::requestInstall >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestInstall >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestImpAndexportVM* Arena::CreateMaybeMessage< ::Qigrpc::requestImpAndexportVM >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestImpAndexportVM >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestNetwork* Arena::CreateMaybeMessage< ::Qigrpc::requestNetwork >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestNetwork >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestRdp* Arena::CreateMaybeMessage< ::Qigrpc::requestRdp >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestRdp >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestRecord* Arena::CreateMaybeMessage< ::Qigrpc::requestRecord >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestSharefolder* Arena::CreateMaybeMessage< ::Qigrpc::requestSharefolder >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestSharefolder >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestConfig* Arena::CreateMaybeMessage< ::Qigrpc::requestConfig >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestUSB* Arena::CreateMaybeMessage< ::Qigrpc::requestUSB >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestUSB >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestAudio* Arena::CreateMaybeMessage< ::Qigrpc::requestAudio >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestAudio >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestSerial* Arena::CreateMaybeMessage< ::Qigrpc::requestSerial >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestSerial >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestP2P* Arena::CreateMaybeMessage< ::Qigrpc::requestP2P >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestP2P >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::requestVmExtends* Arena::CreateMaybeMessage< ::Qigrpc::requestVmExtends >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::requestVmExtends >(arena);
}
template<> PROTOBUF_NOINLINE ::Qigrpc::vcaReply* Arena::CreateMaybeMessage< ::Qigrpc::vcaReply >(Arena* arena) {
  return Arena::CreateInternal< ::Qigrpc::vcaReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
