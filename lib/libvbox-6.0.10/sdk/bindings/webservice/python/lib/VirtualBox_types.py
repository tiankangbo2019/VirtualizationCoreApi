##################################################
# file: VirtualBox_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -b --output-dir /home/vbox/tinderbox/6.0-sdk/out/linux.amd64/release/bin/sdk/bindings/webservice/python/lib /home/vbox/tinderbox/6.0-sdk/out/linux.amd64/release/obj/webservice/vboxwebService.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://www.virtualbox.org/
##############################

class ns0:
    targetNamespace = "http://www.virtualbox.org/"

    class SettingsVersion_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "SettingsVersion")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AccessMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AccessMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MachineState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "MachineState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SessionState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "SessionState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CPUPropertyType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "CPUPropertyType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class HWVirtExPropertyType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "HWVirtExPropertyType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ParavirtProvider_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ParavirtProvider")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FaultToleranceState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FaultToleranceState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LockType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "LockType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SessionType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "SessionType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeviceType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DeviceType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeviceActivity_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DeviceActivity")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ClipboardMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ClipboardMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DnDMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DnDMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Scope_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "Scope")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BIOSBootMenuMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "BIOSBootMenuMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class APICMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "APICMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProcessorFeature_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ProcessorFeature")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FirmwareType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FirmwareType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PointingHIDType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "PointingHIDType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class KeyboardHIDType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "KeyboardHIDType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BitmapFormat_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "BitmapFormat")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DhcpOpt_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DhcpOpt")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DhcpOptEncoding_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DhcpOptEncoding")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VFSType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "VFSType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ImportOptions_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ImportOptions")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ExportOptions_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ExportOptions")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CertificateVersion_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "CertificateVersion")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VirtualSystemDescriptionType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "VirtualSystemDescriptionType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VirtualSystemDescriptionValueType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "VirtualSystemDescriptionValueType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RecordingDestination_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "RecordingDestination")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RecordingFeature_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "RecordingFeature")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RecordingAudioCodec_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "RecordingAudioCodec")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RecordingVideoCodec_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "RecordingVideoCodec")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RecordingVideoScalingMethod_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "RecordingVideoScalingMethod")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RecordingVideoRateControlMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "RecordingVideoRateControlMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GraphicsControllerType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "GraphicsControllerType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CleanupMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "CleanupMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CloneMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "CloneMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CloneOptions_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "CloneOptions")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AutostopType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AutostopType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class HostNetworkInterfaceMediumType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "HostNetworkInterfaceMediumType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class HostNetworkInterfaceStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "HostNetworkInterfaceStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class HostNetworkInterfaceType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "HostNetworkInterfaceType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProxyMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ProxyMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdditionsFacilityType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AdditionsFacilityType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdditionsFacilityClass_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AdditionsFacilityClass")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdditionsFacilityStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AdditionsFacilityStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdditionsRunLevelType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AdditionsRunLevelType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdditionsUpdateFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AdditionsUpdateFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GuestSessionStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "GuestSessionStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GuestSessionWaitForFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "GuestSessionWaitForFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GuestSessionWaitResult_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "GuestSessionWaitResult")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GuestUserState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "GuestUserState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FileSeekOrigin_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FileSeekOrigin")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProcessInputFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ProcessInputFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProcessOutputFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ProcessOutputFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProcessWaitForFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ProcessWaitForFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProcessWaitResult_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ProcessWaitResult")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FileCopyFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FileCopyFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FsObjMoveFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FsObjMoveFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DirectoryCreateFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DirectoryCreateFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DirectoryCopyFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DirectoryCopyFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DirectoryRemoveRecFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DirectoryRemoveRecFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FsObjRenameFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FsObjRenameFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProcessCreateFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ProcessCreateFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProcessPriority_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ProcessPriority")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SymlinkType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "SymlinkType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SymlinkReadFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "SymlinkReadFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProcessStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ProcessStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProcessInputStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ProcessInputStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PathStyle_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "PathStyle")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FileAccessMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FileAccessMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FileOpenAction_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FileOpenAction")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FileSharingMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FileSharingMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FileOpenExFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FileOpenExFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FileStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FileStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FsObjType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FsObjType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DnDAction_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DnDAction")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DirectoryOpenFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DirectoryOpenFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MediumState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "MediumState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MediumType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "MediumType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MediumVariant_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "MediumVariant")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DataType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DataType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DataFlags_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DataFlags")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MediumFormatCapabilities_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "MediumFormatCapabilities")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PartitionTableType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "PartitionTableType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class KeyboardLED_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "KeyboardLED")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MouseButtonState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "MouseButtonState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TouchContactState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "TouchContactState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FramebufferCapabilities_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FramebufferCapabilities")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GuestMonitorStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "GuestMonitorStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ScreenLayoutMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ScreenLayoutMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NetworkAttachmentType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "NetworkAttachmentType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NetworkAdapterType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "NetworkAdapterType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NetworkAdapterPromiscModePolicy_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "NetworkAdapterPromiscModePolicy")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PortMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "PortMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UartType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "UartType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VMExecutionEngine_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "VMExecutionEngine")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class USBControllerType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "USBControllerType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class USBConnectionSpeed_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "USBConnectionSpeed")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class USBDeviceState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "USBDeviceState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class USBDeviceFilterAction_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "USBDeviceFilterAction")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AudioDriverType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AudioDriverType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AudioControllerType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AudioControllerType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AudioCodecType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AudioCodecType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AuthType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StorageBus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "StorageBus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StorageControllerType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "StorageControllerType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ChipsetType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ChipsetType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NATAliasMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "NATAliasMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NATProtocol_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "NATProtocol")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BandwidthGroupType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "BandwidthGroupType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VBoxEventType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "VBoxEventType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GuestMouseEventMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "GuestMouseEventMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GuestMonitorChangedEventType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "GuestMonitorChangedEventType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class IPCIDeviceAttachment_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "IPCIDeviceAttachment")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IPCIDeviceAttachment_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="isPhysicalDevice", aname="_isPhysicalDevice", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="hostAddress", aname="_hostAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="guestAddress", aname="_guestAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._isPhysicalDevice = None
                    self._hostAddress = None
                    self._guestAddress = None
                    return
            Holder.__name__ = "IPCIDeviceAttachment_Holder"
            self.pyclass = Holder

    class IVRDEServerInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "IVRDEServerInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IVRDEServerInfo_Def.schema
            TClist = [ZSI.TC.Boolean(pname="active", aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="port", aname="_port", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="numberOfClients", aname="_numberOfClients", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="beginTime", aname="_beginTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="endTime", aname="_endTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="bytesSent", aname="_bytesSent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="bytesSentTotal", aname="_bytesSentTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="bytesReceived", aname="_bytesReceived", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="bytesReceivedTotal", aname="_bytesReceivedTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="user", aname="_user", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientName", aname="_clientName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientIP", aname="_clientIP", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clientVersion", aname="_clientVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="encryptionStyle", aname="_encryptionStyle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._active = None
                    self._port = None
                    self._numberOfClients = None
                    self._beginTime = None
                    self._endTime = None
                    self._bytesSent = None
                    self._bytesSentTotal = None
                    self._bytesReceived = None
                    self._bytesReceivedTotal = None
                    self._user = None
                    self._domain = None
                    self._clientName = None
                    self._clientIP = None
                    self._clientVersion = None
                    self._encryptionStyle = None
                    return
            Holder.__name__ = "IVRDEServerInfo_Holder"
            self.pyclass = Holder

    class IGuestOSType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "IGuestOSType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IGuestOSType_Def.schema
            TClist = [ZSI.TC.String(pname="familyId", aname="_familyId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="familyDescription", aname="_familyDescription", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="is64Bit", aname="_is64Bit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedIOAPIC", aname="_recommendedIOAPIC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedVirtEx", aname="_recommendedVirtEx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="recommendedRAM", aname="_recommendedRAM", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","GraphicsControllerType",lazy=False)(pname="recommendedGraphicsController", aname="_recommendedGraphicsController", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="recommendedVRAM", aname="_recommendedVRAM", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommended2DVideoAcceleration", aname="_recommended2DVideoAcceleration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommended3DAcceleration", aname="_recommended3DAcceleration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="recommendedHDD", aname="_recommendedHDD", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","NetworkAdapterType",lazy=False)(pname="adapterType", aname="_adapterType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedPAE", aname="_recommendedPAE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageControllerType",lazy=False)(pname="recommendedDVDStorageController", aname="_recommendedDVDStorageController", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="recommendedDVDStorageBus", aname="_recommendedDVDStorageBus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageControllerType",lazy=False)(pname="recommendedHDStorageController", aname="_recommendedHDStorageController", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="recommendedHDStorageBus", aname="_recommendedHDStorageBus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FirmwareType",lazy=False)(pname="recommendedFirmware", aname="_recommendedFirmware", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedUSBHID", aname="_recommendedUSBHID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedHPET", aname="_recommendedHPET", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedUSBTablet", aname="_recommendedUSBTablet", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedRTCUseUTC", aname="_recommendedRTCUseUTC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ChipsetType",lazy=False)(pname="recommendedChipset", aname="_recommendedChipset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AudioControllerType",lazy=False)(pname="recommendedAudioController", aname="_recommendedAudioController", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AudioCodecType",lazy=False)(pname="recommendedAudioCodec", aname="_recommendedAudioCodec", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedFloppy", aname="_recommendedFloppy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedUSB", aname="_recommendedUSB", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedUSB3", aname="_recommendedUSB3", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedTFReset", aname="_recommendedTFReset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedX2APIC", aname="_recommendedX2APIC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._familyId = None
                    self._familyDescription = None
                    self._id = None
                    self._description = None
                    self._is64Bit = None
                    self._recommendedIOAPIC = None
                    self._recommendedVirtEx = None
                    self._recommendedRAM = None
                    self._recommendedGraphicsController = None
                    self._recommendedVRAM = None
                    self._recommended2DVideoAcceleration = None
                    self._recommended3DAcceleration = None
                    self._recommendedHDD = None
                    self._adapterType = None
                    self._recommendedPAE = None
                    self._recommendedDVDStorageController = None
                    self._recommendedDVDStorageBus = None
                    self._recommendedHDStorageController = None
                    self._recommendedHDStorageBus = None
                    self._recommendedFirmware = None
                    self._recommendedUSBHID = None
                    self._recommendedHPET = None
                    self._recommendedUSBTablet = None
                    self._recommendedRTCUseUTC = None
                    self._recommendedChipset = None
                    self._recommendedAudioController = None
                    self._recommendedAudioCodec = None
                    self._recommendedFloppy = None
                    self._recommendedUSB = None
                    self._recommendedUSB3 = None
                    self._recommendedTFReset = None
                    self._recommendedX2APIC = None
                    return
            Holder.__name__ = "IGuestOSType_Holder"
            self.pyclass = Holder

    class IAdditionsFacility_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "IAdditionsFacility")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IAdditionsFacility_Def.schema
            TClist = [GTD("http://www.virtualbox.org/","AdditionsFacilityClass",lazy=False)(pname="classType", aname="_classType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastUpdated", aname="_lastUpdated", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AdditionsFacilityStatus",lazy=False)(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AdditionsFacilityType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._classType = None
                    self._lastUpdated = None
                    self._name = None
                    self._status = None
                    self._type = None
                    return
            Holder.__name__ = "IAdditionsFacility_Holder"
            self.pyclass = Holder

    class IMediumAttachment_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "IMediumAttachment")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IMediumAttachment_Def.schema
            TClist = [ZSI.TC.String(pname="medium", aname="_medium", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="controller", aname="_controller", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="port", aname="_port", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="passthrough", aname="_passthrough", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="temporaryEject", aname="_temporaryEject", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="isEjected", aname="_isEjected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="nonRotational", aname="_nonRotational", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="discard", aname="_discard", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="hotPluggable", aname="_hotPluggable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bandwidthGroup", aname="_bandwidthGroup", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._medium = None
                    self._controller = None
                    self._port = None
                    self._device = None
                    self._type = None
                    self._passthrough = None
                    self._temporaryEject = None
                    self._isEjected = None
                    self._nonRotational = None
                    self._discard = None
                    self._hotPluggable = None
                    self._bandwidthGroup = None
                    return
            Holder.__name__ = "IMediumAttachment_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getResultCode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getResultCode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getResultCode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getResultCode")
            kw["aname"] = "_IVirtualBoxErrorInfo_getResultCode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getResultCode_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getResultCodeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getResultCodeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getResultCodeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getResultCodeResponse")
            kw["aname"] = "_IVirtualBoxErrorInfo_getResultCodeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getResultCodeResponse_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getResultDetail_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getResultDetail"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getResultDetail_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getResultDetail")
            kw["aname"] = "_IVirtualBoxErrorInfo_getResultDetail"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getResultDetail_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getResultDetailResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getResultDetailResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getResultDetailResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getResultDetailResponse")
            kw["aname"] = "_IVirtualBoxErrorInfo_getResultDetailResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getResultDetailResponse_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getInterfaceID_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getInterfaceID"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getInterfaceID_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getInterfaceID")
            kw["aname"] = "_IVirtualBoxErrorInfo_getInterfaceID"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getInterfaceID_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getInterfaceIDResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getInterfaceIDResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getInterfaceIDResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getInterfaceIDResponse")
            kw["aname"] = "_IVirtualBoxErrorInfo_getInterfaceIDResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getInterfaceIDResponse_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getComponent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getComponent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getComponent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getComponent")
            kw["aname"] = "_IVirtualBoxErrorInfo_getComponent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getComponent_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getComponentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getComponentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getComponentResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getComponentResponse")
            kw["aname"] = "_IVirtualBoxErrorInfo_getComponentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getComponentResponse_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getText_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getText"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getText_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getText")
            kw["aname"] = "_IVirtualBoxErrorInfo_getText"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getText_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getTextResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getTextResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getTextResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getTextResponse")
            kw["aname"] = "_IVirtualBoxErrorInfo_getTextResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getTextResponse_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getNext_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getNext"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getNext_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getNext")
            kw["aname"] = "_IVirtualBoxErrorInfo_getNext"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getNext_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getNextResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getNextResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getNextResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getNextResponse")
            kw["aname"] = "_IVirtualBoxErrorInfo_getNextResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getNextResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_getNetworkName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getNetworkName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getNetworkName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getNetworkName")
            kw["aname"] = "_INATNetwork_getNetworkName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetwork_getNetworkName_Holder"
            self.pyclass = Holder

    class INATNetwork_getNetworkNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getNetworkNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getNetworkNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getNetworkNameResponse")
            kw["aname"] = "_INATNetwork_getNetworkNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetwork_getNetworkNameResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_setNetworkName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setNetworkName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setNetworkName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="networkName", aname="_networkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setNetworkName")
            kw["aname"] = "_INATNetwork_setNetworkName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._networkName = None
                    return
            Holder.__name__ = "INATNetwork_setNetworkName_Holder"
            self.pyclass = Holder

    class INATNetwork_setNetworkNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setNetworkNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setNetworkNameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setNetworkNameResponse")
            kw["aname"] = "_INATNetwork_setNetworkNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATNetwork_setNetworkNameResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getEnabled")
            kw["aname"] = "_INATNetwork_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetwork_getEnabled_Holder"
            self.pyclass = Holder

    class INATNetwork_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getEnabledResponse")
            kw["aname"] = "_INATNetwork_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetwork_getEnabledResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setEnabled")
            kw["aname"] = "_INATNetwork_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "INATNetwork_setEnabled_Holder"
            self.pyclass = Holder

    class INATNetwork_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setEnabledResponse")
            kw["aname"] = "_INATNetwork_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATNetwork_setEnabledResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_getNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getNetwork")
            kw["aname"] = "_INATNetwork_getNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetwork_getNetwork_Holder"
            self.pyclass = Holder

    class INATNetwork_getNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getNetworkResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getNetworkResponse")
            kw["aname"] = "_INATNetwork_getNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetwork_getNetworkResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_setNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="network", aname="_network", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setNetwork")
            kw["aname"] = "_INATNetwork_setNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._network = None
                    return
            Holder.__name__ = "INATNetwork_setNetwork_Holder"
            self.pyclass = Holder

    class INATNetwork_setNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setNetworkResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setNetworkResponse")
            kw["aname"] = "_INATNetwork_setNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATNetwork_setNetworkResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_getGateway_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getGateway"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getGateway_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getGateway")
            kw["aname"] = "_INATNetwork_getGateway"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetwork_getGateway_Holder"
            self.pyclass = Holder

    class INATNetwork_getGatewayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getGatewayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getGatewayResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getGatewayResponse")
            kw["aname"] = "_INATNetwork_getGatewayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetwork_getGatewayResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_getIPv6Enabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getIPv6Enabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getIPv6Enabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getIPv6Enabled")
            kw["aname"] = "_INATNetwork_getIPv6Enabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetwork_getIPv6Enabled_Holder"
            self.pyclass = Holder

    class INATNetwork_getIPv6EnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getIPv6EnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getIPv6EnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getIPv6EnabledResponse")
            kw["aname"] = "_INATNetwork_getIPv6EnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetwork_getIPv6EnabledResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_setIPv6Enabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setIPv6Enabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setIPv6Enabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="IPv6Enabled", aname="_IPv6Enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setIPv6Enabled")
            kw["aname"] = "_INATNetwork_setIPv6Enabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IPv6Enabled = None
                    return
            Holder.__name__ = "INATNetwork_setIPv6Enabled_Holder"
            self.pyclass = Holder

    class INATNetwork_setIPv6EnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setIPv6EnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setIPv6EnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setIPv6EnabledResponse")
            kw["aname"] = "_INATNetwork_setIPv6EnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATNetwork_setIPv6EnabledResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_getIPv6Prefix_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getIPv6Prefix"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getIPv6Prefix_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getIPv6Prefix")
            kw["aname"] = "_INATNetwork_getIPv6Prefix"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetwork_getIPv6Prefix_Holder"
            self.pyclass = Holder

    class INATNetwork_getIPv6PrefixResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getIPv6PrefixResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getIPv6PrefixResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getIPv6PrefixResponse")
            kw["aname"] = "_INATNetwork_getIPv6PrefixResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetwork_getIPv6PrefixResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_setIPv6Prefix_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setIPv6Prefix"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setIPv6Prefix_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="IPv6Prefix", aname="_IPv6Prefix", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setIPv6Prefix")
            kw["aname"] = "_INATNetwork_setIPv6Prefix"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IPv6Prefix = None
                    return
            Holder.__name__ = "INATNetwork_setIPv6Prefix_Holder"
            self.pyclass = Holder

    class INATNetwork_setIPv6PrefixResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setIPv6PrefixResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setIPv6PrefixResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setIPv6PrefixResponse")
            kw["aname"] = "_INATNetwork_setIPv6PrefixResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATNetwork_setIPv6PrefixResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_getAdvertiseDefaultIPv6RouteEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getAdvertiseDefaultIPv6RouteEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getAdvertiseDefaultIPv6RouteEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getAdvertiseDefaultIPv6RouteEnabled")
            kw["aname"] = "_INATNetwork_getAdvertiseDefaultIPv6RouteEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetwork_getAdvertiseDefaultIPv6RouteEnabled_Holder"
            self.pyclass = Holder

    class INATNetwork_getAdvertiseDefaultIPv6RouteEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getAdvertiseDefaultIPv6RouteEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getAdvertiseDefaultIPv6RouteEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getAdvertiseDefaultIPv6RouteEnabledResponse")
            kw["aname"] = "_INATNetwork_getAdvertiseDefaultIPv6RouteEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetwork_getAdvertiseDefaultIPv6RouteEnabledResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_setAdvertiseDefaultIPv6RouteEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setAdvertiseDefaultIPv6RouteEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setAdvertiseDefaultIPv6RouteEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="advertiseDefaultIPv6RouteEnabled", aname="_advertiseDefaultIPv6RouteEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setAdvertiseDefaultIPv6RouteEnabled")
            kw["aname"] = "_INATNetwork_setAdvertiseDefaultIPv6RouteEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._advertiseDefaultIPv6RouteEnabled = None
                    return
            Holder.__name__ = "INATNetwork_setAdvertiseDefaultIPv6RouteEnabled_Holder"
            self.pyclass = Holder

    class INATNetwork_setAdvertiseDefaultIPv6RouteEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setAdvertiseDefaultIPv6RouteEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setAdvertiseDefaultIPv6RouteEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setAdvertiseDefaultIPv6RouteEnabledResponse")
            kw["aname"] = "_INATNetwork_setAdvertiseDefaultIPv6RouteEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATNetwork_setAdvertiseDefaultIPv6RouteEnabledResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_getNeedDhcpServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getNeedDhcpServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getNeedDhcpServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getNeedDhcpServer")
            kw["aname"] = "_INATNetwork_getNeedDhcpServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetwork_getNeedDhcpServer_Holder"
            self.pyclass = Holder

    class INATNetwork_getNeedDhcpServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getNeedDhcpServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getNeedDhcpServerResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getNeedDhcpServerResponse")
            kw["aname"] = "_INATNetwork_getNeedDhcpServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetwork_getNeedDhcpServerResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_setNeedDhcpServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setNeedDhcpServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setNeedDhcpServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="needDhcpServer", aname="_needDhcpServer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setNeedDhcpServer")
            kw["aname"] = "_INATNetwork_setNeedDhcpServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._needDhcpServer = None
                    return
            Holder.__name__ = "INATNetwork_setNeedDhcpServer_Holder"
            self.pyclass = Holder

    class INATNetwork_setNeedDhcpServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setNeedDhcpServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setNeedDhcpServerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setNeedDhcpServerResponse")
            kw["aname"] = "_INATNetwork_setNeedDhcpServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATNetwork_setNeedDhcpServerResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getEventSource")
            kw["aname"] = "_INATNetwork_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetwork_getEventSource_Holder"
            self.pyclass = Holder

    class INATNetwork_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getEventSourceResponse")
            kw["aname"] = "_INATNetwork_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetwork_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_getPortForwardRules4_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getPortForwardRules4"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getPortForwardRules4_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getPortForwardRules4")
            kw["aname"] = "_INATNetwork_getPortForwardRules4"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetwork_getPortForwardRules4_Holder"
            self.pyclass = Holder

    class INATNetwork_getPortForwardRules4Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getPortForwardRules4Response"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getPortForwardRules4Response_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getPortForwardRules4Response")
            kw["aname"] = "_INATNetwork_getPortForwardRules4Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "INATNetwork_getPortForwardRules4Response_Holder"
            self.pyclass = Holder

    class INATNetwork_getLocalMappings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getLocalMappings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getLocalMappings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getLocalMappings")
            kw["aname"] = "_INATNetwork_getLocalMappings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetwork_getLocalMappings_Holder"
            self.pyclass = Holder

    class INATNetwork_getLocalMappingsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getLocalMappingsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getLocalMappingsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getLocalMappingsResponse")
            kw["aname"] = "_INATNetwork_getLocalMappingsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "INATNetwork_getLocalMappingsResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_getLoopbackIp6_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getLoopbackIp6"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getLoopbackIp6_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getLoopbackIp6")
            kw["aname"] = "_INATNetwork_getLoopbackIp6"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetwork_getLoopbackIp6_Holder"
            self.pyclass = Holder

    class INATNetwork_getLoopbackIp6Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getLoopbackIp6Response"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getLoopbackIp6Response_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getLoopbackIp6Response")
            kw["aname"] = "_INATNetwork_getLoopbackIp6Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetwork_getLoopbackIp6Response_Holder"
            self.pyclass = Holder

    class INATNetwork_setLoopbackIp6_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setLoopbackIp6"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setLoopbackIp6_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="loopbackIp6", aname="_loopbackIp6", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setLoopbackIp6")
            kw["aname"] = "_INATNetwork_setLoopbackIp6"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._loopbackIp6 = None
                    return
            Holder.__name__ = "INATNetwork_setLoopbackIp6_Holder"
            self.pyclass = Holder

    class INATNetwork_setLoopbackIp6Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_setLoopbackIp6Response"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_setLoopbackIp6Response_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_setLoopbackIp6Response")
            kw["aname"] = "_INATNetwork_setLoopbackIp6Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATNetwork_setLoopbackIp6Response_Holder"
            self.pyclass = Holder

    class INATNetwork_getPortForwardRules6_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getPortForwardRules6"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getPortForwardRules6_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getPortForwardRules6")
            kw["aname"] = "_INATNetwork_getPortForwardRules6"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetwork_getPortForwardRules6_Holder"
            self.pyclass = Holder

    class INATNetwork_getPortForwardRules6Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_getPortForwardRules6Response"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_getPortForwardRules6Response_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_getPortForwardRules6Response")
            kw["aname"] = "_INATNetwork_getPortForwardRules6Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "INATNetwork_getPortForwardRules6Response_Holder"
            self.pyclass = Holder

    class INATNetwork_addLocalMapping_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_addLocalMapping"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_addLocalMapping_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostid", aname="_hostid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="offset", aname="_offset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_addLocalMapping")
            kw["aname"] = "_INATNetwork_addLocalMapping"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hostid = None
                    self._offset = None
                    return
            Holder.__name__ = "INATNetwork_addLocalMapping_Holder"
            self.pyclass = Holder

    class INATNetwork_addLocalMappingResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_addLocalMappingResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_addLocalMappingResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_addLocalMappingResponse")
            kw["aname"] = "_INATNetwork_addLocalMappingResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATNetwork_addLocalMappingResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_addPortForwardRule_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_addPortForwardRule"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_addPortForwardRule_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="isIpv6", aname="_isIpv6", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ruleName", aname="_ruleName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","NATProtocol",lazy=False)(pname="proto", aname="_proto", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostIP", aname="_hostIP", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedShort(pname="hostPort", aname="_hostPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="guestIP", aname="_guestIP", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedShort(pname="guestPort", aname="_guestPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_addPortForwardRule")
            kw["aname"] = "_INATNetwork_addPortForwardRule"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._isIpv6 = None
                    self._ruleName = None
                    self._proto = None
                    self._hostIP = None
                    self._hostPort = None
                    self._guestIP = None
                    self._guestPort = None
                    return
            Holder.__name__ = "INATNetwork_addPortForwardRule_Holder"
            self.pyclass = Holder

    class INATNetwork_addPortForwardRuleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_addPortForwardRuleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_addPortForwardRuleResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_addPortForwardRuleResponse")
            kw["aname"] = "_INATNetwork_addPortForwardRuleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATNetwork_addPortForwardRuleResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_removePortForwardRule_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_removePortForwardRule"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_removePortForwardRule_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="iSipv6", aname="_iSipv6", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ruleName", aname="_ruleName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_removePortForwardRule")
            kw["aname"] = "_INATNetwork_removePortForwardRule"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._iSipv6 = None
                    self._ruleName = None
                    return
            Holder.__name__ = "INATNetwork_removePortForwardRule_Holder"
            self.pyclass = Holder

    class INATNetwork_removePortForwardRuleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_removePortForwardRuleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_removePortForwardRuleResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_removePortForwardRuleResponse")
            kw["aname"] = "_INATNetwork_removePortForwardRuleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATNetwork_removePortForwardRuleResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_start_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_start"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_start_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="trunkType", aname="_trunkType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_start")
            kw["aname"] = "_INATNetwork_start"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._trunkType = None
                    return
            Holder.__name__ = "INATNetwork_start_Holder"
            self.pyclass = Holder

    class INATNetwork_startResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_startResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_startResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_startResponse")
            kw["aname"] = "_INATNetwork_startResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATNetwork_startResponse_Holder"
            self.pyclass = Holder

    class INATNetwork_stop_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_stop"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_stop_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_stop")
            kw["aname"] = "_INATNetwork_stop"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetwork_stop_Holder"
            self.pyclass = Holder

    class INATNetwork_stopResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetwork_stopResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetwork_stopResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATNetwork_stopResponse")
            kw["aname"] = "_INATNetwork_stopResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATNetwork_stopResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getEventSource")
            kw["aname"] = "_IDHCPServer_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getEventSource_Holder"
            self.pyclass = Holder

    class IDHCPServer_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getEventSourceResponse")
            kw["aname"] = "_IDHCPServer_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDHCPServer_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getEnabled")
            kw["aname"] = "_IDHCPServer_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getEnabled_Holder"
            self.pyclass = Holder

    class IDHCPServer_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getEnabledResponse")
            kw["aname"] = "_IDHCPServer_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDHCPServer_getEnabledResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_setEnabled")
            kw["aname"] = "_IDHCPServer_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "IDHCPServer_setEnabled_Holder"
            self.pyclass = Holder

    class IDHCPServer_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_setEnabledResponse")
            kw["aname"] = "_IDHCPServer_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_setEnabledResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getIPAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getIPAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getIPAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getIPAddress")
            kw["aname"] = "_IDHCPServer_getIPAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getIPAddress_Holder"
            self.pyclass = Holder

    class IDHCPServer_getIPAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getIPAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getIPAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getIPAddressResponse")
            kw["aname"] = "_IDHCPServer_getIPAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDHCPServer_getIPAddressResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getNetworkMask_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getNetworkMask"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getNetworkMask_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getNetworkMask")
            kw["aname"] = "_IDHCPServer_getNetworkMask"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getNetworkMask_Holder"
            self.pyclass = Holder

    class IDHCPServer_getNetworkMaskResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getNetworkMaskResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getNetworkMaskResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getNetworkMaskResponse")
            kw["aname"] = "_IDHCPServer_getNetworkMaskResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDHCPServer_getNetworkMaskResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getNetworkName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getNetworkName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getNetworkName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getNetworkName")
            kw["aname"] = "_IDHCPServer_getNetworkName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getNetworkName_Holder"
            self.pyclass = Holder

    class IDHCPServer_getNetworkNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getNetworkNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getNetworkNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getNetworkNameResponse")
            kw["aname"] = "_IDHCPServer_getNetworkNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDHCPServer_getNetworkNameResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getLowerIP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getLowerIP"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getLowerIP_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getLowerIP")
            kw["aname"] = "_IDHCPServer_getLowerIP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getLowerIP_Holder"
            self.pyclass = Holder

    class IDHCPServer_getLowerIPResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getLowerIPResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getLowerIPResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getLowerIPResponse")
            kw["aname"] = "_IDHCPServer_getLowerIPResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDHCPServer_getLowerIPResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getUpperIP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getUpperIP"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getUpperIP_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getUpperIP")
            kw["aname"] = "_IDHCPServer_getUpperIP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getUpperIP_Holder"
            self.pyclass = Holder

    class IDHCPServer_getUpperIPResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getUpperIPResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getUpperIPResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getUpperIPResponse")
            kw["aname"] = "_IDHCPServer_getUpperIPResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDHCPServer_getUpperIPResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getGlobalOptions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getGlobalOptions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getGlobalOptions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getGlobalOptions")
            kw["aname"] = "_IDHCPServer_getGlobalOptions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getGlobalOptions_Holder"
            self.pyclass = Holder

    class IDHCPServer_getGlobalOptionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getGlobalOptionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getGlobalOptionsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getGlobalOptionsResponse")
            kw["aname"] = "_IDHCPServer_getGlobalOptionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IDHCPServer_getGlobalOptionsResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getVmConfigs_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getVmConfigs"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getVmConfigs_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getVmConfigs")
            kw["aname"] = "_IDHCPServer_getVmConfigs"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getVmConfigs_Holder"
            self.pyclass = Holder

    class IDHCPServer_getVmConfigsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getVmConfigsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getVmConfigsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getVmConfigsResponse")
            kw["aname"] = "_IDHCPServer_getVmConfigsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IDHCPServer_getVmConfigsResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_addGlobalOption_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_addGlobalOption"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_addGlobalOption_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DhcpOpt",lazy=False)(pname="option", aname="_option", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_addGlobalOption")
            kw["aname"] = "_IDHCPServer_addGlobalOption"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._option = None
                    self._value = None
                    return
            Holder.__name__ = "IDHCPServer_addGlobalOption_Holder"
            self.pyclass = Holder

    class IDHCPServer_addGlobalOptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_addGlobalOptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_addGlobalOptionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_addGlobalOptionResponse")
            kw["aname"] = "_IDHCPServer_addGlobalOptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_addGlobalOptionResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_removeGlobalOption_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_removeGlobalOption"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_removeGlobalOption_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DhcpOpt",lazy=False)(pname="option", aname="_option", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_removeGlobalOption")
            kw["aname"] = "_IDHCPServer_removeGlobalOption"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._option = None
                    return
            Holder.__name__ = "IDHCPServer_removeGlobalOption_Holder"
            self.pyclass = Holder

    class IDHCPServer_removeGlobalOptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_removeGlobalOptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_removeGlobalOptionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_removeGlobalOptionResponse")
            kw["aname"] = "_IDHCPServer_removeGlobalOptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_removeGlobalOptionResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_removeGlobalOptions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_removeGlobalOptions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_removeGlobalOptions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_removeGlobalOptions")
            kw["aname"] = "_IDHCPServer_removeGlobalOptions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_removeGlobalOptions_Holder"
            self.pyclass = Holder

    class IDHCPServer_removeGlobalOptionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_removeGlobalOptionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_removeGlobalOptionsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_removeGlobalOptionsResponse")
            kw["aname"] = "_IDHCPServer_removeGlobalOptionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_removeGlobalOptionsResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_addVmSlotOption_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_addVmSlotOption"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_addVmSlotOption_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vmname", aname="_vmname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="slot", aname="_slot", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DhcpOpt",lazy=False)(pname="option", aname="_option", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_addVmSlotOption")
            kw["aname"] = "_IDHCPServer_addVmSlotOption"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._vmname = None
                    self._slot = None
                    self._option = None
                    self._value = None
                    return
            Holder.__name__ = "IDHCPServer_addVmSlotOption_Holder"
            self.pyclass = Holder

    class IDHCPServer_addVmSlotOptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_addVmSlotOptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_addVmSlotOptionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_addVmSlotOptionResponse")
            kw["aname"] = "_IDHCPServer_addVmSlotOptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_addVmSlotOptionResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_removeVmSlotOption_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_removeVmSlotOption"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_removeVmSlotOption_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vmname", aname="_vmname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="slot", aname="_slot", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DhcpOpt",lazy=False)(pname="option", aname="_option", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_removeVmSlotOption")
            kw["aname"] = "_IDHCPServer_removeVmSlotOption"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._vmname = None
                    self._slot = None
                    self._option = None
                    return
            Holder.__name__ = "IDHCPServer_removeVmSlotOption_Holder"
            self.pyclass = Holder

    class IDHCPServer_removeVmSlotOptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_removeVmSlotOptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_removeVmSlotOptionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_removeVmSlotOptionResponse")
            kw["aname"] = "_IDHCPServer_removeVmSlotOptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_removeVmSlotOptionResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_removeVmSlotOptions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_removeVmSlotOptions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_removeVmSlotOptions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vmname", aname="_vmname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="slot", aname="_slot", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_removeVmSlotOptions")
            kw["aname"] = "_IDHCPServer_removeVmSlotOptions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._vmname = None
                    self._slot = None
                    return
            Holder.__name__ = "IDHCPServer_removeVmSlotOptions_Holder"
            self.pyclass = Holder

    class IDHCPServer_removeVmSlotOptionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_removeVmSlotOptionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_removeVmSlotOptionsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_removeVmSlotOptionsResponse")
            kw["aname"] = "_IDHCPServer_removeVmSlotOptionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_removeVmSlotOptionsResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getVmSlotOptions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getVmSlotOptions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getVmSlotOptions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vmname", aname="_vmname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="slot", aname="_slot", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getVmSlotOptions")
            kw["aname"] = "_IDHCPServer_getVmSlotOptions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._vmname = None
                    self._slot = None
                    return
            Holder.__name__ = "IDHCPServer_getVmSlotOptions_Holder"
            self.pyclass = Holder

    class IDHCPServer_getVmSlotOptionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getVmSlotOptionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getVmSlotOptionsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getVmSlotOptionsResponse")
            kw["aname"] = "_IDHCPServer_getVmSlotOptionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IDHCPServer_getVmSlotOptionsResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getMacOptions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getMacOptions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getMacOptions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mac", aname="_mac", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getMacOptions")
            kw["aname"] = "_IDHCPServer_getMacOptions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._mac = None
                    return
            Holder.__name__ = "IDHCPServer_getMacOptions_Holder"
            self.pyclass = Holder

    class IDHCPServer_getMacOptionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getMacOptionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getMacOptionsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getMacOptionsResponse")
            kw["aname"] = "_IDHCPServer_getMacOptionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IDHCPServer_getMacOptionsResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_setConfiguration_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_setConfiguration"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_setConfiguration_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="IPAddress", aname="_IPAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="networkMask", aname="_networkMask", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="FromIPAddress", aname="_FromIPAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ToIPAddress", aname="_ToIPAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_setConfiguration")
            kw["aname"] = "_IDHCPServer_setConfiguration"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IPAddress = None
                    self._networkMask = None
                    self._FromIPAddress = None
                    self._ToIPAddress = None
                    return
            Holder.__name__ = "IDHCPServer_setConfiguration_Holder"
            self.pyclass = Holder

    class IDHCPServer_setConfigurationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_setConfigurationResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_setConfigurationResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_setConfigurationResponse")
            kw["aname"] = "_IDHCPServer_setConfigurationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_setConfigurationResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_start_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_start"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_start_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="networkName", aname="_networkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="trunkName", aname="_trunkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="trunkType", aname="_trunkType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_start")
            kw["aname"] = "_IDHCPServer_start"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._networkName = None
                    self._trunkName = None
                    self._trunkType = None
                    return
            Holder.__name__ = "IDHCPServer_start_Holder"
            self.pyclass = Holder

    class IDHCPServer_startResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_startResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_startResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_startResponse")
            kw["aname"] = "_IDHCPServer_startResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_startResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_stop_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_stop"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_stop_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_stop")
            kw["aname"] = "_IDHCPServer_stop"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_stop_Holder"
            self.pyclass = Holder

    class IDHCPServer_stopResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_stopResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_stopResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_stopResponse")
            kw["aname"] = "_IDHCPServer_stopResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_stopResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_restart_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_restart"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_restart_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_restart")
            kw["aname"] = "_IDHCPServer_restart"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_restart_Holder"
            self.pyclass = Holder

    class IDHCPServer_restartResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_restartResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_restartResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_restartResponse")
            kw["aname"] = "_IDHCPServer_restartResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_restartResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getVersion")
            kw["aname"] = "_IVirtualBox_getVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getVersion_Holder"
            self.pyclass = Holder

    class IVirtualBox_getVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getVersionResponse")
            kw["aname"] = "_IVirtualBox_getVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getVersionResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getVersionNormalized_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getVersionNormalized"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getVersionNormalized_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getVersionNormalized")
            kw["aname"] = "_IVirtualBox_getVersionNormalized"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getVersionNormalized_Holder"
            self.pyclass = Holder

    class IVirtualBox_getVersionNormalizedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getVersionNormalizedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getVersionNormalizedResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getVersionNormalizedResponse")
            kw["aname"] = "_IVirtualBox_getVersionNormalizedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getVersionNormalizedResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getRevision_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getRevision"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getRevision_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getRevision")
            kw["aname"] = "_IVirtualBox_getRevision"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getRevision_Holder"
            self.pyclass = Holder

    class IVirtualBox_getRevisionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getRevisionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getRevisionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getRevisionResponse")
            kw["aname"] = "_IVirtualBox_getRevisionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getRevisionResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getPackageType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getPackageType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getPackageType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getPackageType")
            kw["aname"] = "_IVirtualBox_getPackageType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getPackageType_Holder"
            self.pyclass = Holder

    class IVirtualBox_getPackageTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getPackageTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getPackageTypeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getPackageTypeResponse")
            kw["aname"] = "_IVirtualBox_getPackageTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getPackageTypeResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getAPIVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getAPIVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getAPIVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getAPIVersion")
            kw["aname"] = "_IVirtualBox_getAPIVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getAPIVersion_Holder"
            self.pyclass = Holder

    class IVirtualBox_getAPIVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getAPIVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getAPIVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getAPIVersionResponse")
            kw["aname"] = "_IVirtualBox_getAPIVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getAPIVersionResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getAPIRevision_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getAPIRevision"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getAPIRevision_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getAPIRevision")
            kw["aname"] = "_IVirtualBox_getAPIRevision"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getAPIRevision_Holder"
            self.pyclass = Holder

    class IVirtualBox_getAPIRevisionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getAPIRevisionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getAPIRevisionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getAPIRevisionResponse")
            kw["aname"] = "_IVirtualBox_getAPIRevisionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getAPIRevisionResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getHomeFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getHomeFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getHomeFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getHomeFolder")
            kw["aname"] = "_IVirtualBox_getHomeFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getHomeFolder_Holder"
            self.pyclass = Holder

    class IVirtualBox_getHomeFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getHomeFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getHomeFolderResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getHomeFolderResponse")
            kw["aname"] = "_IVirtualBox_getHomeFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getHomeFolderResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getSettingsFilePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getSettingsFilePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getSettingsFilePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getSettingsFilePath")
            kw["aname"] = "_IVirtualBox_getSettingsFilePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getSettingsFilePath_Holder"
            self.pyclass = Holder

    class IVirtualBox_getSettingsFilePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getSettingsFilePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getSettingsFilePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getSettingsFilePathResponse")
            kw["aname"] = "_IVirtualBox_getSettingsFilePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getSettingsFilePathResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getHost_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getHost"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getHost_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getHost")
            kw["aname"] = "_IVirtualBox_getHost"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getHost_Holder"
            self.pyclass = Holder

    class IVirtualBox_getHostResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getHostResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getHostResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getHostResponse")
            kw["aname"] = "_IVirtualBox_getHostResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getHostResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getSystemProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getSystemProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getSystemProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getSystemProperties")
            kw["aname"] = "_IVirtualBox_getSystemProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getSystemProperties_Holder"
            self.pyclass = Holder

    class IVirtualBox_getSystemPropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getSystemPropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getSystemPropertiesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getSystemPropertiesResponse")
            kw["aname"] = "_IVirtualBox_getSystemPropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getSystemPropertiesResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getMachines_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getMachines"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getMachines_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getMachines")
            kw["aname"] = "_IVirtualBox_getMachines"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getMachines_Holder"
            self.pyclass = Holder

    class IVirtualBox_getMachinesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getMachinesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getMachinesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getMachinesResponse")
            kw["aname"] = "_IVirtualBox_getMachinesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getMachinesResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getMachineGroups_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getMachineGroups"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getMachineGroups_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getMachineGroups")
            kw["aname"] = "_IVirtualBox_getMachineGroups"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getMachineGroups_Holder"
            self.pyclass = Holder

    class IVirtualBox_getMachineGroupsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getMachineGroupsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getMachineGroupsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getMachineGroupsResponse")
            kw["aname"] = "_IVirtualBox_getMachineGroupsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getMachineGroupsResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getHardDisks_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getHardDisks"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getHardDisks_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getHardDisks")
            kw["aname"] = "_IVirtualBox_getHardDisks"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getHardDisks_Holder"
            self.pyclass = Holder

    class IVirtualBox_getHardDisksResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getHardDisksResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getHardDisksResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getHardDisksResponse")
            kw["aname"] = "_IVirtualBox_getHardDisksResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getHardDisksResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getDVDImages_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getDVDImages"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getDVDImages_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getDVDImages")
            kw["aname"] = "_IVirtualBox_getDVDImages"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getDVDImages_Holder"
            self.pyclass = Holder

    class IVirtualBox_getDVDImagesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getDVDImagesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getDVDImagesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getDVDImagesResponse")
            kw["aname"] = "_IVirtualBox_getDVDImagesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getDVDImagesResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getFloppyImages_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getFloppyImages"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getFloppyImages_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getFloppyImages")
            kw["aname"] = "_IVirtualBox_getFloppyImages"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getFloppyImages_Holder"
            self.pyclass = Holder

    class IVirtualBox_getFloppyImagesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getFloppyImagesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getFloppyImagesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getFloppyImagesResponse")
            kw["aname"] = "_IVirtualBox_getFloppyImagesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getFloppyImagesResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getProgressOperations_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getProgressOperations"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getProgressOperations_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getProgressOperations")
            kw["aname"] = "_IVirtualBox_getProgressOperations"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getProgressOperations_Holder"
            self.pyclass = Holder

    class IVirtualBox_getProgressOperationsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getProgressOperationsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getProgressOperationsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getProgressOperationsResponse")
            kw["aname"] = "_IVirtualBox_getProgressOperationsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getProgressOperationsResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getGuestOSTypes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getGuestOSTypes"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getGuestOSTypes_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getGuestOSTypes")
            kw["aname"] = "_IVirtualBox_getGuestOSTypes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getGuestOSTypes_Holder"
            self.pyclass = Holder

    class IVirtualBox_getGuestOSTypesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getGuestOSTypesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getGuestOSTypesResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IGuestOSType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getGuestOSTypesResponse")
            kw["aname"] = "_IVirtualBox_getGuestOSTypesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getGuestOSTypesResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getSharedFolders_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getSharedFolders"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getSharedFolders_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getSharedFolders")
            kw["aname"] = "_IVirtualBox_getSharedFolders"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getSharedFolders_Holder"
            self.pyclass = Holder

    class IVirtualBox_getSharedFoldersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getSharedFoldersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getSharedFoldersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getSharedFoldersResponse")
            kw["aname"] = "_IVirtualBox_getSharedFoldersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getSharedFoldersResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getPerformanceCollector_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getPerformanceCollector"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getPerformanceCollector_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getPerformanceCollector")
            kw["aname"] = "_IVirtualBox_getPerformanceCollector"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getPerformanceCollector_Holder"
            self.pyclass = Holder

    class IVirtualBox_getPerformanceCollectorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getPerformanceCollectorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getPerformanceCollectorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getPerformanceCollectorResponse")
            kw["aname"] = "_IVirtualBox_getPerformanceCollectorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getPerformanceCollectorResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getDHCPServers_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getDHCPServers"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getDHCPServers_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getDHCPServers")
            kw["aname"] = "_IVirtualBox_getDHCPServers"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getDHCPServers_Holder"
            self.pyclass = Holder

    class IVirtualBox_getDHCPServersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getDHCPServersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getDHCPServersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getDHCPServersResponse")
            kw["aname"] = "_IVirtualBox_getDHCPServersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getDHCPServersResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getNATNetworks_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getNATNetworks"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getNATNetworks_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getNATNetworks")
            kw["aname"] = "_IVirtualBox_getNATNetworks"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getNATNetworks_Holder"
            self.pyclass = Holder

    class IVirtualBox_getNATNetworksResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getNATNetworksResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getNATNetworksResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getNATNetworksResponse")
            kw["aname"] = "_IVirtualBox_getNATNetworksResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getNATNetworksResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getEventSource")
            kw["aname"] = "_IVirtualBox_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getEventSource_Holder"
            self.pyclass = Holder

    class IVirtualBox_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getEventSourceResponse")
            kw["aname"] = "_IVirtualBox_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getInternalNetworks_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getInternalNetworks"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getInternalNetworks_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getInternalNetworks")
            kw["aname"] = "_IVirtualBox_getInternalNetworks"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getInternalNetworks_Holder"
            self.pyclass = Holder

    class IVirtualBox_getInternalNetworksResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getInternalNetworksResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getInternalNetworksResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getInternalNetworksResponse")
            kw["aname"] = "_IVirtualBox_getInternalNetworksResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getInternalNetworksResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getGenericNetworkDrivers_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getGenericNetworkDrivers"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getGenericNetworkDrivers_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getGenericNetworkDrivers")
            kw["aname"] = "_IVirtualBox_getGenericNetworkDrivers"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getGenericNetworkDrivers_Holder"
            self.pyclass = Holder

    class IVirtualBox_getGenericNetworkDriversResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getGenericNetworkDriversResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getGenericNetworkDriversResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getGenericNetworkDriversResponse")
            kw["aname"] = "_IVirtualBox_getGenericNetworkDriversResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getGenericNetworkDriversResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getCloudProviderManager_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getCloudProviderManager"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getCloudProviderManager_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getCloudProviderManager")
            kw["aname"] = "_IVirtualBox_getCloudProviderManager"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getCloudProviderManager_Holder"
            self.pyclass = Holder

    class IVirtualBox_getCloudProviderManagerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getCloudProviderManagerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getCloudProviderManagerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getCloudProviderManagerResponse")
            kw["aname"] = "_IVirtualBox_getCloudProviderManagerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getCloudProviderManagerResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_composeMachineFilename_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_composeMachineFilename"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_composeMachineFilename_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="group", aname="_group", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="createFlags", aname="_createFlags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="baseFolder", aname="_baseFolder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_composeMachineFilename")
            kw["aname"] = "_IVirtualBox_composeMachineFilename"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._group = None
                    self._createFlags = None
                    self._baseFolder = None
                    return
            Holder.__name__ = "IVirtualBox_composeMachineFilename_Holder"
            self.pyclass = Holder

    class IVirtualBox_composeMachineFilenameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_composeMachineFilenameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_composeMachineFilenameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_composeMachineFilenameResponse")
            kw["aname"] = "_IVirtualBox_composeMachineFilenameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_composeMachineFilenameResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_createMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="settingsFile", aname="_settingsFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="groups", aname="_groups", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="osTypeId", aname="_osTypeId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createMachine")
            kw["aname"] = "_IVirtualBox_createMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._settingsFile = None
                    self._name = None
                    self._groups = []
                    self._osTypeId = None
                    self._flags = None
                    return
            Holder.__name__ = "IVirtualBox_createMachine_Holder"
            self.pyclass = Holder

    class IVirtualBox_createMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createMachineResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createMachineResponse")
            kw["aname"] = "_IVirtualBox_createMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_createMachineResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_openMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_openMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_openMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="settingsFile", aname="_settingsFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_openMachine")
            kw["aname"] = "_IVirtualBox_openMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._settingsFile = None
                    return
            Holder.__name__ = "IVirtualBox_openMachine_Holder"
            self.pyclass = Holder

    class IVirtualBox_openMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_openMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_openMachineResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_openMachineResponse")
            kw["aname"] = "_IVirtualBox_openMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_openMachineResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_registerMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_registerMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_registerMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="machine", aname="_machine", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_registerMachine")
            kw["aname"] = "_IVirtualBox_registerMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._machine = None
                    return
            Holder.__name__ = "IVirtualBox_registerMachine_Holder"
            self.pyclass = Holder

    class IVirtualBox_registerMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_registerMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_registerMachineResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_registerMachineResponse")
            kw["aname"] = "_IVirtualBox_registerMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualBox_registerMachineResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_findMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_findMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_findMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nameOrId", aname="_nameOrId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_findMachine")
            kw["aname"] = "_IVirtualBox_findMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._nameOrId = None
                    return
            Holder.__name__ = "IVirtualBox_findMachine_Holder"
            self.pyclass = Holder

    class IVirtualBox_findMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_findMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_findMachineResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_findMachineResponse")
            kw["aname"] = "_IVirtualBox_findMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_findMachineResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getMachinesByGroups_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getMachinesByGroups"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getMachinesByGroups_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="groups", aname="_groups", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getMachinesByGroups")
            kw["aname"] = "_IVirtualBox_getMachinesByGroups"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._groups = []
                    return
            Holder.__name__ = "IVirtualBox_getMachinesByGroups_Holder"
            self.pyclass = Holder

    class IVirtualBox_getMachinesByGroupsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getMachinesByGroupsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getMachinesByGroupsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getMachinesByGroupsResponse")
            kw["aname"] = "_IVirtualBox_getMachinesByGroupsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getMachinesByGroupsResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getMachineStates_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getMachineStates"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getMachineStates_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="machines", aname="_machines", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getMachineStates")
            kw["aname"] = "_IVirtualBox_getMachineStates"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._machines = []
                    return
            Holder.__name__ = "IVirtualBox_getMachineStates_Holder"
            self.pyclass = Holder

    class IVirtualBox_getMachineStatesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getMachineStatesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getMachineStatesResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MachineState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getMachineStatesResponse")
            kw["aname"] = "_IVirtualBox_getMachineStatesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getMachineStatesResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_createAppliance_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createAppliance"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createAppliance_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createAppliance")
            kw["aname"] = "_IVirtualBox_createAppliance"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_createAppliance_Holder"
            self.pyclass = Holder

    class IVirtualBox_createApplianceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createApplianceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createApplianceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createApplianceResponse")
            kw["aname"] = "_IVirtualBox_createApplianceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_createApplianceResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_createUnattendedInstaller_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createUnattendedInstaller"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createUnattendedInstaller_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createUnattendedInstaller")
            kw["aname"] = "_IVirtualBox_createUnattendedInstaller"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_createUnattendedInstaller_Holder"
            self.pyclass = Holder

    class IVirtualBox_createUnattendedInstallerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createUnattendedInstallerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createUnattendedInstallerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createUnattendedInstallerResponse")
            kw["aname"] = "_IVirtualBox_createUnattendedInstallerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_createUnattendedInstallerResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_createMedium_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createMedium"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createMedium_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AccessMode",lazy=False)(pname="accessMode", aname="_accessMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="aDeviceTypeType", aname="_aDeviceTypeType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createMedium")
            kw["aname"] = "_IVirtualBox_createMedium"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._format = None
                    self._location = None
                    self._accessMode = None
                    self._aDeviceTypeType = None
                    return
            Holder.__name__ = "IVirtualBox_createMedium_Holder"
            self.pyclass = Holder

    class IVirtualBox_createMediumResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createMediumResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createMediumResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createMediumResponse")
            kw["aname"] = "_IVirtualBox_createMediumResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_createMediumResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_openMedium_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_openMedium"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_openMedium_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="deviceType", aname="_deviceType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AccessMode",lazy=False)(pname="accessMode", aname="_accessMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="forceNewUuid", aname="_forceNewUuid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_openMedium")
            kw["aname"] = "_IVirtualBox_openMedium"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._location = None
                    self._deviceType = None
                    self._accessMode = None
                    self._forceNewUuid = None
                    return
            Holder.__name__ = "IVirtualBox_openMedium_Holder"
            self.pyclass = Holder

    class IVirtualBox_openMediumResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_openMediumResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_openMediumResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_openMediumResponse")
            kw["aname"] = "_IVirtualBox_openMediumResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_openMediumResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getGuestOSType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getGuestOSType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getGuestOSType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getGuestOSType")
            kw["aname"] = "_IVirtualBox_getGuestOSType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IVirtualBox_getGuestOSType_Holder"
            self.pyclass = Holder

    class IVirtualBox_getGuestOSTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getGuestOSTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getGuestOSTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IGuestOSType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getGuestOSTypeResponse")
            kw["aname"] = "_IVirtualBox_getGuestOSTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getGuestOSTypeResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_createSharedFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createSharedFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createSharedFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostPath", aname="_hostPath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="writable", aname="_writable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="automount", aname="_automount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="autoMountPoint", aname="_autoMountPoint", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createSharedFolder")
            kw["aname"] = "_IVirtualBox_createSharedFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._hostPath = None
                    self._writable = None
                    self._automount = None
                    self._autoMountPoint = None
                    return
            Holder.__name__ = "IVirtualBox_createSharedFolder_Holder"
            self.pyclass = Holder

    class IVirtualBox_createSharedFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createSharedFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createSharedFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createSharedFolderResponse")
            kw["aname"] = "_IVirtualBox_createSharedFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualBox_createSharedFolderResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_removeSharedFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_removeSharedFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_removeSharedFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_removeSharedFolder")
            kw["aname"] = "_IVirtualBox_removeSharedFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IVirtualBox_removeSharedFolder_Holder"
            self.pyclass = Holder

    class IVirtualBox_removeSharedFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_removeSharedFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_removeSharedFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_removeSharedFolderResponse")
            kw["aname"] = "_IVirtualBox_removeSharedFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualBox_removeSharedFolderResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getExtraDataKeys_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getExtraDataKeys"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getExtraDataKeys_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getExtraDataKeys")
            kw["aname"] = "_IVirtualBox_getExtraDataKeys"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getExtraDataKeys_Holder"
            self.pyclass = Holder

    class IVirtualBox_getExtraDataKeysResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getExtraDataKeysResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getExtraDataKeysResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getExtraDataKeysResponse")
            kw["aname"] = "_IVirtualBox_getExtraDataKeysResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getExtraDataKeysResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getExtraData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getExtraData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getExtraData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getExtraData")
            kw["aname"] = "_IVirtualBox_getExtraData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    return
            Holder.__name__ = "IVirtualBox_getExtraData_Holder"
            self.pyclass = Holder

    class IVirtualBox_getExtraDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getExtraDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getExtraDataResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getExtraDataResponse")
            kw["aname"] = "_IVirtualBox_getExtraDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getExtraDataResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_setExtraData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_setExtraData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_setExtraData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_setExtraData")
            kw["aname"] = "_IVirtualBox_setExtraData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "IVirtualBox_setExtraData_Holder"
            self.pyclass = Holder

    class IVirtualBox_setExtraDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_setExtraDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_setExtraDataResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_setExtraDataResponse")
            kw["aname"] = "_IVirtualBox_setExtraDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualBox_setExtraDataResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_setSettingsSecret_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_setSettingsSecret"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_setSettingsSecret_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_setSettingsSecret")
            kw["aname"] = "_IVirtualBox_setSettingsSecret"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._password = None
                    return
            Holder.__name__ = "IVirtualBox_setSettingsSecret_Holder"
            self.pyclass = Holder

    class IVirtualBox_setSettingsSecretResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_setSettingsSecretResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_setSettingsSecretResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_setSettingsSecretResponse")
            kw["aname"] = "_IVirtualBox_setSettingsSecretResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualBox_setSettingsSecretResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_createDHCPServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createDHCPServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createDHCPServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createDHCPServer")
            kw["aname"] = "_IVirtualBox_createDHCPServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IVirtualBox_createDHCPServer_Holder"
            self.pyclass = Holder

    class IVirtualBox_createDHCPServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createDHCPServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createDHCPServerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createDHCPServerResponse")
            kw["aname"] = "_IVirtualBox_createDHCPServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_createDHCPServerResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_findDHCPServerByNetworkName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_findDHCPServerByNetworkName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_findDHCPServerByNetworkName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_findDHCPServerByNetworkName")
            kw["aname"] = "_IVirtualBox_findDHCPServerByNetworkName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IVirtualBox_findDHCPServerByNetworkName_Holder"
            self.pyclass = Holder

    class IVirtualBox_findDHCPServerByNetworkNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_findDHCPServerByNetworkNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_findDHCPServerByNetworkNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_findDHCPServerByNetworkNameResponse")
            kw["aname"] = "_IVirtualBox_findDHCPServerByNetworkNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_findDHCPServerByNetworkNameResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_removeDHCPServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_removeDHCPServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_removeDHCPServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="server", aname="_server", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_removeDHCPServer")
            kw["aname"] = "_IVirtualBox_removeDHCPServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._server = None
                    return
            Holder.__name__ = "IVirtualBox_removeDHCPServer_Holder"
            self.pyclass = Holder

    class IVirtualBox_removeDHCPServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_removeDHCPServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_removeDHCPServerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_removeDHCPServerResponse")
            kw["aname"] = "_IVirtualBox_removeDHCPServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualBox_removeDHCPServerResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_createNATNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createNATNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createNATNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="networkName", aname="_networkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createNATNetwork")
            kw["aname"] = "_IVirtualBox_createNATNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._networkName = None
                    return
            Holder.__name__ = "IVirtualBox_createNATNetwork_Holder"
            self.pyclass = Holder

    class IVirtualBox_createNATNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createNATNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createNATNetworkResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createNATNetworkResponse")
            kw["aname"] = "_IVirtualBox_createNATNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_createNATNetworkResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_findNATNetworkByName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_findNATNetworkByName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_findNATNetworkByName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="networkName", aname="_networkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_findNATNetworkByName")
            kw["aname"] = "_IVirtualBox_findNATNetworkByName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._networkName = None
                    return
            Holder.__name__ = "IVirtualBox_findNATNetworkByName_Holder"
            self.pyclass = Holder

    class IVirtualBox_findNATNetworkByNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_findNATNetworkByNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_findNATNetworkByNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_findNATNetworkByNameResponse")
            kw["aname"] = "_IVirtualBox_findNATNetworkByNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_findNATNetworkByNameResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_removeNATNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_removeNATNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_removeNATNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="network", aname="_network", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_removeNATNetwork")
            kw["aname"] = "_IVirtualBox_removeNATNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._network = None
                    return
            Holder.__name__ = "IVirtualBox_removeNATNetwork_Holder"
            self.pyclass = Holder

    class IVirtualBox_removeNATNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_removeNATNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_removeNATNetworkResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_removeNATNetworkResponse")
            kw["aname"] = "_IVirtualBox_removeNATNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualBox_removeNATNetworkResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_checkFirmwarePresent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_checkFirmwarePresent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_checkFirmwarePresent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FirmwareType",lazy=False)(pname="firmwareType", aname="_firmwareType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="version", aname="_version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_checkFirmwarePresent")
            kw["aname"] = "_IVirtualBox_checkFirmwarePresent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._firmwareType = None
                    self._version = None
                    return
            Holder.__name__ = "IVirtualBox_checkFirmwarePresent_Holder"
            self.pyclass = Holder

    class IVirtualBox_checkFirmwarePresentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_checkFirmwarePresentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_checkFirmwarePresentResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="url", aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="file", aname="_file", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_checkFirmwarePresentResponse")
            kw["aname"] = "_IVirtualBox_checkFirmwarePresentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._url = None
                    self._file = None
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_checkFirmwarePresentResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_getPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_getPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_getPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_getPath")
            kw["aname"] = "_IVFSExplorer_getPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVFSExplorer_getPath_Holder"
            self.pyclass = Holder

    class IVFSExplorer_getPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_getPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_getPathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_getPathResponse")
            kw["aname"] = "_IVFSExplorer_getPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVFSExplorer_getPathResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_getType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_getType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_getType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_getType")
            kw["aname"] = "_IVFSExplorer_getType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVFSExplorer_getType_Holder"
            self.pyclass = Holder

    class IVFSExplorer_getTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_getTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_getTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","VFSType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_getTypeResponse")
            kw["aname"] = "_IVFSExplorer_getTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVFSExplorer_getTypeResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_update_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_update"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_update_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_update")
            kw["aname"] = "_IVFSExplorer_update"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVFSExplorer_update_Holder"
            self.pyclass = Holder

    class IVFSExplorer_updateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_updateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_updateResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_updateResponse")
            kw["aname"] = "_IVFSExplorer_updateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVFSExplorer_updateResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_cd_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_cd"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_cd_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dir", aname="_dir", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_cd")
            kw["aname"] = "_IVFSExplorer_cd"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._dir = None
                    return
            Holder.__name__ = "IVFSExplorer_cd_Holder"
            self.pyclass = Holder

    class IVFSExplorer_cdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_cdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_cdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_cdResponse")
            kw["aname"] = "_IVFSExplorer_cdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVFSExplorer_cdResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_cdUp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_cdUp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_cdUp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_cdUp")
            kw["aname"] = "_IVFSExplorer_cdUp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVFSExplorer_cdUp_Holder"
            self.pyclass = Holder

    class IVFSExplorer_cdUpResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_cdUpResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_cdUpResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_cdUpResponse")
            kw["aname"] = "_IVFSExplorer_cdUpResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVFSExplorer_cdUpResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_entryList_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_entryList"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_entryList_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_entryList")
            kw["aname"] = "_IVFSExplorer_entryList"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVFSExplorer_entryList_Holder"
            self.pyclass = Holder

    class IVFSExplorer_entryListResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_entryListResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_entryListResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="names", aname="_names", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="types", aname="_types", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="sizes", aname="_sizes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="modes", aname="_modes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_entryListResponse")
            kw["aname"] = "_IVFSExplorer_entryListResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._names = []
                    self._types = []
                    self._sizes = []
                    self._modes = []
                    return
            Holder.__name__ = "IVFSExplorer_entryListResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_exists_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_exists"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_exists_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="names", aname="_names", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_exists")
            kw["aname"] = "_IVFSExplorer_exists"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._names = []
                    return
            Holder.__name__ = "IVFSExplorer_exists_Holder"
            self.pyclass = Holder

    class IVFSExplorer_existsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_existsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_existsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_existsResponse")
            kw["aname"] = "_IVFSExplorer_existsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVFSExplorer_existsResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_remove_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_remove"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_remove_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="names", aname="_names", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_remove")
            kw["aname"] = "_IVFSExplorer_remove"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._names = []
                    return
            Holder.__name__ = "IVFSExplorer_remove_Holder"
            self.pyclass = Holder

    class IVFSExplorer_removeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_removeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_removeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_removeResponse")
            kw["aname"] = "_IVFSExplorer_removeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVFSExplorer_removeResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getVersionNumber_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getVersionNumber"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getVersionNumber_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getVersionNumber")
            kw["aname"] = "_ICertificate_getVersionNumber"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getVersionNumber_Holder"
            self.pyclass = Holder

    class ICertificate_getVersionNumberResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getVersionNumberResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getVersionNumberResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","CertificateVersion",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getVersionNumberResponse")
            kw["aname"] = "_ICertificate_getVersionNumberResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getVersionNumberResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getSerialNumber_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getSerialNumber"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getSerialNumber_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getSerialNumber")
            kw["aname"] = "_ICertificate_getSerialNumber"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getSerialNumber_Holder"
            self.pyclass = Holder

    class ICertificate_getSerialNumberResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getSerialNumberResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getSerialNumberResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getSerialNumberResponse")
            kw["aname"] = "_ICertificate_getSerialNumberResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getSerialNumberResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getSignatureAlgorithmOID_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getSignatureAlgorithmOID"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getSignatureAlgorithmOID_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getSignatureAlgorithmOID")
            kw["aname"] = "_ICertificate_getSignatureAlgorithmOID"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getSignatureAlgorithmOID_Holder"
            self.pyclass = Holder

    class ICertificate_getSignatureAlgorithmOIDResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getSignatureAlgorithmOIDResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getSignatureAlgorithmOIDResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getSignatureAlgorithmOIDResponse")
            kw["aname"] = "_ICertificate_getSignatureAlgorithmOIDResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getSignatureAlgorithmOIDResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getSignatureAlgorithmName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getSignatureAlgorithmName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getSignatureAlgorithmName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getSignatureAlgorithmName")
            kw["aname"] = "_ICertificate_getSignatureAlgorithmName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getSignatureAlgorithmName_Holder"
            self.pyclass = Holder

    class ICertificate_getSignatureAlgorithmNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getSignatureAlgorithmNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getSignatureAlgorithmNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getSignatureAlgorithmNameResponse")
            kw["aname"] = "_ICertificate_getSignatureAlgorithmNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getSignatureAlgorithmNameResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getIssuerName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getIssuerName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getIssuerName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getIssuerName")
            kw["aname"] = "_ICertificate_getIssuerName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getIssuerName_Holder"
            self.pyclass = Holder

    class ICertificate_getIssuerNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getIssuerNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getIssuerNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getIssuerNameResponse")
            kw["aname"] = "_ICertificate_getIssuerNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "ICertificate_getIssuerNameResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getSubjectName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getSubjectName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getSubjectName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getSubjectName")
            kw["aname"] = "_ICertificate_getSubjectName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getSubjectName_Holder"
            self.pyclass = Holder

    class ICertificate_getSubjectNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getSubjectNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getSubjectNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getSubjectNameResponse")
            kw["aname"] = "_ICertificate_getSubjectNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "ICertificate_getSubjectNameResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getFriendlyName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getFriendlyName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getFriendlyName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getFriendlyName")
            kw["aname"] = "_ICertificate_getFriendlyName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getFriendlyName_Holder"
            self.pyclass = Holder

    class ICertificate_getFriendlyNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getFriendlyNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getFriendlyNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getFriendlyNameResponse")
            kw["aname"] = "_ICertificate_getFriendlyNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getFriendlyNameResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getValidityPeriodNotBefore_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getValidityPeriodNotBefore"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getValidityPeriodNotBefore_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getValidityPeriodNotBefore")
            kw["aname"] = "_ICertificate_getValidityPeriodNotBefore"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getValidityPeriodNotBefore_Holder"
            self.pyclass = Holder

    class ICertificate_getValidityPeriodNotBeforeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getValidityPeriodNotBeforeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getValidityPeriodNotBeforeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getValidityPeriodNotBeforeResponse")
            kw["aname"] = "_ICertificate_getValidityPeriodNotBeforeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getValidityPeriodNotBeforeResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getValidityPeriodNotAfter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getValidityPeriodNotAfter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getValidityPeriodNotAfter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getValidityPeriodNotAfter")
            kw["aname"] = "_ICertificate_getValidityPeriodNotAfter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getValidityPeriodNotAfter_Holder"
            self.pyclass = Holder

    class ICertificate_getValidityPeriodNotAfterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getValidityPeriodNotAfterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getValidityPeriodNotAfterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getValidityPeriodNotAfterResponse")
            kw["aname"] = "_ICertificate_getValidityPeriodNotAfterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getValidityPeriodNotAfterResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getPublicKeyAlgorithmOID_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getPublicKeyAlgorithmOID"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getPublicKeyAlgorithmOID_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getPublicKeyAlgorithmOID")
            kw["aname"] = "_ICertificate_getPublicKeyAlgorithmOID"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getPublicKeyAlgorithmOID_Holder"
            self.pyclass = Holder

    class ICertificate_getPublicKeyAlgorithmOIDResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getPublicKeyAlgorithmOIDResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getPublicKeyAlgorithmOIDResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getPublicKeyAlgorithmOIDResponse")
            kw["aname"] = "_ICertificate_getPublicKeyAlgorithmOIDResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getPublicKeyAlgorithmOIDResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getPublicKeyAlgorithm_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getPublicKeyAlgorithm"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getPublicKeyAlgorithm_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getPublicKeyAlgorithm")
            kw["aname"] = "_ICertificate_getPublicKeyAlgorithm"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getPublicKeyAlgorithm_Holder"
            self.pyclass = Holder

    class ICertificate_getPublicKeyAlgorithmResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getPublicKeyAlgorithmResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getPublicKeyAlgorithmResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getPublicKeyAlgorithmResponse")
            kw["aname"] = "_ICertificate_getPublicKeyAlgorithmResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getPublicKeyAlgorithmResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getSubjectPublicKey_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getSubjectPublicKey"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getSubjectPublicKey_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getSubjectPublicKey")
            kw["aname"] = "_ICertificate_getSubjectPublicKey"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getSubjectPublicKey_Holder"
            self.pyclass = Holder

    class ICertificate_getSubjectPublicKeyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getSubjectPublicKeyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getSubjectPublicKeyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getSubjectPublicKeyResponse")
            kw["aname"] = "_ICertificate_getSubjectPublicKeyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getSubjectPublicKeyResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getIssuerUniqueIdentifier_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getIssuerUniqueIdentifier"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getIssuerUniqueIdentifier_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getIssuerUniqueIdentifier")
            kw["aname"] = "_ICertificate_getIssuerUniqueIdentifier"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getIssuerUniqueIdentifier_Holder"
            self.pyclass = Holder

    class ICertificate_getIssuerUniqueIdentifierResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getIssuerUniqueIdentifierResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getIssuerUniqueIdentifierResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getIssuerUniqueIdentifierResponse")
            kw["aname"] = "_ICertificate_getIssuerUniqueIdentifierResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getIssuerUniqueIdentifierResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getSubjectUniqueIdentifier_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getSubjectUniqueIdentifier"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getSubjectUniqueIdentifier_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getSubjectUniqueIdentifier")
            kw["aname"] = "_ICertificate_getSubjectUniqueIdentifier"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getSubjectUniqueIdentifier_Holder"
            self.pyclass = Holder

    class ICertificate_getSubjectUniqueIdentifierResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getSubjectUniqueIdentifierResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getSubjectUniqueIdentifierResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getSubjectUniqueIdentifierResponse")
            kw["aname"] = "_ICertificate_getSubjectUniqueIdentifierResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getSubjectUniqueIdentifierResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getCertificateAuthority_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getCertificateAuthority"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getCertificateAuthority_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getCertificateAuthority")
            kw["aname"] = "_ICertificate_getCertificateAuthority"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getCertificateAuthority_Holder"
            self.pyclass = Holder

    class ICertificate_getCertificateAuthorityResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getCertificateAuthorityResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getCertificateAuthorityResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getCertificateAuthorityResponse")
            kw["aname"] = "_ICertificate_getCertificateAuthorityResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getCertificateAuthorityResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getKeyUsage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getKeyUsage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getKeyUsage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getKeyUsage")
            kw["aname"] = "_ICertificate_getKeyUsage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getKeyUsage_Holder"
            self.pyclass = Holder

    class ICertificate_getKeyUsageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getKeyUsageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getKeyUsageResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getKeyUsageResponse")
            kw["aname"] = "_ICertificate_getKeyUsageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getKeyUsageResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getExtendedKeyUsage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getExtendedKeyUsage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getExtendedKeyUsage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getExtendedKeyUsage")
            kw["aname"] = "_ICertificate_getExtendedKeyUsage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getExtendedKeyUsage_Holder"
            self.pyclass = Holder

    class ICertificate_getExtendedKeyUsageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getExtendedKeyUsageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getExtendedKeyUsageResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getExtendedKeyUsageResponse")
            kw["aname"] = "_ICertificate_getExtendedKeyUsageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "ICertificate_getExtendedKeyUsageResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getRawCertData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getRawCertData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getRawCertData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getRawCertData")
            kw["aname"] = "_ICertificate_getRawCertData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getRawCertData_Holder"
            self.pyclass = Holder

    class ICertificate_getRawCertDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getRawCertDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getRawCertDataResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getRawCertDataResponse")
            kw["aname"] = "_ICertificate_getRawCertDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getRawCertDataResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getSelfSigned_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getSelfSigned"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getSelfSigned_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getSelfSigned")
            kw["aname"] = "_ICertificate_getSelfSigned"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getSelfSigned_Holder"
            self.pyclass = Holder

    class ICertificate_getSelfSignedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getSelfSignedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getSelfSignedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getSelfSignedResponse")
            kw["aname"] = "_ICertificate_getSelfSignedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getSelfSignedResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getTrusted_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getTrusted"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getTrusted_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getTrusted")
            kw["aname"] = "_ICertificate_getTrusted"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getTrusted_Holder"
            self.pyclass = Holder

    class ICertificate_getTrustedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getTrustedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getTrustedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getTrustedResponse")
            kw["aname"] = "_ICertificate_getTrustedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getTrustedResponse_Holder"
            self.pyclass = Holder

    class ICertificate_getExpired_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getExpired"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getExpired_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getExpired")
            kw["aname"] = "_ICertificate_getExpired"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_getExpired_Holder"
            self.pyclass = Holder

    class ICertificate_getExpiredResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_getExpiredResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_getExpiredResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_getExpiredResponse")
            kw["aname"] = "_ICertificate_getExpiredResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_getExpiredResponse_Holder"
            self.pyclass = Holder

    class ICertificate_isCurrentlyExpired_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_isCurrentlyExpired"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_isCurrentlyExpired_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_isCurrentlyExpired")
            kw["aname"] = "_ICertificate_isCurrentlyExpired"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICertificate_isCurrentlyExpired_Holder"
            self.pyclass = Holder

    class ICertificate_isCurrentlyExpiredResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_isCurrentlyExpiredResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_isCurrentlyExpiredResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_isCurrentlyExpiredResponse")
            kw["aname"] = "_ICertificate_isCurrentlyExpiredResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_isCurrentlyExpiredResponse_Holder"
            self.pyclass = Holder

    class ICertificate_queryInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_queryInfo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_queryInfo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="what", aname="_what", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_queryInfo")
            kw["aname"] = "_ICertificate_queryInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._what = None
                    return
            Holder.__name__ = "ICertificate_queryInfo_Holder"
            self.pyclass = Holder

    class ICertificate_queryInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICertificate_queryInfoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICertificate_queryInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICertificate_queryInfoResponse")
            kw["aname"] = "_ICertificate_queryInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICertificate_queryInfoResponse_Holder"
            self.pyclass = Holder

    class IAppliance_getPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getPath")
            kw["aname"] = "_IAppliance_getPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAppliance_getPath_Holder"
            self.pyclass = Holder

    class IAppliance_getPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getPathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getPathResponse")
            kw["aname"] = "_IAppliance_getPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAppliance_getPathResponse_Holder"
            self.pyclass = Holder

    class IAppliance_getDisks_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getDisks"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getDisks_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getDisks")
            kw["aname"] = "_IAppliance_getDisks"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAppliance_getDisks_Holder"
            self.pyclass = Holder

    class IAppliance_getDisksResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getDisksResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getDisksResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getDisksResponse")
            kw["aname"] = "_IAppliance_getDisksResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IAppliance_getDisksResponse_Holder"
            self.pyclass = Holder

    class IAppliance_getVirtualSystemDescriptions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getVirtualSystemDescriptions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getVirtualSystemDescriptions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getVirtualSystemDescriptions")
            kw["aname"] = "_IAppliance_getVirtualSystemDescriptions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAppliance_getVirtualSystemDescriptions_Holder"
            self.pyclass = Holder

    class IAppliance_getVirtualSystemDescriptionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getVirtualSystemDescriptionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getVirtualSystemDescriptionsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getVirtualSystemDescriptionsResponse")
            kw["aname"] = "_IAppliance_getVirtualSystemDescriptionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IAppliance_getVirtualSystemDescriptionsResponse_Holder"
            self.pyclass = Holder

    class IAppliance_getMachines_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getMachines"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getMachines_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getMachines")
            kw["aname"] = "_IAppliance_getMachines"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAppliance_getMachines_Holder"
            self.pyclass = Holder

    class IAppliance_getMachinesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getMachinesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getMachinesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getMachinesResponse")
            kw["aname"] = "_IAppliance_getMachinesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IAppliance_getMachinesResponse_Holder"
            self.pyclass = Holder

    class IAppliance_getCertificate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getCertificate"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getCertificate_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getCertificate")
            kw["aname"] = "_IAppliance_getCertificate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAppliance_getCertificate_Holder"
            self.pyclass = Holder

    class IAppliance_getCertificateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getCertificateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getCertificateResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getCertificateResponse")
            kw["aname"] = "_IAppliance_getCertificateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAppliance_getCertificateResponse_Holder"
            self.pyclass = Holder

    class IAppliance_read_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_read"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_read_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="file", aname="_file", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_read")
            kw["aname"] = "_IAppliance_read"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._file = None
                    return
            Holder.__name__ = "IAppliance_read_Holder"
            self.pyclass = Holder

    class IAppliance_readResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_readResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_readResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_readResponse")
            kw["aname"] = "_IAppliance_readResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAppliance_readResponse_Holder"
            self.pyclass = Holder

    class IAppliance_interpret_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_interpret"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_interpret_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_interpret")
            kw["aname"] = "_IAppliance_interpret"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAppliance_interpret_Holder"
            self.pyclass = Holder

    class IAppliance_interpretResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_interpretResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_interpretResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_interpretResponse")
            kw["aname"] = "_IAppliance_interpretResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IAppliance_interpretResponse_Holder"
            self.pyclass = Holder

    class IAppliance_importMachines_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_importMachines"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_importMachines_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ImportOptions",lazy=False)(pname="options", aname="_options", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_importMachines")
            kw["aname"] = "_IAppliance_importMachines"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._options = []
                    return
            Holder.__name__ = "IAppliance_importMachines_Holder"
            self.pyclass = Holder

    class IAppliance_importMachinesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_importMachinesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_importMachinesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_importMachinesResponse")
            kw["aname"] = "_IAppliance_importMachinesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAppliance_importMachinesResponse_Holder"
            self.pyclass = Holder

    class IAppliance_createVFSExplorer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_createVFSExplorer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_createVFSExplorer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="URI", aname="_URI", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_createVFSExplorer")
            kw["aname"] = "_IAppliance_createVFSExplorer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._URI = None
                    return
            Holder.__name__ = "IAppliance_createVFSExplorer_Holder"
            self.pyclass = Holder

    class IAppliance_createVFSExplorerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_createVFSExplorerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_createVFSExplorerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_createVFSExplorerResponse")
            kw["aname"] = "_IAppliance_createVFSExplorerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAppliance_createVFSExplorerResponse_Holder"
            self.pyclass = Holder

    class IAppliance_write_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_write"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_write_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ExportOptions",lazy=False)(pname="options", aname="_options", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_write")
            kw["aname"] = "_IAppliance_write"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._format = None
                    self._options = []
                    self._path = None
                    return
            Holder.__name__ = "IAppliance_write_Holder"
            self.pyclass = Holder

    class IAppliance_writeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_writeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_writeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_writeResponse")
            kw["aname"] = "_IAppliance_writeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAppliance_writeResponse_Holder"
            self.pyclass = Holder

    class IAppliance_getWarnings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getWarnings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getWarnings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getWarnings")
            kw["aname"] = "_IAppliance_getWarnings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAppliance_getWarnings_Holder"
            self.pyclass = Holder

    class IAppliance_getWarningsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getWarningsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getWarningsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getWarningsResponse")
            kw["aname"] = "_IAppliance_getWarningsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IAppliance_getWarningsResponse_Holder"
            self.pyclass = Holder

    class IAppliance_getPasswordIds_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getPasswordIds"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getPasswordIds_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getPasswordIds")
            kw["aname"] = "_IAppliance_getPasswordIds"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAppliance_getPasswordIds_Holder"
            self.pyclass = Holder

    class IAppliance_getPasswordIdsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getPasswordIdsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getPasswordIdsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getPasswordIdsResponse")
            kw["aname"] = "_IAppliance_getPasswordIdsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IAppliance_getPasswordIdsResponse_Holder"
            self.pyclass = Holder

    class IAppliance_getMediumIdsForPasswordId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getMediumIdsForPasswordId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getMediumIdsForPasswordId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="passwordId", aname="_passwordId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getMediumIdsForPasswordId")
            kw["aname"] = "_IAppliance_getMediumIdsForPasswordId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._passwordId = None
                    return
            Holder.__name__ = "IAppliance_getMediumIdsForPasswordId_Holder"
            self.pyclass = Holder

    class IAppliance_getMediumIdsForPasswordIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getMediumIdsForPasswordIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getMediumIdsForPasswordIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getMediumIdsForPasswordIdResponse")
            kw["aname"] = "_IAppliance_getMediumIdsForPasswordIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IAppliance_getMediumIdsForPasswordIdResponse_Holder"
            self.pyclass = Holder

    class IAppliance_addPasswords_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_addPasswords"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_addPasswords_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="identifiers", aname="_identifiers", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="passwords", aname="_passwords", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_addPasswords")
            kw["aname"] = "_IAppliance_addPasswords"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._identifiers = []
                    self._passwords = []
                    return
            Holder.__name__ = "IAppliance_addPasswords_Holder"
            self.pyclass = Holder

    class IAppliance_addPasswordsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_addPasswordsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_addPasswordsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_addPasswordsResponse")
            kw["aname"] = "_IAppliance_addPasswordsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IAppliance_addPasswordsResponse_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getCount")
            kw["aname"] = "_IVirtualSystemDescription_getCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualSystemDescription_getCount_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getCountResponse")
            kw["aname"] = "_IVirtualSystemDescription_getCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualSystemDescription_getCountResponse_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getDescription")
            kw["aname"] = "_IVirtualSystemDescription_getDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualSystemDescription_getDescription_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getDescriptionResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","VirtualSystemDescriptionType",lazy=False)(pname="types", aname="_types", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="refs", aname="_refs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="OVFValues", aname="_OVFValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="VBoxValues", aname="_VBoxValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="extraConfigValues", aname="_extraConfigValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getDescriptionResponse")
            kw["aname"] = "_IVirtualSystemDescription_getDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._types = []
                    self._refs = []
                    self._OVFValues = []
                    self._VBoxValues = []
                    self._extraConfigValues = []
                    return
            Holder.__name__ = "IVirtualSystemDescription_getDescriptionResponse_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getDescriptionByType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getDescriptionByType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getDescriptionByType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","VirtualSystemDescriptionType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getDescriptionByType")
            kw["aname"] = "_IVirtualSystemDescription_getDescriptionByType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._type = None
                    return
            Holder.__name__ = "IVirtualSystemDescription_getDescriptionByType_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getDescriptionByTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getDescriptionByTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getDescriptionByTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","VirtualSystemDescriptionType",lazy=False)(pname="types", aname="_types", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="refs", aname="_refs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="OVFValues", aname="_OVFValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="VBoxValues", aname="_VBoxValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="extraConfigValues", aname="_extraConfigValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getDescriptionByTypeResponse")
            kw["aname"] = "_IVirtualSystemDescription_getDescriptionByTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._types = []
                    self._refs = []
                    self._OVFValues = []
                    self._VBoxValues = []
                    self._extraConfigValues = []
                    return
            Holder.__name__ = "IVirtualSystemDescription_getDescriptionByTypeResponse_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_removeDescriptionByType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_removeDescriptionByType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_removeDescriptionByType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","VirtualSystemDescriptionType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_removeDescriptionByType")
            kw["aname"] = "_IVirtualSystemDescription_removeDescriptionByType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._type = None
                    return
            Holder.__name__ = "IVirtualSystemDescription_removeDescriptionByType_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_removeDescriptionByTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_removeDescriptionByTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_removeDescriptionByTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_removeDescriptionByTypeResponse")
            kw["aname"] = "_IVirtualSystemDescription_removeDescriptionByTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualSystemDescription_removeDescriptionByTypeResponse_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getValuesByType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getValuesByType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getValuesByType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","VirtualSystemDescriptionType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","VirtualSystemDescriptionValueType",lazy=False)(pname="which", aname="_which", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getValuesByType")
            kw["aname"] = "_IVirtualSystemDescription_getValuesByType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._type = None
                    self._which = None
                    return
            Holder.__name__ = "IVirtualSystemDescription_getValuesByType_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getValuesByTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getValuesByTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getValuesByTypeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getValuesByTypeResponse")
            kw["aname"] = "_IVirtualSystemDescription_getValuesByTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualSystemDescription_getValuesByTypeResponse_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_setFinalValues_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_setFinalValues"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_setFinalValues_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="VBoxValues", aname="_VBoxValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="extraConfigValues", aname="_extraConfigValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_setFinalValues")
            kw["aname"] = "_IVirtualSystemDescription_setFinalValues"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = []
                    self._VBoxValues = []
                    self._extraConfigValues = []
                    return
            Holder.__name__ = "IVirtualSystemDescription_setFinalValues_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_setFinalValuesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_setFinalValuesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_setFinalValuesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_setFinalValuesResponse")
            kw["aname"] = "_IVirtualSystemDescription_setFinalValuesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualSystemDescription_setFinalValuesResponse_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_addDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_addDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_addDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","VirtualSystemDescriptionType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="VBoxValue", aname="_VBoxValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="extraConfigValue", aname="_extraConfigValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_addDescription")
            kw["aname"] = "_IVirtualSystemDescription_addDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._type = None
                    self._VBoxValue = None
                    self._extraConfigValue = None
                    return
            Holder.__name__ = "IVirtualSystemDescription_addDescription_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_addDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_addDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_addDescriptionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_addDescriptionResponse")
            kw["aname"] = "_IVirtualSystemDescription_addDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualSystemDescription_addDescriptionResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getIsoPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getIsoPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getIsoPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getIsoPath")
            kw["aname"] = "_IUnattended_getIsoPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getIsoPath_Holder"
            self.pyclass = Holder

    class IUnattended_getIsoPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getIsoPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getIsoPathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getIsoPathResponse")
            kw["aname"] = "_IUnattended_getIsoPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getIsoPathResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setIsoPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setIsoPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setIsoPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="isoPath", aname="_isoPath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setIsoPath")
            kw["aname"] = "_IUnattended_setIsoPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._isoPath = None
                    return
            Holder.__name__ = "IUnattended_setIsoPath_Holder"
            self.pyclass = Holder

    class IUnattended_setIsoPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setIsoPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setIsoPathResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setIsoPathResponse")
            kw["aname"] = "_IUnattended_setIsoPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setIsoPathResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getMachine")
            kw["aname"] = "_IUnattended_getMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getMachine_Holder"
            self.pyclass = Holder

    class IUnattended_getMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getMachineResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getMachineResponse")
            kw["aname"] = "_IUnattended_getMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getMachineResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="machine", aname="_machine", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setMachine")
            kw["aname"] = "_IUnattended_setMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._machine = None
                    return
            Holder.__name__ = "IUnattended_setMachine_Holder"
            self.pyclass = Holder

    class IUnattended_setMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setMachineResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setMachineResponse")
            kw["aname"] = "_IUnattended_setMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setMachineResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getUser"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getUser_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getUser")
            kw["aname"] = "_IUnattended_getUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getUser_Holder"
            self.pyclass = Holder

    class IUnattended_getUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getUserResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getUserResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getUserResponse")
            kw["aname"] = "_IUnattended_getUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getUserResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setUser"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setUser_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="user", aname="_user", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setUser")
            kw["aname"] = "_IUnattended_setUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._user = None
                    return
            Holder.__name__ = "IUnattended_setUser_Holder"
            self.pyclass = Holder

    class IUnattended_setUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setUserResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setUserResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setUserResponse")
            kw["aname"] = "_IUnattended_setUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setUserResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getPassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getPassword"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getPassword_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getPassword")
            kw["aname"] = "_IUnattended_getPassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getPassword_Holder"
            self.pyclass = Holder

    class IUnattended_getPasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getPasswordResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getPasswordResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getPasswordResponse")
            kw["aname"] = "_IUnattended_getPasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getPasswordResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setPassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setPassword"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setPassword_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setPassword")
            kw["aname"] = "_IUnattended_setPassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._password = None
                    return
            Holder.__name__ = "IUnattended_setPassword_Holder"
            self.pyclass = Holder

    class IUnattended_setPasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setPasswordResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setPasswordResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setPasswordResponse")
            kw["aname"] = "_IUnattended_setPasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setPasswordResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getFullUserName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getFullUserName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getFullUserName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getFullUserName")
            kw["aname"] = "_IUnattended_getFullUserName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getFullUserName_Holder"
            self.pyclass = Holder

    class IUnattended_getFullUserNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getFullUserNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getFullUserNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getFullUserNameResponse")
            kw["aname"] = "_IUnattended_getFullUserNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getFullUserNameResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setFullUserName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setFullUserName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setFullUserName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fullUserName", aname="_fullUserName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setFullUserName")
            kw["aname"] = "_IUnattended_setFullUserName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._fullUserName = None
                    return
            Holder.__name__ = "IUnattended_setFullUserName_Holder"
            self.pyclass = Holder

    class IUnattended_setFullUserNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setFullUserNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setFullUserNameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setFullUserNameResponse")
            kw["aname"] = "_IUnattended_setFullUserNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setFullUserNameResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getProductKey_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getProductKey"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getProductKey_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getProductKey")
            kw["aname"] = "_IUnattended_getProductKey"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getProductKey_Holder"
            self.pyclass = Holder

    class IUnattended_getProductKeyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getProductKeyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getProductKeyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getProductKeyResponse")
            kw["aname"] = "_IUnattended_getProductKeyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getProductKeyResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setProductKey_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setProductKey"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setProductKey_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="productKey", aname="_productKey", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setProductKey")
            kw["aname"] = "_IUnattended_setProductKey"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._productKey = None
                    return
            Holder.__name__ = "IUnattended_setProductKey_Holder"
            self.pyclass = Holder

    class IUnattended_setProductKeyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setProductKeyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setProductKeyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setProductKeyResponse")
            kw["aname"] = "_IUnattended_setProductKeyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setProductKeyResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getAdditionsIsoPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getAdditionsIsoPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getAdditionsIsoPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getAdditionsIsoPath")
            kw["aname"] = "_IUnattended_getAdditionsIsoPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getAdditionsIsoPath_Holder"
            self.pyclass = Holder

    class IUnattended_getAdditionsIsoPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getAdditionsIsoPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getAdditionsIsoPathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getAdditionsIsoPathResponse")
            kw["aname"] = "_IUnattended_getAdditionsIsoPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getAdditionsIsoPathResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setAdditionsIsoPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setAdditionsIsoPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setAdditionsIsoPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="additionsIsoPath", aname="_additionsIsoPath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setAdditionsIsoPath")
            kw["aname"] = "_IUnattended_setAdditionsIsoPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._additionsIsoPath = None
                    return
            Holder.__name__ = "IUnattended_setAdditionsIsoPath_Holder"
            self.pyclass = Holder

    class IUnattended_setAdditionsIsoPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setAdditionsIsoPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setAdditionsIsoPathResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setAdditionsIsoPathResponse")
            kw["aname"] = "_IUnattended_setAdditionsIsoPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setAdditionsIsoPathResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getInstallGuestAdditions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getInstallGuestAdditions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getInstallGuestAdditions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getInstallGuestAdditions")
            kw["aname"] = "_IUnattended_getInstallGuestAdditions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getInstallGuestAdditions_Holder"
            self.pyclass = Holder

    class IUnattended_getInstallGuestAdditionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getInstallGuestAdditionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getInstallGuestAdditionsResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getInstallGuestAdditionsResponse")
            kw["aname"] = "_IUnattended_getInstallGuestAdditionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getInstallGuestAdditionsResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setInstallGuestAdditions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setInstallGuestAdditions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setInstallGuestAdditions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="installGuestAdditions", aname="_installGuestAdditions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setInstallGuestAdditions")
            kw["aname"] = "_IUnattended_setInstallGuestAdditions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._installGuestAdditions = None
                    return
            Holder.__name__ = "IUnattended_setInstallGuestAdditions_Holder"
            self.pyclass = Holder

    class IUnattended_setInstallGuestAdditionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setInstallGuestAdditionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setInstallGuestAdditionsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setInstallGuestAdditionsResponse")
            kw["aname"] = "_IUnattended_setInstallGuestAdditionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setInstallGuestAdditionsResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getValidationKitIsoPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getValidationKitIsoPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getValidationKitIsoPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getValidationKitIsoPath")
            kw["aname"] = "_IUnattended_getValidationKitIsoPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getValidationKitIsoPath_Holder"
            self.pyclass = Holder

    class IUnattended_getValidationKitIsoPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getValidationKitIsoPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getValidationKitIsoPathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getValidationKitIsoPathResponse")
            kw["aname"] = "_IUnattended_getValidationKitIsoPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getValidationKitIsoPathResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setValidationKitIsoPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setValidationKitIsoPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setValidationKitIsoPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="validationKitIsoPath", aname="_validationKitIsoPath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setValidationKitIsoPath")
            kw["aname"] = "_IUnattended_setValidationKitIsoPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._validationKitIsoPath = None
                    return
            Holder.__name__ = "IUnattended_setValidationKitIsoPath_Holder"
            self.pyclass = Holder

    class IUnattended_setValidationKitIsoPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setValidationKitIsoPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setValidationKitIsoPathResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setValidationKitIsoPathResponse")
            kw["aname"] = "_IUnattended_setValidationKitIsoPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setValidationKitIsoPathResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getInstallTestExecService_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getInstallTestExecService"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getInstallTestExecService_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getInstallTestExecService")
            kw["aname"] = "_IUnattended_getInstallTestExecService"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getInstallTestExecService_Holder"
            self.pyclass = Holder

    class IUnattended_getInstallTestExecServiceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getInstallTestExecServiceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getInstallTestExecServiceResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getInstallTestExecServiceResponse")
            kw["aname"] = "_IUnattended_getInstallTestExecServiceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getInstallTestExecServiceResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setInstallTestExecService_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setInstallTestExecService"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setInstallTestExecService_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="installTestExecService", aname="_installTestExecService", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setInstallTestExecService")
            kw["aname"] = "_IUnattended_setInstallTestExecService"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._installTestExecService = None
                    return
            Holder.__name__ = "IUnattended_setInstallTestExecService_Holder"
            self.pyclass = Holder

    class IUnattended_setInstallTestExecServiceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setInstallTestExecServiceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setInstallTestExecServiceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setInstallTestExecServiceResponse")
            kw["aname"] = "_IUnattended_setInstallTestExecServiceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setInstallTestExecServiceResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getTimeZone_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getTimeZone"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getTimeZone_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getTimeZone")
            kw["aname"] = "_IUnattended_getTimeZone"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getTimeZone_Holder"
            self.pyclass = Holder

    class IUnattended_getTimeZoneResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getTimeZoneResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getTimeZoneResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getTimeZoneResponse")
            kw["aname"] = "_IUnattended_getTimeZoneResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getTimeZoneResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setTimeZone_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setTimeZone"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setTimeZone_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timeZone", aname="_timeZone", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setTimeZone")
            kw["aname"] = "_IUnattended_setTimeZone"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._timeZone = None
                    return
            Holder.__name__ = "IUnattended_setTimeZone_Holder"
            self.pyclass = Holder

    class IUnattended_setTimeZoneResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setTimeZoneResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setTimeZoneResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setTimeZoneResponse")
            kw["aname"] = "_IUnattended_setTimeZoneResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setTimeZoneResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getLocale_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getLocale"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getLocale_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getLocale")
            kw["aname"] = "_IUnattended_getLocale"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getLocale_Holder"
            self.pyclass = Holder

    class IUnattended_getLocaleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getLocaleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getLocaleResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getLocaleResponse")
            kw["aname"] = "_IUnattended_getLocaleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getLocaleResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setLocale_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setLocale"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setLocale_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="locale", aname="_locale", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setLocale")
            kw["aname"] = "_IUnattended_setLocale"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._locale = None
                    return
            Holder.__name__ = "IUnattended_setLocale_Holder"
            self.pyclass = Holder

    class IUnattended_setLocaleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setLocaleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setLocaleResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setLocaleResponse")
            kw["aname"] = "_IUnattended_setLocaleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setLocaleResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getLanguage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getLanguage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getLanguage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getLanguage")
            kw["aname"] = "_IUnattended_getLanguage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getLanguage_Holder"
            self.pyclass = Holder

    class IUnattended_getLanguageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getLanguageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getLanguageResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getLanguageResponse")
            kw["aname"] = "_IUnattended_getLanguageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getLanguageResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setLanguage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setLanguage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setLanguage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="language", aname="_language", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setLanguage")
            kw["aname"] = "_IUnattended_setLanguage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._language = None
                    return
            Holder.__name__ = "IUnattended_setLanguage_Holder"
            self.pyclass = Holder

    class IUnattended_setLanguageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setLanguageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setLanguageResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setLanguageResponse")
            kw["aname"] = "_IUnattended_setLanguageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setLanguageResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getCountry_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getCountry"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getCountry_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getCountry")
            kw["aname"] = "_IUnattended_getCountry"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getCountry_Holder"
            self.pyclass = Holder

    class IUnattended_getCountryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getCountryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getCountryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getCountryResponse")
            kw["aname"] = "_IUnattended_getCountryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getCountryResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setCountry_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setCountry"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setCountry_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="country", aname="_country", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setCountry")
            kw["aname"] = "_IUnattended_setCountry"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._country = None
                    return
            Holder.__name__ = "IUnattended_setCountry_Holder"
            self.pyclass = Holder

    class IUnattended_setCountryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setCountryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setCountryResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setCountryResponse")
            kw["aname"] = "_IUnattended_setCountryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setCountryResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getProxy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getProxy"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getProxy_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getProxy")
            kw["aname"] = "_IUnattended_getProxy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getProxy_Holder"
            self.pyclass = Holder

    class IUnattended_getProxyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getProxyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getProxyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getProxyResponse")
            kw["aname"] = "_IUnattended_getProxyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getProxyResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setProxy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setProxy"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setProxy_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="proxy", aname="_proxy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setProxy")
            kw["aname"] = "_IUnattended_setProxy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._proxy = None
                    return
            Holder.__name__ = "IUnattended_setProxy_Holder"
            self.pyclass = Holder

    class IUnattended_setProxyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setProxyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setProxyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setProxyResponse")
            kw["aname"] = "_IUnattended_setProxyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setProxyResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getPackageSelectionAdjustments_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getPackageSelectionAdjustments"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getPackageSelectionAdjustments_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getPackageSelectionAdjustments")
            kw["aname"] = "_IUnattended_getPackageSelectionAdjustments"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getPackageSelectionAdjustments_Holder"
            self.pyclass = Holder

    class IUnattended_getPackageSelectionAdjustmentsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getPackageSelectionAdjustmentsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getPackageSelectionAdjustmentsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getPackageSelectionAdjustmentsResponse")
            kw["aname"] = "_IUnattended_getPackageSelectionAdjustmentsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getPackageSelectionAdjustmentsResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setPackageSelectionAdjustments_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setPackageSelectionAdjustments"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setPackageSelectionAdjustments_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="packageSelectionAdjustments", aname="_packageSelectionAdjustments", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setPackageSelectionAdjustments")
            kw["aname"] = "_IUnattended_setPackageSelectionAdjustments"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._packageSelectionAdjustments = None
                    return
            Holder.__name__ = "IUnattended_setPackageSelectionAdjustments_Holder"
            self.pyclass = Holder

    class IUnattended_setPackageSelectionAdjustmentsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setPackageSelectionAdjustmentsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setPackageSelectionAdjustmentsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setPackageSelectionAdjustmentsResponse")
            kw["aname"] = "_IUnattended_setPackageSelectionAdjustmentsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setPackageSelectionAdjustmentsResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getHostname_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getHostname"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getHostname_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getHostname")
            kw["aname"] = "_IUnattended_getHostname"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getHostname_Holder"
            self.pyclass = Holder

    class IUnattended_getHostnameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getHostnameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getHostnameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getHostnameResponse")
            kw["aname"] = "_IUnattended_getHostnameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getHostnameResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setHostname_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setHostname"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setHostname_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostname", aname="_hostname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setHostname")
            kw["aname"] = "_IUnattended_setHostname"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hostname = None
                    return
            Holder.__name__ = "IUnattended_setHostname_Holder"
            self.pyclass = Holder

    class IUnattended_setHostnameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setHostnameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setHostnameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setHostnameResponse")
            kw["aname"] = "_IUnattended_setHostnameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setHostnameResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getAuxiliaryBasePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getAuxiliaryBasePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getAuxiliaryBasePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getAuxiliaryBasePath")
            kw["aname"] = "_IUnattended_getAuxiliaryBasePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getAuxiliaryBasePath_Holder"
            self.pyclass = Holder

    class IUnattended_getAuxiliaryBasePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getAuxiliaryBasePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getAuxiliaryBasePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getAuxiliaryBasePathResponse")
            kw["aname"] = "_IUnattended_getAuxiliaryBasePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getAuxiliaryBasePathResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setAuxiliaryBasePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setAuxiliaryBasePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setAuxiliaryBasePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="auxiliaryBasePath", aname="_auxiliaryBasePath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setAuxiliaryBasePath")
            kw["aname"] = "_IUnattended_setAuxiliaryBasePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._auxiliaryBasePath = None
                    return
            Holder.__name__ = "IUnattended_setAuxiliaryBasePath_Holder"
            self.pyclass = Holder

    class IUnattended_setAuxiliaryBasePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setAuxiliaryBasePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setAuxiliaryBasePathResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setAuxiliaryBasePathResponse")
            kw["aname"] = "_IUnattended_setAuxiliaryBasePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setAuxiliaryBasePathResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getImageIndex_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getImageIndex"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getImageIndex_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getImageIndex")
            kw["aname"] = "_IUnattended_getImageIndex"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getImageIndex_Holder"
            self.pyclass = Holder

    class IUnattended_getImageIndexResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getImageIndexResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getImageIndexResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getImageIndexResponse")
            kw["aname"] = "_IUnattended_getImageIndexResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getImageIndexResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setImageIndex_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setImageIndex"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setImageIndex_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="imageIndex", aname="_imageIndex", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setImageIndex")
            kw["aname"] = "_IUnattended_setImageIndex"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._imageIndex = None
                    return
            Holder.__name__ = "IUnattended_setImageIndex_Holder"
            self.pyclass = Holder

    class IUnattended_setImageIndexResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setImageIndexResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setImageIndexResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setImageIndexResponse")
            kw["aname"] = "_IUnattended_setImageIndexResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setImageIndexResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getScriptTemplatePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getScriptTemplatePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getScriptTemplatePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getScriptTemplatePath")
            kw["aname"] = "_IUnattended_getScriptTemplatePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getScriptTemplatePath_Holder"
            self.pyclass = Holder

    class IUnattended_getScriptTemplatePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getScriptTemplatePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getScriptTemplatePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getScriptTemplatePathResponse")
            kw["aname"] = "_IUnattended_getScriptTemplatePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getScriptTemplatePathResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setScriptTemplatePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setScriptTemplatePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setScriptTemplatePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="scriptTemplatePath", aname="_scriptTemplatePath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setScriptTemplatePath")
            kw["aname"] = "_IUnattended_setScriptTemplatePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._scriptTemplatePath = None
                    return
            Holder.__name__ = "IUnattended_setScriptTemplatePath_Holder"
            self.pyclass = Holder

    class IUnattended_setScriptTemplatePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setScriptTemplatePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setScriptTemplatePathResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setScriptTemplatePathResponse")
            kw["aname"] = "_IUnattended_setScriptTemplatePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setScriptTemplatePathResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getPostInstallScriptTemplatePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getPostInstallScriptTemplatePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getPostInstallScriptTemplatePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getPostInstallScriptTemplatePath")
            kw["aname"] = "_IUnattended_getPostInstallScriptTemplatePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getPostInstallScriptTemplatePath_Holder"
            self.pyclass = Holder

    class IUnattended_getPostInstallScriptTemplatePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getPostInstallScriptTemplatePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getPostInstallScriptTemplatePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getPostInstallScriptTemplatePathResponse")
            kw["aname"] = "_IUnattended_getPostInstallScriptTemplatePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getPostInstallScriptTemplatePathResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setPostInstallScriptTemplatePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setPostInstallScriptTemplatePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setPostInstallScriptTemplatePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="postInstallScriptTemplatePath", aname="_postInstallScriptTemplatePath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setPostInstallScriptTemplatePath")
            kw["aname"] = "_IUnattended_setPostInstallScriptTemplatePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._postInstallScriptTemplatePath = None
                    return
            Holder.__name__ = "IUnattended_setPostInstallScriptTemplatePath_Holder"
            self.pyclass = Holder

    class IUnattended_setPostInstallScriptTemplatePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setPostInstallScriptTemplatePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setPostInstallScriptTemplatePathResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setPostInstallScriptTemplatePathResponse")
            kw["aname"] = "_IUnattended_setPostInstallScriptTemplatePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setPostInstallScriptTemplatePathResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getPostInstallCommand_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getPostInstallCommand"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getPostInstallCommand_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getPostInstallCommand")
            kw["aname"] = "_IUnattended_getPostInstallCommand"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getPostInstallCommand_Holder"
            self.pyclass = Holder

    class IUnattended_getPostInstallCommandResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getPostInstallCommandResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getPostInstallCommandResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getPostInstallCommandResponse")
            kw["aname"] = "_IUnattended_getPostInstallCommandResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getPostInstallCommandResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setPostInstallCommand_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setPostInstallCommand"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setPostInstallCommand_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="postInstallCommand", aname="_postInstallCommand", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setPostInstallCommand")
            kw["aname"] = "_IUnattended_setPostInstallCommand"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._postInstallCommand = None
                    return
            Holder.__name__ = "IUnattended_setPostInstallCommand_Holder"
            self.pyclass = Holder

    class IUnattended_setPostInstallCommandResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setPostInstallCommandResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setPostInstallCommandResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setPostInstallCommandResponse")
            kw["aname"] = "_IUnattended_setPostInstallCommandResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setPostInstallCommandResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getExtraInstallKernelParameters_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getExtraInstallKernelParameters"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getExtraInstallKernelParameters_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getExtraInstallKernelParameters")
            kw["aname"] = "_IUnattended_getExtraInstallKernelParameters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getExtraInstallKernelParameters_Holder"
            self.pyclass = Holder

    class IUnattended_getExtraInstallKernelParametersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getExtraInstallKernelParametersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getExtraInstallKernelParametersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getExtraInstallKernelParametersResponse")
            kw["aname"] = "_IUnattended_getExtraInstallKernelParametersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getExtraInstallKernelParametersResponse_Holder"
            self.pyclass = Holder

    class IUnattended_setExtraInstallKernelParameters_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setExtraInstallKernelParameters"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setExtraInstallKernelParameters_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="extraInstallKernelParameters", aname="_extraInstallKernelParameters", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setExtraInstallKernelParameters")
            kw["aname"] = "_IUnattended_setExtraInstallKernelParameters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._extraInstallKernelParameters = None
                    return
            Holder.__name__ = "IUnattended_setExtraInstallKernelParameters_Holder"
            self.pyclass = Holder

    class IUnattended_setExtraInstallKernelParametersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_setExtraInstallKernelParametersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_setExtraInstallKernelParametersResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_setExtraInstallKernelParametersResponse")
            kw["aname"] = "_IUnattended_setExtraInstallKernelParametersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_setExtraInstallKernelParametersResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getDetectedOSTypeId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getDetectedOSTypeId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getDetectedOSTypeId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getDetectedOSTypeId")
            kw["aname"] = "_IUnattended_getDetectedOSTypeId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getDetectedOSTypeId_Holder"
            self.pyclass = Holder

    class IUnattended_getDetectedOSTypeIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getDetectedOSTypeIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getDetectedOSTypeIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getDetectedOSTypeIdResponse")
            kw["aname"] = "_IUnattended_getDetectedOSTypeIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getDetectedOSTypeIdResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getDetectedOSVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getDetectedOSVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getDetectedOSVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getDetectedOSVersion")
            kw["aname"] = "_IUnattended_getDetectedOSVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getDetectedOSVersion_Holder"
            self.pyclass = Holder

    class IUnattended_getDetectedOSVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getDetectedOSVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getDetectedOSVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getDetectedOSVersionResponse")
            kw["aname"] = "_IUnattended_getDetectedOSVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getDetectedOSVersionResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getDetectedOSFlavor_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getDetectedOSFlavor"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getDetectedOSFlavor_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getDetectedOSFlavor")
            kw["aname"] = "_IUnattended_getDetectedOSFlavor"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getDetectedOSFlavor_Holder"
            self.pyclass = Holder

    class IUnattended_getDetectedOSFlavorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getDetectedOSFlavorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getDetectedOSFlavorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getDetectedOSFlavorResponse")
            kw["aname"] = "_IUnattended_getDetectedOSFlavorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getDetectedOSFlavorResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getDetectedOSLanguages_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getDetectedOSLanguages"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getDetectedOSLanguages_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getDetectedOSLanguages")
            kw["aname"] = "_IUnattended_getDetectedOSLanguages"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getDetectedOSLanguages_Holder"
            self.pyclass = Holder

    class IUnattended_getDetectedOSLanguagesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getDetectedOSLanguagesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getDetectedOSLanguagesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getDetectedOSLanguagesResponse")
            kw["aname"] = "_IUnattended_getDetectedOSLanguagesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getDetectedOSLanguagesResponse_Holder"
            self.pyclass = Holder

    class IUnattended_getDetectedOSHints_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getDetectedOSHints"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getDetectedOSHints_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getDetectedOSHints")
            kw["aname"] = "_IUnattended_getDetectedOSHints"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_getDetectedOSHints_Holder"
            self.pyclass = Holder

    class IUnattended_getDetectedOSHintsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_getDetectedOSHintsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_getDetectedOSHintsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_getDetectedOSHintsResponse")
            kw["aname"] = "_IUnattended_getDetectedOSHintsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUnattended_getDetectedOSHintsResponse_Holder"
            self.pyclass = Holder

    class IUnattended_detectIsoOS_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_detectIsoOS"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_detectIsoOS_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_detectIsoOS")
            kw["aname"] = "_IUnattended_detectIsoOS"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_detectIsoOS_Holder"
            self.pyclass = Holder

    class IUnattended_detectIsoOSResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_detectIsoOSResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_detectIsoOSResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_detectIsoOSResponse")
            kw["aname"] = "_IUnattended_detectIsoOSResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_detectIsoOSResponse_Holder"
            self.pyclass = Holder

    class IUnattended_prepare_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_prepare"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_prepare_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_prepare")
            kw["aname"] = "_IUnattended_prepare"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_prepare_Holder"
            self.pyclass = Holder

    class IUnattended_prepareResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_prepareResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_prepareResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_prepareResponse")
            kw["aname"] = "_IUnattended_prepareResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_prepareResponse_Holder"
            self.pyclass = Holder

    class IUnattended_constructMedia_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_constructMedia"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_constructMedia_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_constructMedia")
            kw["aname"] = "_IUnattended_constructMedia"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_constructMedia_Holder"
            self.pyclass = Holder

    class IUnattended_constructMediaResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_constructMediaResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_constructMediaResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_constructMediaResponse")
            kw["aname"] = "_IUnattended_constructMediaResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_constructMediaResponse_Holder"
            self.pyclass = Holder

    class IUnattended_reconfigureVM_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_reconfigureVM"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_reconfigureVM_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_reconfigureVM")
            kw["aname"] = "_IUnattended_reconfigureVM"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_reconfigureVM_Holder"
            self.pyclass = Holder

    class IUnattended_reconfigureVMResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_reconfigureVMResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_reconfigureVMResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_reconfigureVMResponse")
            kw["aname"] = "_IUnattended_reconfigureVMResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_reconfigureVMResponse_Holder"
            self.pyclass = Holder

    class IUnattended_done_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_done"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_done_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_done")
            kw["aname"] = "_IUnattended_done"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUnattended_done_Holder"
            self.pyclass = Holder

    class IUnattended_doneResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUnattended_doneResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUnattended_doneResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUnattended_doneResponse")
            kw["aname"] = "_IUnattended_doneResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUnattended_doneResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoFadeIn_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoFadeIn"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoFadeIn_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoFadeIn")
            kw["aname"] = "_IBIOSSettings_getLogoFadeIn"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoFadeIn_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoFadeInResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoFadeInResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoFadeInResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoFadeInResponse")
            kw["aname"] = "_IBIOSSettings_getLogoFadeInResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoFadeInResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoFadeIn_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoFadeIn"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoFadeIn_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="logoFadeIn", aname="_logoFadeIn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoFadeIn")
            kw["aname"] = "_IBIOSSettings_setLogoFadeIn"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logoFadeIn = None
                    return
            Holder.__name__ = "IBIOSSettings_setLogoFadeIn_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoFadeInResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoFadeInResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoFadeInResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoFadeInResponse")
            kw["aname"] = "_IBIOSSettings_setLogoFadeInResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setLogoFadeInResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoFadeOut_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoFadeOut"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoFadeOut_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoFadeOut")
            kw["aname"] = "_IBIOSSettings_getLogoFadeOut"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoFadeOut_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoFadeOutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoFadeOutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoFadeOutResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoFadeOutResponse")
            kw["aname"] = "_IBIOSSettings_getLogoFadeOutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoFadeOutResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoFadeOut_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoFadeOut"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoFadeOut_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="logoFadeOut", aname="_logoFadeOut", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoFadeOut")
            kw["aname"] = "_IBIOSSettings_setLogoFadeOut"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logoFadeOut = None
                    return
            Holder.__name__ = "IBIOSSettings_setLogoFadeOut_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoFadeOutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoFadeOutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoFadeOutResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoFadeOutResponse")
            kw["aname"] = "_IBIOSSettings_setLogoFadeOutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setLogoFadeOutResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoDisplayTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoDisplayTime"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoDisplayTime_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoDisplayTime")
            kw["aname"] = "_IBIOSSettings_getLogoDisplayTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoDisplayTime_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoDisplayTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoDisplayTimeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoDisplayTimeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoDisplayTimeResponse")
            kw["aname"] = "_IBIOSSettings_getLogoDisplayTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoDisplayTimeResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoDisplayTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoDisplayTime"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoDisplayTime_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="logoDisplayTime", aname="_logoDisplayTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoDisplayTime")
            kw["aname"] = "_IBIOSSettings_setLogoDisplayTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logoDisplayTime = None
                    return
            Holder.__name__ = "IBIOSSettings_setLogoDisplayTime_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoDisplayTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoDisplayTimeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoDisplayTimeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoDisplayTimeResponse")
            kw["aname"] = "_IBIOSSettings_setLogoDisplayTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setLogoDisplayTimeResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoImagePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoImagePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoImagePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoImagePath")
            kw["aname"] = "_IBIOSSettings_getLogoImagePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoImagePath_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoImagePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoImagePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoImagePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoImagePathResponse")
            kw["aname"] = "_IBIOSSettings_getLogoImagePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoImagePathResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoImagePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoImagePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoImagePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logoImagePath", aname="_logoImagePath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoImagePath")
            kw["aname"] = "_IBIOSSettings_setLogoImagePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logoImagePath = None
                    return
            Holder.__name__ = "IBIOSSettings_setLogoImagePath_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoImagePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoImagePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoImagePathResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoImagePathResponse")
            kw["aname"] = "_IBIOSSettings_setLogoImagePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setLogoImagePathResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getBootMenuMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getBootMenuMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getBootMenuMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getBootMenuMode")
            kw["aname"] = "_IBIOSSettings_getBootMenuMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getBootMenuMode_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getBootMenuModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getBootMenuModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getBootMenuModeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","BIOSBootMenuMode",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getBootMenuModeResponse")
            kw["aname"] = "_IBIOSSettings_getBootMenuModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getBootMenuModeResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setBootMenuMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setBootMenuMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setBootMenuMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","BIOSBootMenuMode",lazy=False)(pname="bootMenuMode", aname="_bootMenuMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setBootMenuMode")
            kw["aname"] = "_IBIOSSettings_setBootMenuMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bootMenuMode = None
                    return
            Holder.__name__ = "IBIOSSettings_setBootMenuMode_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setBootMenuModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setBootMenuModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setBootMenuModeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setBootMenuModeResponse")
            kw["aname"] = "_IBIOSSettings_setBootMenuModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setBootMenuModeResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getACPIEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getACPIEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getACPIEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getACPIEnabled")
            kw["aname"] = "_IBIOSSettings_getACPIEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getACPIEnabled_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getACPIEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getACPIEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getACPIEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getACPIEnabledResponse")
            kw["aname"] = "_IBIOSSettings_getACPIEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getACPIEnabledResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setACPIEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setACPIEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setACPIEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="ACPIEnabled", aname="_ACPIEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setACPIEnabled")
            kw["aname"] = "_IBIOSSettings_setACPIEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._ACPIEnabled = None
                    return
            Holder.__name__ = "IBIOSSettings_setACPIEnabled_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setACPIEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setACPIEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setACPIEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setACPIEnabledResponse")
            kw["aname"] = "_IBIOSSettings_setACPIEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setACPIEnabledResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getIOAPICEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getIOAPICEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getIOAPICEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getIOAPICEnabled")
            kw["aname"] = "_IBIOSSettings_getIOAPICEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getIOAPICEnabled_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getIOAPICEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getIOAPICEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getIOAPICEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getIOAPICEnabledResponse")
            kw["aname"] = "_IBIOSSettings_getIOAPICEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getIOAPICEnabledResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setIOAPICEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setIOAPICEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setIOAPICEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="IOAPICEnabled", aname="_IOAPICEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setIOAPICEnabled")
            kw["aname"] = "_IBIOSSettings_setIOAPICEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IOAPICEnabled = None
                    return
            Holder.__name__ = "IBIOSSettings_setIOAPICEnabled_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setIOAPICEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setIOAPICEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setIOAPICEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setIOAPICEnabledResponse")
            kw["aname"] = "_IBIOSSettings_setIOAPICEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setIOAPICEnabledResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getAPICMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getAPICMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getAPICMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getAPICMode")
            kw["aname"] = "_IBIOSSettings_getAPICMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getAPICMode_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getAPICModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getAPICModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getAPICModeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","APICMode",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getAPICModeResponse")
            kw["aname"] = "_IBIOSSettings_getAPICModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getAPICModeResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setAPICMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setAPICMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setAPICMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","APICMode",lazy=False)(pname="APICMode", aname="_APICMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setAPICMode")
            kw["aname"] = "_IBIOSSettings_setAPICMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._APICMode = None
                    return
            Holder.__name__ = "IBIOSSettings_setAPICMode_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setAPICModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setAPICModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setAPICModeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setAPICModeResponse")
            kw["aname"] = "_IBIOSSettings_setAPICModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setAPICModeResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getTimeOffset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getTimeOffset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getTimeOffset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getTimeOffset")
            kw["aname"] = "_IBIOSSettings_getTimeOffset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getTimeOffset_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getTimeOffsetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getTimeOffsetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getTimeOffsetResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getTimeOffsetResponse")
            kw["aname"] = "_IBIOSSettings_getTimeOffsetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getTimeOffsetResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setTimeOffset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setTimeOffset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setTimeOffset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="timeOffset", aname="_timeOffset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setTimeOffset")
            kw["aname"] = "_IBIOSSettings_setTimeOffset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._timeOffset = None
                    return
            Holder.__name__ = "IBIOSSettings_setTimeOffset_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setTimeOffsetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setTimeOffsetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setTimeOffsetResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setTimeOffsetResponse")
            kw["aname"] = "_IBIOSSettings_setTimeOffsetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setTimeOffsetResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getPXEDebugEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getPXEDebugEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getPXEDebugEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getPXEDebugEnabled")
            kw["aname"] = "_IBIOSSettings_getPXEDebugEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getPXEDebugEnabled_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getPXEDebugEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getPXEDebugEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getPXEDebugEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getPXEDebugEnabledResponse")
            kw["aname"] = "_IBIOSSettings_getPXEDebugEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getPXEDebugEnabledResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setPXEDebugEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setPXEDebugEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setPXEDebugEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="PXEDebugEnabled", aname="_PXEDebugEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setPXEDebugEnabled")
            kw["aname"] = "_IBIOSSettings_setPXEDebugEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._PXEDebugEnabled = None
                    return
            Holder.__name__ = "IBIOSSettings_setPXEDebugEnabled_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setPXEDebugEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setPXEDebugEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setPXEDebugEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setPXEDebugEnabledResponse")
            kw["aname"] = "_IBIOSSettings_setPXEDebugEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setPXEDebugEnabledResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getNonVolatileStorageFile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getNonVolatileStorageFile"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getNonVolatileStorageFile_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getNonVolatileStorageFile")
            kw["aname"] = "_IBIOSSettings_getNonVolatileStorageFile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getNonVolatileStorageFile_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getNonVolatileStorageFileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getNonVolatileStorageFileResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getNonVolatileStorageFileResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getNonVolatileStorageFileResponse")
            kw["aname"] = "_IBIOSSettings_getNonVolatileStorageFileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getNonVolatileStorageFileResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getId")
            kw["aname"] = "_IRecordingScreenSettings_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getId_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getIdResponse")
            kw["aname"] = "_IRecordingScreenSettings_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getIdResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getEnabled")
            kw["aname"] = "_IRecordingScreenSettings_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getEnabled_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getEnabledResponse")
            kw["aname"] = "_IRecordingScreenSettings_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getEnabledResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setEnabled")
            kw["aname"] = "_IRecordingScreenSettings_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setEnabled_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setEnabledResponse")
            kw["aname"] = "_IRecordingScreenSettings_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setEnabledResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getFeatures_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getFeatures"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getFeatures_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getFeatures")
            kw["aname"] = "_IRecordingScreenSettings_getFeatures"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getFeatures_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getFeaturesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getFeaturesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getFeaturesResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getFeaturesResponse")
            kw["aname"] = "_IRecordingScreenSettings_getFeaturesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getFeaturesResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setFeatures_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setFeatures"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setFeatures_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="features", aname="_features", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setFeatures")
            kw["aname"] = "_IRecordingScreenSettings_setFeatures"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._features = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setFeatures_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setFeaturesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setFeaturesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setFeaturesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setFeaturesResponse")
            kw["aname"] = "_IRecordingScreenSettings_setFeaturesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setFeaturesResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getDestination_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getDestination"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getDestination_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getDestination")
            kw["aname"] = "_IRecordingScreenSettings_getDestination"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getDestination_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getDestinationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getDestinationResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getDestinationResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","RecordingDestination",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getDestinationResponse")
            kw["aname"] = "_IRecordingScreenSettings_getDestinationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getDestinationResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setDestination_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setDestination"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setDestination_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","RecordingDestination",lazy=False)(pname="destination", aname="_destination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setDestination")
            kw["aname"] = "_IRecordingScreenSettings_setDestination"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._destination = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setDestination_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setDestinationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setDestinationResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setDestinationResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setDestinationResponse")
            kw["aname"] = "_IRecordingScreenSettings_setDestinationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setDestinationResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getFilename_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getFilename"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getFilename_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getFilename")
            kw["aname"] = "_IRecordingScreenSettings_getFilename"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getFilename_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getFilenameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getFilenameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getFilenameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getFilenameResponse")
            kw["aname"] = "_IRecordingScreenSettings_getFilenameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getFilenameResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setFilename_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setFilename"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setFilename_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filename", aname="_filename", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setFilename")
            kw["aname"] = "_IRecordingScreenSettings_setFilename"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._filename = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setFilename_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setFilenameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setFilenameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setFilenameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setFilenameResponse")
            kw["aname"] = "_IRecordingScreenSettings_setFilenameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setFilenameResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getMaxTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getMaxTime"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getMaxTime_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getMaxTime")
            kw["aname"] = "_IRecordingScreenSettings_getMaxTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getMaxTime_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getMaxTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getMaxTimeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getMaxTimeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getMaxTimeResponse")
            kw["aname"] = "_IRecordingScreenSettings_getMaxTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getMaxTimeResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setMaxTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setMaxTime"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setMaxTime_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxTime", aname="_maxTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setMaxTime")
            kw["aname"] = "_IRecordingScreenSettings_setMaxTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._maxTime = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setMaxTime_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setMaxTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setMaxTimeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setMaxTimeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setMaxTimeResponse")
            kw["aname"] = "_IRecordingScreenSettings_setMaxTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setMaxTimeResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getMaxFileSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getMaxFileSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getMaxFileSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getMaxFileSize")
            kw["aname"] = "_IRecordingScreenSettings_getMaxFileSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getMaxFileSize_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getMaxFileSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getMaxFileSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getMaxFileSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getMaxFileSizeResponse")
            kw["aname"] = "_IRecordingScreenSettings_getMaxFileSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getMaxFileSizeResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setMaxFileSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setMaxFileSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setMaxFileSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxFileSize", aname="_maxFileSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setMaxFileSize")
            kw["aname"] = "_IRecordingScreenSettings_setMaxFileSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._maxFileSize = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setMaxFileSize_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setMaxFileSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setMaxFileSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setMaxFileSizeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setMaxFileSizeResponse")
            kw["aname"] = "_IRecordingScreenSettings_setMaxFileSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setMaxFileSizeResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getOptions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getOptions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getOptions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getOptions")
            kw["aname"] = "_IRecordingScreenSettings_getOptions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getOptions_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getOptionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getOptionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getOptionsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getOptionsResponse")
            kw["aname"] = "_IRecordingScreenSettings_getOptionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getOptionsResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setOptions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setOptions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setOptions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="options", aname="_options", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setOptions")
            kw["aname"] = "_IRecordingScreenSettings_setOptions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._options = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setOptions_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setOptionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setOptionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setOptionsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setOptionsResponse")
            kw["aname"] = "_IRecordingScreenSettings_setOptionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setOptionsResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getAudioCodec_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getAudioCodec"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getAudioCodec_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getAudioCodec")
            kw["aname"] = "_IRecordingScreenSettings_getAudioCodec"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getAudioCodec_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getAudioCodecResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getAudioCodecResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getAudioCodecResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","RecordingAudioCodec",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getAudioCodecResponse")
            kw["aname"] = "_IRecordingScreenSettings_getAudioCodecResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getAudioCodecResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setAudioCodec_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setAudioCodec"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setAudioCodec_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","RecordingAudioCodec",lazy=False)(pname="audioCodec", aname="_audioCodec", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setAudioCodec")
            kw["aname"] = "_IRecordingScreenSettings_setAudioCodec"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._audioCodec = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setAudioCodec_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setAudioCodecResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setAudioCodecResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setAudioCodecResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setAudioCodecResponse")
            kw["aname"] = "_IRecordingScreenSettings_setAudioCodecResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setAudioCodecResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getAudioHz_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getAudioHz"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getAudioHz_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getAudioHz")
            kw["aname"] = "_IRecordingScreenSettings_getAudioHz"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getAudioHz_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getAudioHzResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getAudioHzResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getAudioHzResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getAudioHzResponse")
            kw["aname"] = "_IRecordingScreenSettings_getAudioHzResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getAudioHzResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setAudioHz_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setAudioHz"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setAudioHz_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="audioHz", aname="_audioHz", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setAudioHz")
            kw["aname"] = "_IRecordingScreenSettings_setAudioHz"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._audioHz = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setAudioHz_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setAudioHzResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setAudioHzResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setAudioHzResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setAudioHzResponse")
            kw["aname"] = "_IRecordingScreenSettings_setAudioHzResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setAudioHzResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getAudioBits_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getAudioBits"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getAudioBits_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getAudioBits")
            kw["aname"] = "_IRecordingScreenSettings_getAudioBits"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getAudioBits_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getAudioBitsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getAudioBitsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getAudioBitsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getAudioBitsResponse")
            kw["aname"] = "_IRecordingScreenSettings_getAudioBitsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getAudioBitsResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setAudioBits_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setAudioBits"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setAudioBits_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="audioBits", aname="_audioBits", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setAudioBits")
            kw["aname"] = "_IRecordingScreenSettings_setAudioBits"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._audioBits = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setAudioBits_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setAudioBitsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setAudioBitsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setAudioBitsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setAudioBitsResponse")
            kw["aname"] = "_IRecordingScreenSettings_setAudioBitsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setAudioBitsResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getAudioChannels_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getAudioChannels"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getAudioChannels_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getAudioChannels")
            kw["aname"] = "_IRecordingScreenSettings_getAudioChannels"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getAudioChannels_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getAudioChannelsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getAudioChannelsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getAudioChannelsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getAudioChannelsResponse")
            kw["aname"] = "_IRecordingScreenSettings_getAudioChannelsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getAudioChannelsResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setAudioChannels_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setAudioChannels"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setAudioChannels_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="audioChannels", aname="_audioChannels", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setAudioChannels")
            kw["aname"] = "_IRecordingScreenSettings_setAudioChannels"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._audioChannels = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setAudioChannels_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setAudioChannelsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setAudioChannelsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setAudioChannelsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setAudioChannelsResponse")
            kw["aname"] = "_IRecordingScreenSettings_setAudioChannelsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setAudioChannelsResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getVideoCodec_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getVideoCodec"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getVideoCodec_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getVideoCodec")
            kw["aname"] = "_IRecordingScreenSettings_getVideoCodec"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getVideoCodec_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getVideoCodecResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getVideoCodecResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getVideoCodecResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","RecordingVideoCodec",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getVideoCodecResponse")
            kw["aname"] = "_IRecordingScreenSettings_getVideoCodecResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getVideoCodecResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setVideoCodec_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setVideoCodec"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setVideoCodec_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","RecordingVideoCodec",lazy=False)(pname="videoCodec", aname="_videoCodec", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setVideoCodec")
            kw["aname"] = "_IRecordingScreenSettings_setVideoCodec"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._videoCodec = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setVideoCodec_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setVideoCodecResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setVideoCodecResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setVideoCodecResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setVideoCodecResponse")
            kw["aname"] = "_IRecordingScreenSettings_setVideoCodecResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setVideoCodecResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getVideoWidth_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getVideoWidth"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getVideoWidth_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getVideoWidth")
            kw["aname"] = "_IRecordingScreenSettings_getVideoWidth"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getVideoWidth_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getVideoWidthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getVideoWidthResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getVideoWidthResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getVideoWidthResponse")
            kw["aname"] = "_IRecordingScreenSettings_getVideoWidthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getVideoWidthResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setVideoWidth_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setVideoWidth"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setVideoWidth_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="videoWidth", aname="_videoWidth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setVideoWidth")
            kw["aname"] = "_IRecordingScreenSettings_setVideoWidth"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._videoWidth = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setVideoWidth_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setVideoWidthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setVideoWidthResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setVideoWidthResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setVideoWidthResponse")
            kw["aname"] = "_IRecordingScreenSettings_setVideoWidthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setVideoWidthResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getVideoHeight_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getVideoHeight"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getVideoHeight_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getVideoHeight")
            kw["aname"] = "_IRecordingScreenSettings_getVideoHeight"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getVideoHeight_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getVideoHeightResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getVideoHeightResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getVideoHeightResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getVideoHeightResponse")
            kw["aname"] = "_IRecordingScreenSettings_getVideoHeightResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getVideoHeightResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setVideoHeight_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setVideoHeight"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setVideoHeight_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="videoHeight", aname="_videoHeight", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setVideoHeight")
            kw["aname"] = "_IRecordingScreenSettings_setVideoHeight"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._videoHeight = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setVideoHeight_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setVideoHeightResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setVideoHeightResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setVideoHeightResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setVideoHeightResponse")
            kw["aname"] = "_IRecordingScreenSettings_setVideoHeightResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setVideoHeightResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getVideoRate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getVideoRate"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getVideoRate_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getVideoRate")
            kw["aname"] = "_IRecordingScreenSettings_getVideoRate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getVideoRate_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getVideoRateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getVideoRateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getVideoRateResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getVideoRateResponse")
            kw["aname"] = "_IRecordingScreenSettings_getVideoRateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getVideoRateResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setVideoRate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setVideoRate"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setVideoRate_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="videoRate", aname="_videoRate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setVideoRate")
            kw["aname"] = "_IRecordingScreenSettings_setVideoRate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._videoRate = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setVideoRate_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setVideoRateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setVideoRateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setVideoRateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setVideoRateResponse")
            kw["aname"] = "_IRecordingScreenSettings_setVideoRateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setVideoRateResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getVideoRateControlMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getVideoRateControlMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getVideoRateControlMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getVideoRateControlMode")
            kw["aname"] = "_IRecordingScreenSettings_getVideoRateControlMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getVideoRateControlMode_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getVideoRateControlModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getVideoRateControlModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getVideoRateControlModeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","RecordingVideoRateControlMode",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getVideoRateControlModeResponse")
            kw["aname"] = "_IRecordingScreenSettings_getVideoRateControlModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getVideoRateControlModeResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setVideoRateControlMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setVideoRateControlMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setVideoRateControlMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","RecordingVideoRateControlMode",lazy=False)(pname="videoRateControlMode", aname="_videoRateControlMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setVideoRateControlMode")
            kw["aname"] = "_IRecordingScreenSettings_setVideoRateControlMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._videoRateControlMode = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setVideoRateControlMode_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setVideoRateControlModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setVideoRateControlModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setVideoRateControlModeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setVideoRateControlModeResponse")
            kw["aname"] = "_IRecordingScreenSettings_setVideoRateControlModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setVideoRateControlModeResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getVideoFPS_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getVideoFPS"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getVideoFPS_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getVideoFPS")
            kw["aname"] = "_IRecordingScreenSettings_getVideoFPS"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getVideoFPS_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getVideoFPSResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getVideoFPSResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getVideoFPSResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getVideoFPSResponse")
            kw["aname"] = "_IRecordingScreenSettings_getVideoFPSResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getVideoFPSResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setVideoFPS_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setVideoFPS"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setVideoFPS_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="videoFPS", aname="_videoFPS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setVideoFPS")
            kw["aname"] = "_IRecordingScreenSettings_setVideoFPS"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._videoFPS = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setVideoFPS_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setVideoFPSResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setVideoFPSResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setVideoFPSResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setVideoFPSResponse")
            kw["aname"] = "_IRecordingScreenSettings_setVideoFPSResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setVideoFPSResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getVideoScalingMethod_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getVideoScalingMethod"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getVideoScalingMethod_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getVideoScalingMethod")
            kw["aname"] = "_IRecordingScreenSettings_getVideoScalingMethod"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getVideoScalingMethod_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_getVideoScalingMethodResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_getVideoScalingMethodResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_getVideoScalingMethodResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","RecordingVideoScalingMethod",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_getVideoScalingMethodResponse")
            kw["aname"] = "_IRecordingScreenSettings_getVideoScalingMethodResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_getVideoScalingMethodResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setVideoScalingMethod_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setVideoScalingMethod"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setVideoScalingMethod_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","RecordingVideoScalingMethod",lazy=False)(pname="videoScalingMethod", aname="_videoScalingMethod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setVideoScalingMethod")
            kw["aname"] = "_IRecordingScreenSettings_setVideoScalingMethod"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._videoScalingMethod = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_setVideoScalingMethod_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_setVideoScalingMethodResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_setVideoScalingMethodResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_setVideoScalingMethodResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_setVideoScalingMethodResponse")
            kw["aname"] = "_IRecordingScreenSettings_setVideoScalingMethodResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingScreenSettings_setVideoScalingMethodResponse_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_isFeatureEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_isFeatureEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_isFeatureEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","RecordingFeature",lazy=False)(pname="feature", aname="_feature", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_isFeatureEnabled")
            kw["aname"] = "_IRecordingScreenSettings_isFeatureEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._feature = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_isFeatureEnabled_Holder"
            self.pyclass = Holder

    class IRecordingScreenSettings_isFeatureEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingScreenSettings_isFeatureEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingScreenSettings_isFeatureEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingScreenSettings_isFeatureEnabledResponse")
            kw["aname"] = "_IRecordingScreenSettings_isFeatureEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingScreenSettings_isFeatureEnabledResponse_Holder"
            self.pyclass = Holder

    class IRecordingSettings_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingSettings_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingSettings_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingSettings_getEnabled")
            kw["aname"] = "_IRecordingSettings_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingSettings_getEnabled_Holder"
            self.pyclass = Holder

    class IRecordingSettings_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingSettings_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingSettings_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingSettings_getEnabledResponse")
            kw["aname"] = "_IRecordingSettings_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingSettings_getEnabledResponse_Holder"
            self.pyclass = Holder

    class IRecordingSettings_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingSettings_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingSettings_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingSettings_setEnabled")
            kw["aname"] = "_IRecordingSettings_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "IRecordingSettings_setEnabled_Holder"
            self.pyclass = Holder

    class IRecordingSettings_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingSettings_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingSettings_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingSettings_setEnabledResponse")
            kw["aname"] = "_IRecordingSettings_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IRecordingSettings_setEnabledResponse_Holder"
            self.pyclass = Holder

    class IRecordingSettings_getScreens_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingSettings_getScreens"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingSettings_getScreens_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingSettings_getScreens")
            kw["aname"] = "_IRecordingSettings_getScreens"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingSettings_getScreens_Holder"
            self.pyclass = Holder

    class IRecordingSettings_getScreensResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingSettings_getScreensResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingSettings_getScreensResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingSettings_getScreensResponse")
            kw["aname"] = "_IRecordingSettings_getScreensResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IRecordingSettings_getScreensResponse_Holder"
            self.pyclass = Holder

    class IRecordingSettings_getScreenSettings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingSettings_getScreenSettings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingSettings_getScreenSettings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingSettings_getScreenSettings")
            kw["aname"] = "_IRecordingSettings_getScreenSettings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IRecordingSettings_getScreenSettings_Holder"
            self.pyclass = Holder

    class IRecordingSettings_getScreenSettingsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingSettings_getScreenSettingsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingSettings_getScreenSettingsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingSettings_getScreenSettingsResponse")
            kw["aname"] = "_IRecordingSettings_getScreenSettingsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingSettings_getScreenSettingsResponse_Holder"
            self.pyclass = Holder

    class IPCIAddress_getBus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_getBus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_getBus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_getBus")
            kw["aname"] = "_IPCIAddress_getBus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPCIAddress_getBus_Holder"
            self.pyclass = Holder

    class IPCIAddress_getBusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_getBusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_getBusResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ishort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_getBusResponse")
            kw["aname"] = "_IPCIAddress_getBusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPCIAddress_getBusResponse_Holder"
            self.pyclass = Holder

    class IPCIAddress_setBus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_setBus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_setBus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname="bus", aname="_bus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_setBus")
            kw["aname"] = "_IPCIAddress_setBus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bus = None
                    return
            Holder.__name__ = "IPCIAddress_setBus_Holder"
            self.pyclass = Holder

    class IPCIAddress_setBusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_setBusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_setBusResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_setBusResponse")
            kw["aname"] = "_IPCIAddress_setBusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IPCIAddress_setBusResponse_Holder"
            self.pyclass = Holder

    class IPCIAddress_getDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_getDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_getDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_getDevice")
            kw["aname"] = "_IPCIAddress_getDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPCIAddress_getDevice_Holder"
            self.pyclass = Holder

    class IPCIAddress_getDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_getDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_getDeviceResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ishort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_getDeviceResponse")
            kw["aname"] = "_IPCIAddress_getDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPCIAddress_getDeviceResponse_Holder"
            self.pyclass = Holder

    class IPCIAddress_setDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_setDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_setDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_setDevice")
            kw["aname"] = "_IPCIAddress_setDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._device = None
                    return
            Holder.__name__ = "IPCIAddress_setDevice_Holder"
            self.pyclass = Holder

    class IPCIAddress_setDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_setDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_setDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_setDeviceResponse")
            kw["aname"] = "_IPCIAddress_setDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IPCIAddress_setDeviceResponse_Holder"
            self.pyclass = Holder

    class IPCIAddress_getDevFunction_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_getDevFunction"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_getDevFunction_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_getDevFunction")
            kw["aname"] = "_IPCIAddress_getDevFunction"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPCIAddress_getDevFunction_Holder"
            self.pyclass = Holder

    class IPCIAddress_getDevFunctionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_getDevFunctionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_getDevFunctionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ishort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_getDevFunctionResponse")
            kw["aname"] = "_IPCIAddress_getDevFunctionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPCIAddress_getDevFunctionResponse_Holder"
            self.pyclass = Holder

    class IPCIAddress_setDevFunction_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_setDevFunction"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_setDevFunction_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname="devFunction", aname="_devFunction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_setDevFunction")
            kw["aname"] = "_IPCIAddress_setDevFunction"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._devFunction = None
                    return
            Holder.__name__ = "IPCIAddress_setDevFunction_Holder"
            self.pyclass = Holder

    class IPCIAddress_setDevFunctionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_setDevFunctionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_setDevFunctionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_setDevFunctionResponse")
            kw["aname"] = "_IPCIAddress_setDevFunctionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IPCIAddress_setDevFunctionResponse_Holder"
            self.pyclass = Holder

    class IPCIAddress_asLong_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_asLong"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_asLong_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_asLong")
            kw["aname"] = "_IPCIAddress_asLong"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPCIAddress_asLong_Holder"
            self.pyclass = Holder

    class IPCIAddress_asLongResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_asLongResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_asLongResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_asLongResponse")
            kw["aname"] = "_IPCIAddress_asLongResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPCIAddress_asLongResponse_Holder"
            self.pyclass = Holder

    class IPCIAddress_fromLong_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_fromLong"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_fromLong_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="number", aname="_number", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_fromLong")
            kw["aname"] = "_IPCIAddress_fromLong"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._number = None
                    return
            Holder.__name__ = "IPCIAddress_fromLong_Holder"
            self.pyclass = Holder

    class IPCIAddress_fromLongResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPCIAddress_fromLongResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPCIAddress_fromLongResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IPCIAddress_fromLongResponse")
            kw["aname"] = "_IPCIAddress_fromLongResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IPCIAddress_fromLongResponse_Holder"
            self.pyclass = Holder

    class IMachine_getParent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getParent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getParent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getParent")
            kw["aname"] = "_IMachine_getParent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getParent_Holder"
            self.pyclass = Holder

    class IMachine_getParentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getParentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getParentResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getParentResponse")
            kw["aname"] = "_IMachine_getParentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getParentResponse_Holder"
            self.pyclass = Holder

    class IMachine_getIcon_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getIcon"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getIcon_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getIcon")
            kw["aname"] = "_IMachine_getIcon"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getIcon_Holder"
            self.pyclass = Holder

    class IMachine_getIconResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getIconResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getIconResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getIconResponse")
            kw["aname"] = "_IMachine_getIconResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getIconResponse_Holder"
            self.pyclass = Holder

    class IMachine_setIcon_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setIcon"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setIcon_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="icon", aname="_icon", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setIcon")
            kw["aname"] = "_IMachine_setIcon"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._icon = None
                    return
            Holder.__name__ = "IMachine_setIcon_Holder"
            self.pyclass = Holder

    class IMachine_setIconResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setIconResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setIconResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setIconResponse")
            kw["aname"] = "_IMachine_setIconResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setIconResponse_Holder"
            self.pyclass = Holder

    class IMachine_getAccessible_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccessible"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccessible_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccessible")
            kw["aname"] = "_IMachine_getAccessible"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getAccessible_Holder"
            self.pyclass = Holder

    class IMachine_getAccessibleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccessibleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccessibleResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccessibleResponse")
            kw["aname"] = "_IMachine_getAccessibleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getAccessibleResponse_Holder"
            self.pyclass = Holder

    class IMachine_getAccessError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccessError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccessError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccessError")
            kw["aname"] = "_IMachine_getAccessError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getAccessError_Holder"
            self.pyclass = Holder

    class IMachine_getAccessErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccessErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccessErrorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccessErrorResponse")
            kw["aname"] = "_IMachine_getAccessErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getAccessErrorResponse_Holder"
            self.pyclass = Holder

    class IMachine_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getName")
            kw["aname"] = "_IMachine_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getName_Holder"
            self.pyclass = Holder

    class IMachine_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getNameResponse")
            kw["aname"] = "_IMachine_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getNameResponse_Holder"
            self.pyclass = Holder

    class IMachine_setName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setName")
            kw["aname"] = "_IMachine_setName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_setName_Holder"
            self.pyclass = Holder

    class IMachine_setNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setNameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setNameResponse")
            kw["aname"] = "_IMachine_setNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setNameResponse_Holder"
            self.pyclass = Holder

    class IMachine_getDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getDescription")
            kw["aname"] = "_IMachine_getDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getDescription_Holder"
            self.pyclass = Holder

    class IMachine_getDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getDescriptionResponse")
            kw["aname"] = "_IMachine_getDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getDescriptionResponse_Holder"
            self.pyclass = Holder

    class IMachine_setDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setDescription")
            kw["aname"] = "_IMachine_setDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._description = None
                    return
            Holder.__name__ = "IMachine_setDescription_Holder"
            self.pyclass = Holder

    class IMachine_setDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setDescriptionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setDescriptionResponse")
            kw["aname"] = "_IMachine_setDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setDescriptionResponse_Holder"
            self.pyclass = Holder

    class IMachine_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getId")
            kw["aname"] = "_IMachine_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getId_Holder"
            self.pyclass = Holder

    class IMachine_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getIdResponse")
            kw["aname"] = "_IMachine_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getIdResponse_Holder"
            self.pyclass = Holder

    class IMachine_getGroups_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGroups"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGroups_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGroups")
            kw["aname"] = "_IMachine_getGroups"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getGroups_Holder"
            self.pyclass = Holder

    class IMachine_getGroupsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGroupsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGroupsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGroupsResponse")
            kw["aname"] = "_IMachine_getGroupsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_getGroupsResponse_Holder"
            self.pyclass = Holder

    class IMachine_setGroups_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setGroups"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setGroups_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="groups", aname="_groups", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setGroups")
            kw["aname"] = "_IMachine_setGroups"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._groups = []
                    return
            Holder.__name__ = "IMachine_setGroups_Holder"
            self.pyclass = Holder

    class IMachine_setGroupsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setGroupsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setGroupsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setGroupsResponse")
            kw["aname"] = "_IMachine_setGroupsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setGroupsResponse_Holder"
            self.pyclass = Holder

    class IMachine_getOSTypeId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getOSTypeId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getOSTypeId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getOSTypeId")
            kw["aname"] = "_IMachine_getOSTypeId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getOSTypeId_Holder"
            self.pyclass = Holder

    class IMachine_getOSTypeIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getOSTypeIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getOSTypeIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getOSTypeIdResponse")
            kw["aname"] = "_IMachine_getOSTypeIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getOSTypeIdResponse_Holder"
            self.pyclass = Holder

    class IMachine_setOSTypeId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setOSTypeId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setOSTypeId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="OSTypeId", aname="_OSTypeId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setOSTypeId")
            kw["aname"] = "_IMachine_setOSTypeId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._OSTypeId = None
                    return
            Holder.__name__ = "IMachine_setOSTypeId_Holder"
            self.pyclass = Holder

    class IMachine_setOSTypeIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setOSTypeIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setOSTypeIdResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setOSTypeIdResponse")
            kw["aname"] = "_IMachine_setOSTypeIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setOSTypeIdResponse_Holder"
            self.pyclass = Holder

    class IMachine_getHardwareVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHardwareVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHardwareVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHardwareVersion")
            kw["aname"] = "_IMachine_getHardwareVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getHardwareVersion_Holder"
            self.pyclass = Holder

    class IMachine_getHardwareVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHardwareVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHardwareVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHardwareVersionResponse")
            kw["aname"] = "_IMachine_getHardwareVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getHardwareVersionResponse_Holder"
            self.pyclass = Holder

    class IMachine_setHardwareVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHardwareVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHardwareVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hardwareVersion", aname="_hardwareVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHardwareVersion")
            kw["aname"] = "_IMachine_setHardwareVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hardwareVersion = None
                    return
            Holder.__name__ = "IMachine_setHardwareVersion_Holder"
            self.pyclass = Holder

    class IMachine_setHardwareVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHardwareVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHardwareVersionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHardwareVersionResponse")
            kw["aname"] = "_IMachine_setHardwareVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setHardwareVersionResponse_Holder"
            self.pyclass = Holder

    class IMachine_getHardwareUUID_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHardwareUUID"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHardwareUUID_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHardwareUUID")
            kw["aname"] = "_IMachine_getHardwareUUID"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getHardwareUUID_Holder"
            self.pyclass = Holder

    class IMachine_getHardwareUUIDResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHardwareUUIDResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHardwareUUIDResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHardwareUUIDResponse")
            kw["aname"] = "_IMachine_getHardwareUUIDResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getHardwareUUIDResponse_Holder"
            self.pyclass = Holder

    class IMachine_setHardwareUUID_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHardwareUUID"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHardwareUUID_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hardwareUUID", aname="_hardwareUUID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHardwareUUID")
            kw["aname"] = "_IMachine_setHardwareUUID"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hardwareUUID = None
                    return
            Holder.__name__ = "IMachine_setHardwareUUID_Holder"
            self.pyclass = Holder

    class IMachine_setHardwareUUIDResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHardwareUUIDResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHardwareUUIDResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHardwareUUIDResponse")
            kw["aname"] = "_IMachine_setHardwareUUIDResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setHardwareUUIDResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUCount")
            kw["aname"] = "_IMachine_getCPUCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getCPUCount_Holder"
            self.pyclass = Holder

    class IMachine_getCPUCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUCountResponse")
            kw["aname"] = "_IMachine_getCPUCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCPUCountResponse_Holder"
            self.pyclass = Holder

    class IMachine_setCPUCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="CPUCount", aname="_CPUCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUCount")
            kw["aname"] = "_IMachine_setCPUCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._CPUCount = None
                    return
            Holder.__name__ = "IMachine_setCPUCount_Holder"
            self.pyclass = Holder

    class IMachine_setCPUCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUCountResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUCountResponse")
            kw["aname"] = "_IMachine_setCPUCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setCPUCountResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUHotPlugEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUHotPlugEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUHotPlugEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUHotPlugEnabled")
            kw["aname"] = "_IMachine_getCPUHotPlugEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getCPUHotPlugEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getCPUHotPlugEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUHotPlugEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUHotPlugEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUHotPlugEnabledResponse")
            kw["aname"] = "_IMachine_getCPUHotPlugEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCPUHotPlugEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setCPUHotPlugEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUHotPlugEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUHotPlugEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="CPUHotPlugEnabled", aname="_CPUHotPlugEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUHotPlugEnabled")
            kw["aname"] = "_IMachine_setCPUHotPlugEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._CPUHotPlugEnabled = None
                    return
            Holder.__name__ = "IMachine_setCPUHotPlugEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setCPUHotPlugEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUHotPlugEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUHotPlugEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUHotPlugEnabledResponse")
            kw["aname"] = "_IMachine_setCPUHotPlugEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setCPUHotPlugEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUExecutionCap_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUExecutionCap"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUExecutionCap_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUExecutionCap")
            kw["aname"] = "_IMachine_getCPUExecutionCap"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getCPUExecutionCap_Holder"
            self.pyclass = Holder

    class IMachine_getCPUExecutionCapResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUExecutionCapResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUExecutionCapResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUExecutionCapResponse")
            kw["aname"] = "_IMachine_getCPUExecutionCapResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCPUExecutionCapResponse_Holder"
            self.pyclass = Holder

    class IMachine_setCPUExecutionCap_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUExecutionCap"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUExecutionCap_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="CPUExecutionCap", aname="_CPUExecutionCap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUExecutionCap")
            kw["aname"] = "_IMachine_setCPUExecutionCap"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._CPUExecutionCap = None
                    return
            Holder.__name__ = "IMachine_setCPUExecutionCap_Holder"
            self.pyclass = Holder

    class IMachine_setCPUExecutionCapResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUExecutionCapResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUExecutionCapResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUExecutionCapResponse")
            kw["aname"] = "_IMachine_setCPUExecutionCapResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setCPUExecutionCapResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUIDPortabilityLevel_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUIDPortabilityLevel"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUIDPortabilityLevel_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUIDPortabilityLevel")
            kw["aname"] = "_IMachine_getCPUIDPortabilityLevel"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getCPUIDPortabilityLevel_Holder"
            self.pyclass = Holder

    class IMachine_getCPUIDPortabilityLevelResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUIDPortabilityLevelResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUIDPortabilityLevelResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUIDPortabilityLevelResponse")
            kw["aname"] = "_IMachine_getCPUIDPortabilityLevelResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCPUIDPortabilityLevelResponse_Holder"
            self.pyclass = Holder

    class IMachine_setCPUIDPortabilityLevel_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUIDPortabilityLevel"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUIDPortabilityLevel_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="CPUIDPortabilityLevel", aname="_CPUIDPortabilityLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUIDPortabilityLevel")
            kw["aname"] = "_IMachine_setCPUIDPortabilityLevel"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._CPUIDPortabilityLevel = None
                    return
            Holder.__name__ = "IMachine_setCPUIDPortabilityLevel_Holder"
            self.pyclass = Holder

    class IMachine_setCPUIDPortabilityLevelResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUIDPortabilityLevelResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUIDPortabilityLevelResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUIDPortabilityLevelResponse")
            kw["aname"] = "_IMachine_setCPUIDPortabilityLevelResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setCPUIDPortabilityLevelResponse_Holder"
            self.pyclass = Holder

    class IMachine_getMemorySize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMemorySize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMemorySize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMemorySize")
            kw["aname"] = "_IMachine_getMemorySize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getMemorySize_Holder"
            self.pyclass = Holder

    class IMachine_getMemorySizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMemorySizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMemorySizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMemorySizeResponse")
            kw["aname"] = "_IMachine_getMemorySizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getMemorySizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setMemorySize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setMemorySize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setMemorySize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memorySize", aname="_memorySize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setMemorySize")
            kw["aname"] = "_IMachine_setMemorySize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._memorySize = None
                    return
            Holder.__name__ = "IMachine_setMemorySize_Holder"
            self.pyclass = Holder

    class IMachine_setMemorySizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setMemorySizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setMemorySizeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setMemorySizeResponse")
            kw["aname"] = "_IMachine_setMemorySizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setMemorySizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getMemoryBalloonSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMemoryBalloonSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMemoryBalloonSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMemoryBalloonSize")
            kw["aname"] = "_IMachine_getMemoryBalloonSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getMemoryBalloonSize_Holder"
            self.pyclass = Holder

    class IMachine_getMemoryBalloonSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMemoryBalloonSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMemoryBalloonSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMemoryBalloonSizeResponse")
            kw["aname"] = "_IMachine_getMemoryBalloonSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getMemoryBalloonSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setMemoryBalloonSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setMemoryBalloonSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setMemoryBalloonSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memoryBalloonSize", aname="_memoryBalloonSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setMemoryBalloonSize")
            kw["aname"] = "_IMachine_setMemoryBalloonSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._memoryBalloonSize = None
                    return
            Holder.__name__ = "IMachine_setMemoryBalloonSize_Holder"
            self.pyclass = Holder

    class IMachine_setMemoryBalloonSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setMemoryBalloonSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setMemoryBalloonSizeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setMemoryBalloonSizeResponse")
            kw["aname"] = "_IMachine_setMemoryBalloonSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setMemoryBalloonSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getPageFusionEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getPageFusionEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getPageFusionEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getPageFusionEnabled")
            kw["aname"] = "_IMachine_getPageFusionEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getPageFusionEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getPageFusionEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getPageFusionEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getPageFusionEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getPageFusionEnabledResponse")
            kw["aname"] = "_IMachine_getPageFusionEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getPageFusionEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setPageFusionEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setPageFusionEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setPageFusionEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="pageFusionEnabled", aname="_pageFusionEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setPageFusionEnabled")
            kw["aname"] = "_IMachine_setPageFusionEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._pageFusionEnabled = None
                    return
            Holder.__name__ = "IMachine_setPageFusionEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setPageFusionEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setPageFusionEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setPageFusionEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setPageFusionEnabledResponse")
            kw["aname"] = "_IMachine_setPageFusionEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setPageFusionEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getGraphicsControllerType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGraphicsControllerType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGraphicsControllerType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGraphicsControllerType")
            kw["aname"] = "_IMachine_getGraphicsControllerType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getGraphicsControllerType_Holder"
            self.pyclass = Holder

    class IMachine_getGraphicsControllerTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGraphicsControllerTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGraphicsControllerTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","GraphicsControllerType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGraphicsControllerTypeResponse")
            kw["aname"] = "_IMachine_getGraphicsControllerTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getGraphicsControllerTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setGraphicsControllerType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setGraphicsControllerType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setGraphicsControllerType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","GraphicsControllerType",lazy=False)(pname="graphicsControllerType", aname="_graphicsControllerType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setGraphicsControllerType")
            kw["aname"] = "_IMachine_setGraphicsControllerType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._graphicsControllerType = None
                    return
            Holder.__name__ = "IMachine_setGraphicsControllerType_Holder"
            self.pyclass = Holder

    class IMachine_setGraphicsControllerTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setGraphicsControllerTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setGraphicsControllerTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setGraphicsControllerTypeResponse")
            kw["aname"] = "_IMachine_setGraphicsControllerTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setGraphicsControllerTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getVRAMSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getVRAMSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getVRAMSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getVRAMSize")
            kw["aname"] = "_IMachine_getVRAMSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getVRAMSize_Holder"
            self.pyclass = Holder

    class IMachine_getVRAMSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getVRAMSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getVRAMSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getVRAMSizeResponse")
            kw["aname"] = "_IMachine_getVRAMSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getVRAMSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setVRAMSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setVRAMSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setVRAMSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="VRAMSize", aname="_VRAMSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setVRAMSize")
            kw["aname"] = "_IMachine_setVRAMSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._VRAMSize = None
                    return
            Holder.__name__ = "IMachine_setVRAMSize_Holder"
            self.pyclass = Holder

    class IMachine_setVRAMSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setVRAMSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setVRAMSizeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setVRAMSizeResponse")
            kw["aname"] = "_IMachine_setVRAMSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setVRAMSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getAccelerate3DEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccelerate3DEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccelerate3DEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccelerate3DEnabled")
            kw["aname"] = "_IMachine_getAccelerate3DEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getAccelerate3DEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getAccelerate3DEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccelerate3DEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccelerate3DEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccelerate3DEnabledResponse")
            kw["aname"] = "_IMachine_getAccelerate3DEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getAccelerate3DEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setAccelerate3DEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAccelerate3DEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAccelerate3DEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="accelerate3DEnabled", aname="_accelerate3DEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAccelerate3DEnabled")
            kw["aname"] = "_IMachine_setAccelerate3DEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._accelerate3DEnabled = None
                    return
            Holder.__name__ = "IMachine_setAccelerate3DEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setAccelerate3DEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAccelerate3DEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAccelerate3DEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAccelerate3DEnabledResponse")
            kw["aname"] = "_IMachine_setAccelerate3DEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setAccelerate3DEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getAccelerate2DVideoEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccelerate2DVideoEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccelerate2DVideoEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccelerate2DVideoEnabled")
            kw["aname"] = "_IMachine_getAccelerate2DVideoEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getAccelerate2DVideoEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getAccelerate2DVideoEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccelerate2DVideoEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccelerate2DVideoEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccelerate2DVideoEnabledResponse")
            kw["aname"] = "_IMachine_getAccelerate2DVideoEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getAccelerate2DVideoEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setAccelerate2DVideoEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAccelerate2DVideoEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAccelerate2DVideoEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="accelerate2DVideoEnabled", aname="_accelerate2DVideoEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAccelerate2DVideoEnabled")
            kw["aname"] = "_IMachine_setAccelerate2DVideoEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._accelerate2DVideoEnabled = None
                    return
            Holder.__name__ = "IMachine_setAccelerate2DVideoEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setAccelerate2DVideoEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAccelerate2DVideoEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAccelerate2DVideoEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAccelerate2DVideoEnabledResponse")
            kw["aname"] = "_IMachine_setAccelerate2DVideoEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setAccelerate2DVideoEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getMonitorCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMonitorCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMonitorCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMonitorCount")
            kw["aname"] = "_IMachine_getMonitorCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getMonitorCount_Holder"
            self.pyclass = Holder

    class IMachine_getMonitorCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMonitorCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMonitorCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMonitorCountResponse")
            kw["aname"] = "_IMachine_getMonitorCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getMonitorCountResponse_Holder"
            self.pyclass = Holder

    class IMachine_setMonitorCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setMonitorCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setMonitorCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="monitorCount", aname="_monitorCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setMonitorCount")
            kw["aname"] = "_IMachine_setMonitorCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._monitorCount = None
                    return
            Holder.__name__ = "IMachine_setMonitorCount_Holder"
            self.pyclass = Holder

    class IMachine_setMonitorCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setMonitorCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setMonitorCountResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setMonitorCountResponse")
            kw["aname"] = "_IMachine_setMonitorCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setMonitorCountResponse_Holder"
            self.pyclass = Holder

    class IMachine_getBIOSSettings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getBIOSSettings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getBIOSSettings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getBIOSSettings")
            kw["aname"] = "_IMachine_getBIOSSettings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getBIOSSettings_Holder"
            self.pyclass = Holder

    class IMachine_getBIOSSettingsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getBIOSSettingsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getBIOSSettingsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getBIOSSettingsResponse")
            kw["aname"] = "_IMachine_getBIOSSettingsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getBIOSSettingsResponse_Holder"
            self.pyclass = Holder

    class IMachine_getRecordingSettings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getRecordingSettings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getRecordingSettings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getRecordingSettings")
            kw["aname"] = "_IMachine_getRecordingSettings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getRecordingSettings_Holder"
            self.pyclass = Holder

    class IMachine_getRecordingSettingsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getRecordingSettingsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getRecordingSettingsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getRecordingSettingsResponse")
            kw["aname"] = "_IMachine_getRecordingSettingsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getRecordingSettingsResponse_Holder"
            self.pyclass = Holder

    class IMachine_getFirmwareType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFirmwareType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFirmwareType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFirmwareType")
            kw["aname"] = "_IMachine_getFirmwareType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getFirmwareType_Holder"
            self.pyclass = Holder

    class IMachine_getFirmwareTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFirmwareTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFirmwareTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","FirmwareType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFirmwareTypeResponse")
            kw["aname"] = "_IMachine_getFirmwareTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getFirmwareTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setFirmwareType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFirmwareType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFirmwareType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FirmwareType",lazy=False)(pname="firmwareType", aname="_firmwareType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFirmwareType")
            kw["aname"] = "_IMachine_setFirmwareType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._firmwareType = None
                    return
            Holder.__name__ = "IMachine_setFirmwareType_Holder"
            self.pyclass = Holder

    class IMachine_setFirmwareTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFirmwareTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFirmwareTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFirmwareTypeResponse")
            kw["aname"] = "_IMachine_setFirmwareTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setFirmwareTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getPointingHIDType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getPointingHIDType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getPointingHIDType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getPointingHIDType")
            kw["aname"] = "_IMachine_getPointingHIDType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getPointingHIDType_Holder"
            self.pyclass = Holder

    class IMachine_getPointingHIDTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getPointingHIDTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getPointingHIDTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","PointingHIDType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getPointingHIDTypeResponse")
            kw["aname"] = "_IMachine_getPointingHIDTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getPointingHIDTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setPointingHIDType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setPointingHIDType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setPointingHIDType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","PointingHIDType",lazy=False)(pname="pointingHIDType", aname="_pointingHIDType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setPointingHIDType")
            kw["aname"] = "_IMachine_setPointingHIDType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._pointingHIDType = None
                    return
            Holder.__name__ = "IMachine_setPointingHIDType_Holder"
            self.pyclass = Holder

    class IMachine_setPointingHIDTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setPointingHIDTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setPointingHIDTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setPointingHIDTypeResponse")
            kw["aname"] = "_IMachine_setPointingHIDTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setPointingHIDTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getKeyboardHIDType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getKeyboardHIDType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getKeyboardHIDType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getKeyboardHIDType")
            kw["aname"] = "_IMachine_getKeyboardHIDType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getKeyboardHIDType_Holder"
            self.pyclass = Holder

    class IMachine_getKeyboardHIDTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getKeyboardHIDTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getKeyboardHIDTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","KeyboardHIDType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getKeyboardHIDTypeResponse")
            kw["aname"] = "_IMachine_getKeyboardHIDTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getKeyboardHIDTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setKeyboardHIDType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setKeyboardHIDType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setKeyboardHIDType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","KeyboardHIDType",lazy=False)(pname="keyboardHIDType", aname="_keyboardHIDType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setKeyboardHIDType")
            kw["aname"] = "_IMachine_setKeyboardHIDType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._keyboardHIDType = None
                    return
            Holder.__name__ = "IMachine_setKeyboardHIDType_Holder"
            self.pyclass = Holder

    class IMachine_setKeyboardHIDTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setKeyboardHIDTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setKeyboardHIDTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setKeyboardHIDTypeResponse")
            kw["aname"] = "_IMachine_setKeyboardHIDTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setKeyboardHIDTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getHPETEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHPETEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHPETEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHPETEnabled")
            kw["aname"] = "_IMachine_getHPETEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getHPETEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getHPETEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHPETEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHPETEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHPETEnabledResponse")
            kw["aname"] = "_IMachine_getHPETEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getHPETEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setHPETEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHPETEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHPETEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="HPETEnabled", aname="_HPETEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHPETEnabled")
            kw["aname"] = "_IMachine_setHPETEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._HPETEnabled = None
                    return
            Holder.__name__ = "IMachine_setHPETEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setHPETEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHPETEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHPETEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHPETEnabledResponse")
            kw["aname"] = "_IMachine_setHPETEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setHPETEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getChipsetType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getChipsetType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getChipsetType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getChipsetType")
            kw["aname"] = "_IMachine_getChipsetType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getChipsetType_Holder"
            self.pyclass = Holder

    class IMachine_getChipsetTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getChipsetTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getChipsetTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ChipsetType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getChipsetTypeResponse")
            kw["aname"] = "_IMachine_getChipsetTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getChipsetTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setChipsetType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setChipsetType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setChipsetType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ChipsetType",lazy=False)(pname="chipsetType", aname="_chipsetType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setChipsetType")
            kw["aname"] = "_IMachine_setChipsetType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._chipsetType = None
                    return
            Holder.__name__ = "IMachine_setChipsetType_Holder"
            self.pyclass = Holder

    class IMachine_setChipsetTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setChipsetTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setChipsetTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setChipsetTypeResponse")
            kw["aname"] = "_IMachine_setChipsetTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setChipsetTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSnapshotFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSnapshotFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSnapshotFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSnapshotFolder")
            kw["aname"] = "_IMachine_getSnapshotFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSnapshotFolder_Holder"
            self.pyclass = Holder

    class IMachine_getSnapshotFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSnapshotFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSnapshotFolderResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSnapshotFolderResponse")
            kw["aname"] = "_IMachine_getSnapshotFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSnapshotFolderResponse_Holder"
            self.pyclass = Holder

    class IMachine_setSnapshotFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setSnapshotFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setSnapshotFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="snapshotFolder", aname="_snapshotFolder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setSnapshotFolder")
            kw["aname"] = "_IMachine_setSnapshotFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._snapshotFolder = None
                    return
            Holder.__name__ = "IMachine_setSnapshotFolder_Holder"
            self.pyclass = Holder

    class IMachine_setSnapshotFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setSnapshotFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setSnapshotFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setSnapshotFolderResponse")
            kw["aname"] = "_IMachine_setSnapshotFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setSnapshotFolderResponse_Holder"
            self.pyclass = Holder

    class IMachine_getVRDEServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getVRDEServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getVRDEServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getVRDEServer")
            kw["aname"] = "_IMachine_getVRDEServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getVRDEServer_Holder"
            self.pyclass = Holder

    class IMachine_getVRDEServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getVRDEServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getVRDEServerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getVRDEServerResponse")
            kw["aname"] = "_IMachine_getVRDEServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getVRDEServerResponse_Holder"
            self.pyclass = Holder

    class IMachine_getEmulatedUSBCardReaderEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getEmulatedUSBCardReaderEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getEmulatedUSBCardReaderEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getEmulatedUSBCardReaderEnabled")
            kw["aname"] = "_IMachine_getEmulatedUSBCardReaderEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getEmulatedUSBCardReaderEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getEmulatedUSBCardReaderEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getEmulatedUSBCardReaderEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getEmulatedUSBCardReaderEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getEmulatedUSBCardReaderEnabledResponse")
            kw["aname"] = "_IMachine_getEmulatedUSBCardReaderEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getEmulatedUSBCardReaderEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setEmulatedUSBCardReaderEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setEmulatedUSBCardReaderEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setEmulatedUSBCardReaderEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="emulatedUSBCardReaderEnabled", aname="_emulatedUSBCardReaderEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setEmulatedUSBCardReaderEnabled")
            kw["aname"] = "_IMachine_setEmulatedUSBCardReaderEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._emulatedUSBCardReaderEnabled = None
                    return
            Holder.__name__ = "IMachine_setEmulatedUSBCardReaderEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setEmulatedUSBCardReaderEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setEmulatedUSBCardReaderEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setEmulatedUSBCardReaderEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setEmulatedUSBCardReaderEnabledResponse")
            kw["aname"] = "_IMachine_setEmulatedUSBCardReaderEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setEmulatedUSBCardReaderEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getMediumAttachments_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMediumAttachments"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMediumAttachments_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMediumAttachments")
            kw["aname"] = "_IMachine_getMediumAttachments"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getMediumAttachments_Holder"
            self.pyclass = Holder

    class IMachine_getMediumAttachmentsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMediumAttachmentsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMediumAttachmentsResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IMediumAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMediumAttachmentsResponse")
            kw["aname"] = "_IMachine_getMediumAttachmentsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_getMediumAttachmentsResponse_Holder"
            self.pyclass = Holder

    class IMachine_getUSBControllers_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getUSBControllers"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getUSBControllers_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getUSBControllers")
            kw["aname"] = "_IMachine_getUSBControllers"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getUSBControllers_Holder"
            self.pyclass = Holder

    class IMachine_getUSBControllersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getUSBControllersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getUSBControllersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getUSBControllersResponse")
            kw["aname"] = "_IMachine_getUSBControllersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_getUSBControllersResponse_Holder"
            self.pyclass = Holder

    class IMachine_getUSBDeviceFilters_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getUSBDeviceFilters"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getUSBDeviceFilters_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getUSBDeviceFilters")
            kw["aname"] = "_IMachine_getUSBDeviceFilters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getUSBDeviceFilters_Holder"
            self.pyclass = Holder

    class IMachine_getUSBDeviceFiltersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getUSBDeviceFiltersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getUSBDeviceFiltersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getUSBDeviceFiltersResponse")
            kw["aname"] = "_IMachine_getUSBDeviceFiltersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getUSBDeviceFiltersResponse_Holder"
            self.pyclass = Holder

    class IMachine_getAudioAdapter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAudioAdapter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAudioAdapter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAudioAdapter")
            kw["aname"] = "_IMachine_getAudioAdapter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getAudioAdapter_Holder"
            self.pyclass = Holder

    class IMachine_getAudioAdapterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAudioAdapterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAudioAdapterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAudioAdapterResponse")
            kw["aname"] = "_IMachine_getAudioAdapterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getAudioAdapterResponse_Holder"
            self.pyclass = Holder

    class IMachine_getStorageControllers_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStorageControllers"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStorageControllers_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStorageControllers")
            kw["aname"] = "_IMachine_getStorageControllers"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getStorageControllers_Holder"
            self.pyclass = Holder

    class IMachine_getStorageControllersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStorageControllersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStorageControllersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStorageControllersResponse")
            kw["aname"] = "_IMachine_getStorageControllersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_getStorageControllersResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSettingsFilePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSettingsFilePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSettingsFilePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSettingsFilePath")
            kw["aname"] = "_IMachine_getSettingsFilePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSettingsFilePath_Holder"
            self.pyclass = Holder

    class IMachine_getSettingsFilePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSettingsFilePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSettingsFilePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSettingsFilePathResponse")
            kw["aname"] = "_IMachine_getSettingsFilePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSettingsFilePathResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSettingsAuxFilePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSettingsAuxFilePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSettingsAuxFilePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSettingsAuxFilePath")
            kw["aname"] = "_IMachine_getSettingsAuxFilePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSettingsAuxFilePath_Holder"
            self.pyclass = Holder

    class IMachine_getSettingsAuxFilePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSettingsAuxFilePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSettingsAuxFilePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSettingsAuxFilePathResponse")
            kw["aname"] = "_IMachine_getSettingsAuxFilePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSettingsAuxFilePathResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSettingsModified_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSettingsModified"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSettingsModified_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSettingsModified")
            kw["aname"] = "_IMachine_getSettingsModified"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSettingsModified_Holder"
            self.pyclass = Holder

    class IMachine_getSettingsModifiedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSettingsModifiedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSettingsModifiedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSettingsModifiedResponse")
            kw["aname"] = "_IMachine_getSettingsModifiedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSettingsModifiedResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSessionState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSessionState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSessionState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSessionState")
            kw["aname"] = "_IMachine_getSessionState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSessionState_Holder"
            self.pyclass = Holder

    class IMachine_getSessionStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSessionStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSessionStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","SessionState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSessionStateResponse")
            kw["aname"] = "_IMachine_getSessionStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSessionStateResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSessionName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSessionName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSessionName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSessionName")
            kw["aname"] = "_IMachine_getSessionName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSessionName_Holder"
            self.pyclass = Holder

    class IMachine_getSessionNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSessionNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSessionNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSessionNameResponse")
            kw["aname"] = "_IMachine_getSessionNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSessionNameResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSessionPID_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSessionPID"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSessionPID_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSessionPID")
            kw["aname"] = "_IMachine_getSessionPID"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSessionPID_Holder"
            self.pyclass = Holder

    class IMachine_getSessionPIDResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSessionPIDResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSessionPIDResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSessionPIDResponse")
            kw["aname"] = "_IMachine_getSessionPIDResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSessionPIDResponse_Holder"
            self.pyclass = Holder

    class IMachine_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getState")
            kw["aname"] = "_IMachine_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getState_Holder"
            self.pyclass = Holder

    class IMachine_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MachineState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStateResponse")
            kw["aname"] = "_IMachine_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getStateResponse_Holder"
            self.pyclass = Holder

    class IMachine_getLastStateChange_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getLastStateChange"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getLastStateChange_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getLastStateChange")
            kw["aname"] = "_IMachine_getLastStateChange"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getLastStateChange_Holder"
            self.pyclass = Holder

    class IMachine_getLastStateChangeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getLastStateChangeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getLastStateChangeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getLastStateChangeResponse")
            kw["aname"] = "_IMachine_getLastStateChangeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getLastStateChangeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getStateFilePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStateFilePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStateFilePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStateFilePath")
            kw["aname"] = "_IMachine_getStateFilePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getStateFilePath_Holder"
            self.pyclass = Holder

    class IMachine_getStateFilePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStateFilePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStateFilePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStateFilePathResponse")
            kw["aname"] = "_IMachine_getStateFilePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getStateFilePathResponse_Holder"
            self.pyclass = Holder

    class IMachine_getLogFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getLogFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getLogFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getLogFolder")
            kw["aname"] = "_IMachine_getLogFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getLogFolder_Holder"
            self.pyclass = Holder

    class IMachine_getLogFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getLogFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getLogFolderResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getLogFolderResponse")
            kw["aname"] = "_IMachine_getLogFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getLogFolderResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCurrentSnapshot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCurrentSnapshot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCurrentSnapshot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCurrentSnapshot")
            kw["aname"] = "_IMachine_getCurrentSnapshot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getCurrentSnapshot_Holder"
            self.pyclass = Holder

    class IMachine_getCurrentSnapshotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCurrentSnapshotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCurrentSnapshotResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCurrentSnapshotResponse")
            kw["aname"] = "_IMachine_getCurrentSnapshotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCurrentSnapshotResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSnapshotCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSnapshotCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSnapshotCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSnapshotCount")
            kw["aname"] = "_IMachine_getSnapshotCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSnapshotCount_Holder"
            self.pyclass = Holder

    class IMachine_getSnapshotCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSnapshotCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSnapshotCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSnapshotCountResponse")
            kw["aname"] = "_IMachine_getSnapshotCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSnapshotCountResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCurrentStateModified_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCurrentStateModified"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCurrentStateModified_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCurrentStateModified")
            kw["aname"] = "_IMachine_getCurrentStateModified"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getCurrentStateModified_Holder"
            self.pyclass = Holder

    class IMachine_getCurrentStateModifiedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCurrentStateModifiedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCurrentStateModifiedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCurrentStateModifiedResponse")
            kw["aname"] = "_IMachine_getCurrentStateModifiedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCurrentStateModifiedResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSharedFolders_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSharedFolders"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSharedFolders_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSharedFolders")
            kw["aname"] = "_IMachine_getSharedFolders"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSharedFolders_Holder"
            self.pyclass = Holder

    class IMachine_getSharedFoldersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSharedFoldersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSharedFoldersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSharedFoldersResponse")
            kw["aname"] = "_IMachine_getSharedFoldersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_getSharedFoldersResponse_Holder"
            self.pyclass = Holder

    class IMachine_getClipboardMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getClipboardMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getClipboardMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getClipboardMode")
            kw["aname"] = "_IMachine_getClipboardMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getClipboardMode_Holder"
            self.pyclass = Holder

    class IMachine_getClipboardModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getClipboardModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getClipboardModeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ClipboardMode",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getClipboardModeResponse")
            kw["aname"] = "_IMachine_getClipboardModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getClipboardModeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setClipboardMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setClipboardMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setClipboardMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ClipboardMode",lazy=False)(pname="clipboardMode", aname="_clipboardMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setClipboardMode")
            kw["aname"] = "_IMachine_setClipboardMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._clipboardMode = None
                    return
            Holder.__name__ = "IMachine_setClipboardMode_Holder"
            self.pyclass = Holder

    class IMachine_setClipboardModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setClipboardModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setClipboardModeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setClipboardModeResponse")
            kw["aname"] = "_IMachine_setClipboardModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setClipboardModeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getDnDMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getDnDMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getDnDMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getDnDMode")
            kw["aname"] = "_IMachine_getDnDMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getDnDMode_Holder"
            self.pyclass = Holder

    class IMachine_getDnDModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getDnDModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getDnDModeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","DnDMode",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getDnDModeResponse")
            kw["aname"] = "_IMachine_getDnDModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getDnDModeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setDnDMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setDnDMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setDnDMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DnDMode",lazy=False)(pname="dnDMode", aname="_dnDMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setDnDMode")
            kw["aname"] = "_IMachine_setDnDMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._dnDMode = None
                    return
            Holder.__name__ = "IMachine_setDnDMode_Holder"
            self.pyclass = Holder

    class IMachine_setDnDModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setDnDModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setDnDModeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setDnDModeResponse")
            kw["aname"] = "_IMachine_setDnDModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setDnDModeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterEnabled")
            kw["aname"] = "_IMachine_getTeleporterEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getTeleporterEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterEnabledResponse")
            kw["aname"] = "_IMachine_getTeleporterEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getTeleporterEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="teleporterEnabled", aname="_teleporterEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterEnabled")
            kw["aname"] = "_IMachine_setTeleporterEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._teleporterEnabled = None
                    return
            Holder.__name__ = "IMachine_setTeleporterEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterEnabledResponse")
            kw["aname"] = "_IMachine_setTeleporterEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setTeleporterEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterPort")
            kw["aname"] = "_IMachine_getTeleporterPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getTeleporterPort_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterPortResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterPortResponse")
            kw["aname"] = "_IMachine_getTeleporterPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getTeleporterPortResponse_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="teleporterPort", aname="_teleporterPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterPort")
            kw["aname"] = "_IMachine_setTeleporterPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._teleporterPort = None
                    return
            Holder.__name__ = "IMachine_setTeleporterPort_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterPortResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterPortResponse")
            kw["aname"] = "_IMachine_setTeleporterPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setTeleporterPortResponse_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterAddress")
            kw["aname"] = "_IMachine_getTeleporterAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getTeleporterAddress_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterAddressResponse")
            kw["aname"] = "_IMachine_getTeleporterAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getTeleporterAddressResponse_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="teleporterAddress", aname="_teleporterAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterAddress")
            kw["aname"] = "_IMachine_setTeleporterAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._teleporterAddress = None
                    return
            Holder.__name__ = "IMachine_setTeleporterAddress_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterAddressResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterAddressResponse")
            kw["aname"] = "_IMachine_setTeleporterAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setTeleporterAddressResponse_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterPassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterPassword"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterPassword_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterPassword")
            kw["aname"] = "_IMachine_getTeleporterPassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getTeleporterPassword_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterPasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterPasswordResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterPasswordResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterPasswordResponse")
            kw["aname"] = "_IMachine_getTeleporterPasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getTeleporterPasswordResponse_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterPassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterPassword"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterPassword_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="teleporterPassword", aname="_teleporterPassword", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterPassword")
            kw["aname"] = "_IMachine_setTeleporterPassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._teleporterPassword = None
                    return
            Holder.__name__ = "IMachine_setTeleporterPassword_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterPasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterPasswordResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterPasswordResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterPasswordResponse")
            kw["aname"] = "_IMachine_setTeleporterPasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setTeleporterPasswordResponse_Holder"
            self.pyclass = Holder

    class IMachine_getParavirtProvider_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getParavirtProvider"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getParavirtProvider_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getParavirtProvider")
            kw["aname"] = "_IMachine_getParavirtProvider"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getParavirtProvider_Holder"
            self.pyclass = Holder

    class IMachine_getParavirtProviderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getParavirtProviderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getParavirtProviderResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ParavirtProvider",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getParavirtProviderResponse")
            kw["aname"] = "_IMachine_getParavirtProviderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getParavirtProviderResponse_Holder"
            self.pyclass = Holder

    class IMachine_setParavirtProvider_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setParavirtProvider"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setParavirtProvider_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ParavirtProvider",lazy=False)(pname="paravirtProvider", aname="_paravirtProvider", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setParavirtProvider")
            kw["aname"] = "_IMachine_setParavirtProvider"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._paravirtProvider = None
                    return
            Holder.__name__ = "IMachine_setParavirtProvider_Holder"
            self.pyclass = Holder

    class IMachine_setParavirtProviderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setParavirtProviderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setParavirtProviderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setParavirtProviderResponse")
            kw["aname"] = "_IMachine_setParavirtProviderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setParavirtProviderResponse_Holder"
            self.pyclass = Holder

    class IMachine_getFaultToleranceState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultToleranceState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultToleranceState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultToleranceState")
            kw["aname"] = "_IMachine_getFaultToleranceState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getFaultToleranceState_Holder"
            self.pyclass = Holder

    class IMachine_getFaultToleranceStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultToleranceStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultToleranceStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","FaultToleranceState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultToleranceStateResponse")
            kw["aname"] = "_IMachine_getFaultToleranceStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getFaultToleranceStateResponse_Holder"
            self.pyclass = Holder

    class IMachine_setFaultToleranceState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultToleranceState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultToleranceState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FaultToleranceState",lazy=False)(pname="faultToleranceState", aname="_faultToleranceState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultToleranceState")
            kw["aname"] = "_IMachine_setFaultToleranceState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._faultToleranceState = None
                    return
            Holder.__name__ = "IMachine_setFaultToleranceState_Holder"
            self.pyclass = Holder

    class IMachine_setFaultToleranceStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultToleranceStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultToleranceStateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultToleranceStateResponse")
            kw["aname"] = "_IMachine_setFaultToleranceStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setFaultToleranceStateResponse_Holder"
            self.pyclass = Holder

    class IMachine_getFaultTolerancePort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultTolerancePort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultTolerancePort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultTolerancePort")
            kw["aname"] = "_IMachine_getFaultTolerancePort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getFaultTolerancePort_Holder"
            self.pyclass = Holder

    class IMachine_getFaultTolerancePortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultTolerancePortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultTolerancePortResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultTolerancePortResponse")
            kw["aname"] = "_IMachine_getFaultTolerancePortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getFaultTolerancePortResponse_Holder"
            self.pyclass = Holder

    class IMachine_setFaultTolerancePort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultTolerancePort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultTolerancePort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="faultTolerancePort", aname="_faultTolerancePort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultTolerancePort")
            kw["aname"] = "_IMachine_setFaultTolerancePort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._faultTolerancePort = None
                    return
            Holder.__name__ = "IMachine_setFaultTolerancePort_Holder"
            self.pyclass = Holder

    class IMachine_setFaultTolerancePortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultTolerancePortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultTolerancePortResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultTolerancePortResponse")
            kw["aname"] = "_IMachine_setFaultTolerancePortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setFaultTolerancePortResponse_Holder"
            self.pyclass = Holder

    class IMachine_getFaultToleranceAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultToleranceAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultToleranceAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultToleranceAddress")
            kw["aname"] = "_IMachine_getFaultToleranceAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getFaultToleranceAddress_Holder"
            self.pyclass = Holder

    class IMachine_getFaultToleranceAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultToleranceAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultToleranceAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultToleranceAddressResponse")
            kw["aname"] = "_IMachine_getFaultToleranceAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getFaultToleranceAddressResponse_Holder"
            self.pyclass = Holder

    class IMachine_setFaultToleranceAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultToleranceAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultToleranceAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="faultToleranceAddress", aname="_faultToleranceAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultToleranceAddress")
            kw["aname"] = "_IMachine_setFaultToleranceAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._faultToleranceAddress = None
                    return
            Holder.__name__ = "IMachine_setFaultToleranceAddress_Holder"
            self.pyclass = Holder

    class IMachine_setFaultToleranceAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultToleranceAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultToleranceAddressResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultToleranceAddressResponse")
            kw["aname"] = "_IMachine_setFaultToleranceAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setFaultToleranceAddressResponse_Holder"
            self.pyclass = Holder

    class IMachine_getFaultTolerancePassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultTolerancePassword"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultTolerancePassword_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultTolerancePassword")
            kw["aname"] = "_IMachine_getFaultTolerancePassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getFaultTolerancePassword_Holder"
            self.pyclass = Holder

    class IMachine_getFaultTolerancePasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultTolerancePasswordResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultTolerancePasswordResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultTolerancePasswordResponse")
            kw["aname"] = "_IMachine_getFaultTolerancePasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getFaultTolerancePasswordResponse_Holder"
            self.pyclass = Holder

    class IMachine_setFaultTolerancePassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultTolerancePassword"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultTolerancePassword_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="faultTolerancePassword", aname="_faultTolerancePassword", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultTolerancePassword")
            kw["aname"] = "_IMachine_setFaultTolerancePassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._faultTolerancePassword = None
                    return
            Holder.__name__ = "IMachine_setFaultTolerancePassword_Holder"
            self.pyclass = Holder

    class IMachine_setFaultTolerancePasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultTolerancePasswordResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultTolerancePasswordResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultTolerancePasswordResponse")
            kw["aname"] = "_IMachine_setFaultTolerancePasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setFaultTolerancePasswordResponse_Holder"
            self.pyclass = Holder

    class IMachine_getFaultToleranceSyncInterval_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultToleranceSyncInterval"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultToleranceSyncInterval_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultToleranceSyncInterval")
            kw["aname"] = "_IMachine_getFaultToleranceSyncInterval"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getFaultToleranceSyncInterval_Holder"
            self.pyclass = Holder

    class IMachine_getFaultToleranceSyncIntervalResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultToleranceSyncIntervalResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultToleranceSyncIntervalResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultToleranceSyncIntervalResponse")
            kw["aname"] = "_IMachine_getFaultToleranceSyncIntervalResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getFaultToleranceSyncIntervalResponse_Holder"
            self.pyclass = Holder

    class IMachine_setFaultToleranceSyncInterval_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultToleranceSyncInterval"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultToleranceSyncInterval_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="faultToleranceSyncInterval", aname="_faultToleranceSyncInterval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultToleranceSyncInterval")
            kw["aname"] = "_IMachine_setFaultToleranceSyncInterval"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._faultToleranceSyncInterval = None
                    return
            Holder.__name__ = "IMachine_setFaultToleranceSyncInterval_Holder"
            self.pyclass = Holder

    class IMachine_setFaultToleranceSyncIntervalResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultToleranceSyncIntervalResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultToleranceSyncIntervalResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultToleranceSyncIntervalResponse")
            kw["aname"] = "_IMachine_setFaultToleranceSyncIntervalResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setFaultToleranceSyncIntervalResponse_Holder"
            self.pyclass = Holder

    class IMachine_getRTCUseUTC_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getRTCUseUTC"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getRTCUseUTC_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getRTCUseUTC")
            kw["aname"] = "_IMachine_getRTCUseUTC"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getRTCUseUTC_Holder"
            self.pyclass = Holder

    class IMachine_getRTCUseUTCResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getRTCUseUTCResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getRTCUseUTCResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getRTCUseUTCResponse")
            kw["aname"] = "_IMachine_getRTCUseUTCResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getRTCUseUTCResponse_Holder"
            self.pyclass = Holder

    class IMachine_setRTCUseUTC_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setRTCUseUTC"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setRTCUseUTC_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="RTCUseUTC", aname="_RTCUseUTC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setRTCUseUTC")
            kw["aname"] = "_IMachine_setRTCUseUTC"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._RTCUseUTC = None
                    return
            Holder.__name__ = "IMachine_setRTCUseUTC_Holder"
            self.pyclass = Holder

    class IMachine_setRTCUseUTCResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setRTCUseUTCResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setRTCUseUTCResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setRTCUseUTCResponse")
            kw["aname"] = "_IMachine_setRTCUseUTCResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setRTCUseUTCResponse_Holder"
            self.pyclass = Holder

    class IMachine_getIOCacheEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getIOCacheEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getIOCacheEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getIOCacheEnabled")
            kw["aname"] = "_IMachine_getIOCacheEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getIOCacheEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getIOCacheEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getIOCacheEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getIOCacheEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getIOCacheEnabledResponse")
            kw["aname"] = "_IMachine_getIOCacheEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getIOCacheEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setIOCacheEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setIOCacheEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setIOCacheEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="IOCacheEnabled", aname="_IOCacheEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setIOCacheEnabled")
            kw["aname"] = "_IMachine_setIOCacheEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IOCacheEnabled = None
                    return
            Holder.__name__ = "IMachine_setIOCacheEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setIOCacheEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setIOCacheEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setIOCacheEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setIOCacheEnabledResponse")
            kw["aname"] = "_IMachine_setIOCacheEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setIOCacheEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getIOCacheSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getIOCacheSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getIOCacheSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getIOCacheSize")
            kw["aname"] = "_IMachine_getIOCacheSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getIOCacheSize_Holder"
            self.pyclass = Holder

    class IMachine_getIOCacheSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getIOCacheSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getIOCacheSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getIOCacheSizeResponse")
            kw["aname"] = "_IMachine_getIOCacheSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getIOCacheSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setIOCacheSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setIOCacheSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setIOCacheSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="IOCacheSize", aname="_IOCacheSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setIOCacheSize")
            kw["aname"] = "_IMachine_setIOCacheSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IOCacheSize = None
                    return
            Holder.__name__ = "IMachine_setIOCacheSize_Holder"
            self.pyclass = Holder

    class IMachine_setIOCacheSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setIOCacheSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setIOCacheSizeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setIOCacheSizeResponse")
            kw["aname"] = "_IMachine_setIOCacheSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setIOCacheSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getPCIDeviceAssignments_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getPCIDeviceAssignments"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getPCIDeviceAssignments_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getPCIDeviceAssignments")
            kw["aname"] = "_IMachine_getPCIDeviceAssignments"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getPCIDeviceAssignments_Holder"
            self.pyclass = Holder

    class IMachine_getPCIDeviceAssignmentsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getPCIDeviceAssignmentsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getPCIDeviceAssignmentsResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IPCIDeviceAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getPCIDeviceAssignmentsResponse")
            kw["aname"] = "_IMachine_getPCIDeviceAssignmentsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_getPCIDeviceAssignmentsResponse_Holder"
            self.pyclass = Holder

    class IMachine_getBandwidthControl_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getBandwidthControl"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getBandwidthControl_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getBandwidthControl")
            kw["aname"] = "_IMachine_getBandwidthControl"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getBandwidthControl_Holder"
            self.pyclass = Holder

    class IMachine_getBandwidthControlResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getBandwidthControlResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getBandwidthControlResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getBandwidthControlResponse")
            kw["aname"] = "_IMachine_getBandwidthControlResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getBandwidthControlResponse_Holder"
            self.pyclass = Holder

    class IMachine_getTracingEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTracingEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTracingEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTracingEnabled")
            kw["aname"] = "_IMachine_getTracingEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getTracingEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getTracingEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTracingEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTracingEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTracingEnabledResponse")
            kw["aname"] = "_IMachine_getTracingEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getTracingEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setTracingEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTracingEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTracingEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="tracingEnabled", aname="_tracingEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTracingEnabled")
            kw["aname"] = "_IMachine_setTracingEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._tracingEnabled = None
                    return
            Holder.__name__ = "IMachine_setTracingEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setTracingEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTracingEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTracingEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTracingEnabledResponse")
            kw["aname"] = "_IMachine_setTracingEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setTracingEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getTracingConfig_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTracingConfig"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTracingConfig_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTracingConfig")
            kw["aname"] = "_IMachine_getTracingConfig"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getTracingConfig_Holder"
            self.pyclass = Holder

    class IMachine_getTracingConfigResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTracingConfigResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTracingConfigResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTracingConfigResponse")
            kw["aname"] = "_IMachine_getTracingConfigResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getTracingConfigResponse_Holder"
            self.pyclass = Holder

    class IMachine_setTracingConfig_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTracingConfig"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTracingConfig_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tracingConfig", aname="_tracingConfig", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTracingConfig")
            kw["aname"] = "_IMachine_setTracingConfig"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._tracingConfig = None
                    return
            Holder.__name__ = "IMachine_setTracingConfig_Holder"
            self.pyclass = Holder

    class IMachine_setTracingConfigResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTracingConfigResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTracingConfigResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTracingConfigResponse")
            kw["aname"] = "_IMachine_setTracingConfigResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setTracingConfigResponse_Holder"
            self.pyclass = Holder

    class IMachine_getAllowTracingToAccessVM_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAllowTracingToAccessVM"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAllowTracingToAccessVM_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAllowTracingToAccessVM")
            kw["aname"] = "_IMachine_getAllowTracingToAccessVM"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getAllowTracingToAccessVM_Holder"
            self.pyclass = Holder

    class IMachine_getAllowTracingToAccessVMResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAllowTracingToAccessVMResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAllowTracingToAccessVMResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAllowTracingToAccessVMResponse")
            kw["aname"] = "_IMachine_getAllowTracingToAccessVMResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getAllowTracingToAccessVMResponse_Holder"
            self.pyclass = Holder

    class IMachine_setAllowTracingToAccessVM_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAllowTracingToAccessVM"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAllowTracingToAccessVM_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="allowTracingToAccessVM", aname="_allowTracingToAccessVM", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAllowTracingToAccessVM")
            kw["aname"] = "_IMachine_setAllowTracingToAccessVM"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._allowTracingToAccessVM = None
                    return
            Holder.__name__ = "IMachine_setAllowTracingToAccessVM_Holder"
            self.pyclass = Holder

    class IMachine_setAllowTracingToAccessVMResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAllowTracingToAccessVMResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAllowTracingToAccessVMResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAllowTracingToAccessVMResponse")
            kw["aname"] = "_IMachine_setAllowTracingToAccessVMResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setAllowTracingToAccessVMResponse_Holder"
            self.pyclass = Holder

    class IMachine_getAutostartEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAutostartEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAutostartEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAutostartEnabled")
            kw["aname"] = "_IMachine_getAutostartEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getAutostartEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getAutostartEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAutostartEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAutostartEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAutostartEnabledResponse")
            kw["aname"] = "_IMachine_getAutostartEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getAutostartEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setAutostartEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAutostartEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAutostartEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="autostartEnabled", aname="_autostartEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAutostartEnabled")
            kw["aname"] = "_IMachine_setAutostartEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._autostartEnabled = None
                    return
            Holder.__name__ = "IMachine_setAutostartEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setAutostartEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAutostartEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAutostartEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAutostartEnabledResponse")
            kw["aname"] = "_IMachine_setAutostartEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setAutostartEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getAutostartDelay_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAutostartDelay"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAutostartDelay_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAutostartDelay")
            kw["aname"] = "_IMachine_getAutostartDelay"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getAutostartDelay_Holder"
            self.pyclass = Holder

    class IMachine_getAutostartDelayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAutostartDelayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAutostartDelayResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAutostartDelayResponse")
            kw["aname"] = "_IMachine_getAutostartDelayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getAutostartDelayResponse_Holder"
            self.pyclass = Holder

    class IMachine_setAutostartDelay_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAutostartDelay"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAutostartDelay_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="autostartDelay", aname="_autostartDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAutostartDelay")
            kw["aname"] = "_IMachine_setAutostartDelay"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._autostartDelay = None
                    return
            Holder.__name__ = "IMachine_setAutostartDelay_Holder"
            self.pyclass = Holder

    class IMachine_setAutostartDelayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAutostartDelayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAutostartDelayResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAutostartDelayResponse")
            kw["aname"] = "_IMachine_setAutostartDelayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setAutostartDelayResponse_Holder"
            self.pyclass = Holder

    class IMachine_getAutostopType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAutostopType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAutostopType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAutostopType")
            kw["aname"] = "_IMachine_getAutostopType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getAutostopType_Holder"
            self.pyclass = Holder

    class IMachine_getAutostopTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAutostopTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAutostopTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AutostopType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAutostopTypeResponse")
            kw["aname"] = "_IMachine_getAutostopTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getAutostopTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setAutostopType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAutostopType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAutostopType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AutostopType",lazy=False)(pname="autostopType", aname="_autostopType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAutostopType")
            kw["aname"] = "_IMachine_setAutostopType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._autostopType = None
                    return
            Holder.__name__ = "IMachine_setAutostopType_Holder"
            self.pyclass = Holder

    class IMachine_setAutostopTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAutostopTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAutostopTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAutostopTypeResponse")
            kw["aname"] = "_IMachine_setAutostopTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setAutostopTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getDefaultFrontend_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getDefaultFrontend"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getDefaultFrontend_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getDefaultFrontend")
            kw["aname"] = "_IMachine_getDefaultFrontend"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getDefaultFrontend_Holder"
            self.pyclass = Holder

    class IMachine_getDefaultFrontendResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getDefaultFrontendResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getDefaultFrontendResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getDefaultFrontendResponse")
            kw["aname"] = "_IMachine_getDefaultFrontendResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getDefaultFrontendResponse_Holder"
            self.pyclass = Holder

    class IMachine_setDefaultFrontend_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setDefaultFrontend"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setDefaultFrontend_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultFrontend", aname="_defaultFrontend", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setDefaultFrontend")
            kw["aname"] = "_IMachine_setDefaultFrontend"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._defaultFrontend = None
                    return
            Holder.__name__ = "IMachine_setDefaultFrontend_Holder"
            self.pyclass = Holder

    class IMachine_setDefaultFrontendResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setDefaultFrontendResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setDefaultFrontendResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setDefaultFrontendResponse")
            kw["aname"] = "_IMachine_setDefaultFrontendResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setDefaultFrontendResponse_Holder"
            self.pyclass = Holder

    class IMachine_getUSBProxyAvailable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getUSBProxyAvailable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getUSBProxyAvailable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getUSBProxyAvailable")
            kw["aname"] = "_IMachine_getUSBProxyAvailable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getUSBProxyAvailable_Holder"
            self.pyclass = Holder

    class IMachine_getUSBProxyAvailableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getUSBProxyAvailableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getUSBProxyAvailableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getUSBProxyAvailableResponse")
            kw["aname"] = "_IMachine_getUSBProxyAvailableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getUSBProxyAvailableResponse_Holder"
            self.pyclass = Holder

    class IMachine_getVMProcessPriority_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getVMProcessPriority"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getVMProcessPriority_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getVMProcessPriority")
            kw["aname"] = "_IMachine_getVMProcessPriority"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getVMProcessPriority_Holder"
            self.pyclass = Holder

    class IMachine_getVMProcessPriorityResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getVMProcessPriorityResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getVMProcessPriorityResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getVMProcessPriorityResponse")
            kw["aname"] = "_IMachine_getVMProcessPriorityResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getVMProcessPriorityResponse_Holder"
            self.pyclass = Holder

    class IMachine_setVMProcessPriority_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setVMProcessPriority"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setVMProcessPriority_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="VMProcessPriority", aname="_VMProcessPriority", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setVMProcessPriority")
            kw["aname"] = "_IMachine_setVMProcessPriority"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._VMProcessPriority = None
                    return
            Holder.__name__ = "IMachine_setVMProcessPriority_Holder"
            self.pyclass = Holder

    class IMachine_setVMProcessPriorityResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setVMProcessPriorityResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setVMProcessPriorityResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setVMProcessPriorityResponse")
            kw["aname"] = "_IMachine_setVMProcessPriorityResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setVMProcessPriorityResponse_Holder"
            self.pyclass = Holder

    class IMachine_getParavirtDebug_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getParavirtDebug"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getParavirtDebug_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getParavirtDebug")
            kw["aname"] = "_IMachine_getParavirtDebug"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getParavirtDebug_Holder"
            self.pyclass = Holder

    class IMachine_getParavirtDebugResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getParavirtDebugResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getParavirtDebugResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getParavirtDebugResponse")
            kw["aname"] = "_IMachine_getParavirtDebugResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getParavirtDebugResponse_Holder"
            self.pyclass = Holder

    class IMachine_setParavirtDebug_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setParavirtDebug"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setParavirtDebug_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="paravirtDebug", aname="_paravirtDebug", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setParavirtDebug")
            kw["aname"] = "_IMachine_setParavirtDebug"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._paravirtDebug = None
                    return
            Holder.__name__ = "IMachine_setParavirtDebug_Holder"
            self.pyclass = Holder

    class IMachine_setParavirtDebugResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setParavirtDebugResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setParavirtDebugResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setParavirtDebugResponse")
            kw["aname"] = "_IMachine_setParavirtDebugResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setParavirtDebugResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUProfile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUProfile"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUProfile_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUProfile")
            kw["aname"] = "_IMachine_getCPUProfile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getCPUProfile_Holder"
            self.pyclass = Holder

    class IMachine_getCPUProfileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUProfileResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUProfileResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUProfileResponse")
            kw["aname"] = "_IMachine_getCPUProfileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCPUProfileResponse_Holder"
            self.pyclass = Holder

    class IMachine_setCPUProfile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUProfile"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUProfile_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="CPUProfile", aname="_CPUProfile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUProfile")
            kw["aname"] = "_IMachine_setCPUProfile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._CPUProfile = None
                    return
            Holder.__name__ = "IMachine_setCPUProfile_Holder"
            self.pyclass = Holder

    class IMachine_setCPUProfileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUProfileResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUProfileResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUProfileResponse")
            kw["aname"] = "_IMachine_setCPUProfileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setCPUProfileResponse_Holder"
            self.pyclass = Holder

    class IMachine_lockMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_lockMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_lockMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="session", aname="_session", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","LockType",lazy=False)(pname="lockType", aname="_lockType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_lockMachine")
            kw["aname"] = "_IMachine_lockMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._session = None
                    self._lockType = None
                    return
            Holder.__name__ = "IMachine_lockMachine_Holder"
            self.pyclass = Holder

    class IMachine_lockMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_lockMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_lockMachineResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_lockMachineResponse")
            kw["aname"] = "_IMachine_lockMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_lockMachineResponse_Holder"
            self.pyclass = Holder

    class IMachine_launchVMProcess_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_launchVMProcess"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_launchVMProcess_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="session", aname="_session", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="environment", aname="_environment", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_launchVMProcess")
            kw["aname"] = "_IMachine_launchVMProcess"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._session = None
                    self._name = None
                    self._environment = None
                    return
            Holder.__name__ = "IMachine_launchVMProcess_Holder"
            self.pyclass = Holder

    class IMachine_launchVMProcessResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_launchVMProcessResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_launchVMProcessResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_launchVMProcessResponse")
            kw["aname"] = "_IMachine_launchVMProcessResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_launchVMProcessResponse_Holder"
            self.pyclass = Holder

    class IMachine_setBootOrder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setBootOrder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setBootOrder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setBootOrder")
            kw["aname"] = "_IMachine_setBootOrder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._position = None
                    self._device = None
                    return
            Holder.__name__ = "IMachine_setBootOrder_Holder"
            self.pyclass = Holder

    class IMachine_setBootOrderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setBootOrderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setBootOrderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setBootOrderResponse")
            kw["aname"] = "_IMachine_setBootOrderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setBootOrderResponse_Holder"
            self.pyclass = Holder

    class IMachine_getBootOrder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getBootOrder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getBootOrder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getBootOrder")
            kw["aname"] = "_IMachine_getBootOrder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._position = None
                    return
            Holder.__name__ = "IMachine_getBootOrder_Holder"
            self.pyclass = Holder

    class IMachine_getBootOrderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getBootOrderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getBootOrderResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getBootOrderResponse")
            kw["aname"] = "_IMachine_getBootOrderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getBootOrderResponse_Holder"
            self.pyclass = Holder

    class IMachine_attachDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_attachDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_attachDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="medium", aname="_medium", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_attachDevice")
            kw["aname"] = "_IMachine_attachDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._type = None
                    self._medium = None
                    return
            Holder.__name__ = "IMachine_attachDevice_Holder"
            self.pyclass = Holder

    class IMachine_attachDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_attachDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_attachDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_attachDeviceResponse")
            kw["aname"] = "_IMachine_attachDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_attachDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_attachDeviceWithoutMedium_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_attachDeviceWithoutMedium"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_attachDeviceWithoutMedium_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_attachDeviceWithoutMedium")
            kw["aname"] = "_IMachine_attachDeviceWithoutMedium"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._type = None
                    return
            Holder.__name__ = "IMachine_attachDeviceWithoutMedium_Holder"
            self.pyclass = Holder

    class IMachine_attachDeviceWithoutMediumResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_attachDeviceWithoutMediumResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_attachDeviceWithoutMediumResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_attachDeviceWithoutMediumResponse")
            kw["aname"] = "_IMachine_attachDeviceWithoutMediumResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_attachDeviceWithoutMediumResponse_Holder"
            self.pyclass = Holder

    class IMachine_detachDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_detachDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_detachDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_detachDevice")
            kw["aname"] = "_IMachine_detachDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    return
            Holder.__name__ = "IMachine_detachDevice_Holder"
            self.pyclass = Holder

    class IMachine_detachDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_detachDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_detachDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_detachDeviceResponse")
            kw["aname"] = "_IMachine_detachDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_detachDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_passthroughDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_passthroughDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_passthroughDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="passthrough", aname="_passthrough", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_passthroughDevice")
            kw["aname"] = "_IMachine_passthroughDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._passthrough = None
                    return
            Holder.__name__ = "IMachine_passthroughDevice_Holder"
            self.pyclass = Holder

    class IMachine_passthroughDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_passthroughDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_passthroughDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_passthroughDeviceResponse")
            kw["aname"] = "_IMachine_passthroughDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_passthroughDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_temporaryEjectDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_temporaryEjectDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_temporaryEjectDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="temporaryEject", aname="_temporaryEject", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_temporaryEjectDevice")
            kw["aname"] = "_IMachine_temporaryEjectDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._temporaryEject = None
                    return
            Holder.__name__ = "IMachine_temporaryEjectDevice_Holder"
            self.pyclass = Holder

    class IMachine_temporaryEjectDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_temporaryEjectDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_temporaryEjectDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_temporaryEjectDeviceResponse")
            kw["aname"] = "_IMachine_temporaryEjectDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_temporaryEjectDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_nonRotationalDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_nonRotationalDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_nonRotationalDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="nonRotational", aname="_nonRotational", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_nonRotationalDevice")
            kw["aname"] = "_IMachine_nonRotationalDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._nonRotational = None
                    return
            Holder.__name__ = "IMachine_nonRotationalDevice_Holder"
            self.pyclass = Holder

    class IMachine_nonRotationalDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_nonRotationalDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_nonRotationalDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_nonRotationalDeviceResponse")
            kw["aname"] = "_IMachine_nonRotationalDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_nonRotationalDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_setAutoDiscardForDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAutoDiscardForDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAutoDiscardForDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="discard", aname="_discard", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAutoDiscardForDevice")
            kw["aname"] = "_IMachine_setAutoDiscardForDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._discard = None
                    return
            Holder.__name__ = "IMachine_setAutoDiscardForDevice_Holder"
            self.pyclass = Holder

    class IMachine_setAutoDiscardForDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAutoDiscardForDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAutoDiscardForDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAutoDiscardForDeviceResponse")
            kw["aname"] = "_IMachine_setAutoDiscardForDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setAutoDiscardForDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_setHotPluggableForDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHotPluggableForDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHotPluggableForDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="hotPluggable", aname="_hotPluggable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHotPluggableForDevice")
            kw["aname"] = "_IMachine_setHotPluggableForDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._hotPluggable = None
                    return
            Holder.__name__ = "IMachine_setHotPluggableForDevice_Holder"
            self.pyclass = Holder

    class IMachine_setHotPluggableForDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHotPluggableForDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHotPluggableForDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHotPluggableForDeviceResponse")
            kw["aname"] = "_IMachine_setHotPluggableForDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setHotPluggableForDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_setBandwidthGroupForDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setBandwidthGroupForDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setBandwidthGroupForDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bandwidthGroup", aname="_bandwidthGroup", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setBandwidthGroupForDevice")
            kw["aname"] = "_IMachine_setBandwidthGroupForDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._bandwidthGroup = None
                    return
            Holder.__name__ = "IMachine_setBandwidthGroupForDevice_Holder"
            self.pyclass = Holder

    class IMachine_setBandwidthGroupForDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setBandwidthGroupForDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setBandwidthGroupForDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setBandwidthGroupForDeviceResponse")
            kw["aname"] = "_IMachine_setBandwidthGroupForDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setBandwidthGroupForDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_setNoBandwidthGroupForDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setNoBandwidthGroupForDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setNoBandwidthGroupForDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setNoBandwidthGroupForDevice")
            kw["aname"] = "_IMachine_setNoBandwidthGroupForDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    return
            Holder.__name__ = "IMachine_setNoBandwidthGroupForDevice_Holder"
            self.pyclass = Holder

    class IMachine_setNoBandwidthGroupForDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setNoBandwidthGroupForDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setNoBandwidthGroupForDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setNoBandwidthGroupForDeviceResponse")
            kw["aname"] = "_IMachine_setNoBandwidthGroupForDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setNoBandwidthGroupForDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_unmountMedium_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_unmountMedium"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_unmountMedium_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="force", aname="_force", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_unmountMedium")
            kw["aname"] = "_IMachine_unmountMedium"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._force = None
                    return
            Holder.__name__ = "IMachine_unmountMedium_Holder"
            self.pyclass = Holder

    class IMachine_unmountMediumResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_unmountMediumResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_unmountMediumResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_unmountMediumResponse")
            kw["aname"] = "_IMachine_unmountMediumResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_unmountMediumResponse_Holder"
            self.pyclass = Holder

    class IMachine_mountMedium_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_mountMedium"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_mountMedium_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="medium", aname="_medium", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="force", aname="_force", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_mountMedium")
            kw["aname"] = "_IMachine_mountMedium"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._medium = None
                    self._force = None
                    return
            Holder.__name__ = "IMachine_mountMedium_Holder"
            self.pyclass = Holder

    class IMachine_mountMediumResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_mountMediumResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_mountMediumResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_mountMediumResponse")
            kw["aname"] = "_IMachine_mountMediumResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_mountMediumResponse_Holder"
            self.pyclass = Holder

    class IMachine_getMedium_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMedium"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMedium_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMedium")
            kw["aname"] = "_IMachine_getMedium"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    return
            Holder.__name__ = "IMachine_getMedium_Holder"
            self.pyclass = Holder

    class IMachine_getMediumResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMediumResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMediumResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMediumResponse")
            kw["aname"] = "_IMachine_getMediumResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getMediumResponse_Holder"
            self.pyclass = Holder

    class IMachine_getMediumAttachmentsOfController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMediumAttachmentsOfController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMediumAttachmentsOfController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMediumAttachmentsOfController")
            kw["aname"] = "_IMachine_getMediumAttachmentsOfController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_getMediumAttachmentsOfController_Holder"
            self.pyclass = Holder

    class IMachine_getMediumAttachmentsOfControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMediumAttachmentsOfControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMediumAttachmentsOfControllerResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IMediumAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMediumAttachmentsOfControllerResponse")
            kw["aname"] = "_IMachine_getMediumAttachmentsOfControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_getMediumAttachmentsOfControllerResponse_Holder"
            self.pyclass = Holder

    class IMachine_getMediumAttachment_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMediumAttachment"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMediumAttachment_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMediumAttachment")
            kw["aname"] = "_IMachine_getMediumAttachment"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    return
            Holder.__name__ = "IMachine_getMediumAttachment_Holder"
            self.pyclass = Holder

    class IMachine_getMediumAttachmentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMediumAttachmentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMediumAttachmentResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IMediumAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMediumAttachmentResponse")
            kw["aname"] = "_IMachine_getMediumAttachmentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getMediumAttachmentResponse_Holder"
            self.pyclass = Holder

    class IMachine_attachHostPCIDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_attachHostPCIDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_attachHostPCIDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="hostAddress", aname="_hostAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="desiredGuestAddress", aname="_desiredGuestAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="tryToUnbind", aname="_tryToUnbind", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_attachHostPCIDevice")
            kw["aname"] = "_IMachine_attachHostPCIDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hostAddress = None
                    self._desiredGuestAddress = None
                    self._tryToUnbind = None
                    return
            Holder.__name__ = "IMachine_attachHostPCIDevice_Holder"
            self.pyclass = Holder

    class IMachine_attachHostPCIDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_attachHostPCIDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_attachHostPCIDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_attachHostPCIDeviceResponse")
            kw["aname"] = "_IMachine_attachHostPCIDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_attachHostPCIDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_detachHostPCIDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_detachHostPCIDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_detachHostPCIDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="hostAddress", aname="_hostAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_detachHostPCIDevice")
            kw["aname"] = "_IMachine_detachHostPCIDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hostAddress = None
                    return
            Holder.__name__ = "IMachine_detachHostPCIDevice_Holder"
            self.pyclass = Holder

    class IMachine_detachHostPCIDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_detachHostPCIDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_detachHostPCIDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_detachHostPCIDeviceResponse")
            kw["aname"] = "_IMachine_detachHostPCIDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_detachHostPCIDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_getNetworkAdapter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getNetworkAdapter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getNetworkAdapter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="slot", aname="_slot", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getNetworkAdapter")
            kw["aname"] = "_IMachine_getNetworkAdapter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._slot = None
                    return
            Holder.__name__ = "IMachine_getNetworkAdapter_Holder"
            self.pyclass = Holder

    class IMachine_getNetworkAdapterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getNetworkAdapterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getNetworkAdapterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getNetworkAdapterResponse")
            kw["aname"] = "_IMachine_getNetworkAdapterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getNetworkAdapterResponse_Holder"
            self.pyclass = Holder

    class IMachine_addStorageController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_addStorageController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_addStorageController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="connectionType", aname="_connectionType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_addStorageController")
            kw["aname"] = "_IMachine_addStorageController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._connectionType = None
                    return
            Holder.__name__ = "IMachine_addStorageController_Holder"
            self.pyclass = Holder

    class IMachine_addStorageControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_addStorageControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_addStorageControllerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_addStorageControllerResponse")
            kw["aname"] = "_IMachine_addStorageControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_addStorageControllerResponse_Holder"
            self.pyclass = Holder

    class IMachine_getStorageControllerByName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStorageControllerByName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStorageControllerByName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStorageControllerByName")
            kw["aname"] = "_IMachine_getStorageControllerByName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_getStorageControllerByName_Holder"
            self.pyclass = Holder

    class IMachine_getStorageControllerByNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStorageControllerByNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStorageControllerByNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStorageControllerByNameResponse")
            kw["aname"] = "_IMachine_getStorageControllerByNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getStorageControllerByNameResponse_Holder"
            self.pyclass = Holder

    class IMachine_getStorageControllerByInstance_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStorageControllerByInstance"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStorageControllerByInstance_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="connectionType", aname="_connectionType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="instance", aname="_instance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStorageControllerByInstance")
            kw["aname"] = "_IMachine_getStorageControllerByInstance"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._connectionType = None
                    self._instance = None
                    return
            Holder.__name__ = "IMachine_getStorageControllerByInstance_Holder"
            self.pyclass = Holder

    class IMachine_getStorageControllerByInstanceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStorageControllerByInstanceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStorageControllerByInstanceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStorageControllerByInstanceResponse")
            kw["aname"] = "_IMachine_getStorageControllerByInstanceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getStorageControllerByInstanceResponse_Holder"
            self.pyclass = Holder

    class IMachine_removeStorageController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeStorageController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeStorageController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeStorageController")
            kw["aname"] = "_IMachine_removeStorageController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_removeStorageController_Holder"
            self.pyclass = Holder

    class IMachine_removeStorageControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeStorageControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeStorageControllerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeStorageControllerResponse")
            kw["aname"] = "_IMachine_removeStorageControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_removeStorageControllerResponse_Holder"
            self.pyclass = Holder

    class IMachine_setStorageControllerBootable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setStorageControllerBootable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setStorageControllerBootable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="bootable", aname="_bootable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setStorageControllerBootable")
            kw["aname"] = "_IMachine_setStorageControllerBootable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._bootable = None
                    return
            Holder.__name__ = "IMachine_setStorageControllerBootable_Holder"
            self.pyclass = Holder

    class IMachine_setStorageControllerBootableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setStorageControllerBootableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setStorageControllerBootableResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setStorageControllerBootableResponse")
            kw["aname"] = "_IMachine_setStorageControllerBootableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setStorageControllerBootableResponse_Holder"
            self.pyclass = Holder

    class IMachine_addUSBController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_addUSBController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_addUSBController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","USBControllerType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_addUSBController")
            kw["aname"] = "_IMachine_addUSBController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._type = None
                    return
            Holder.__name__ = "IMachine_addUSBController_Holder"
            self.pyclass = Holder

    class IMachine_addUSBControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_addUSBControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_addUSBControllerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_addUSBControllerResponse")
            kw["aname"] = "_IMachine_addUSBControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_addUSBControllerResponse_Holder"
            self.pyclass = Holder

    class IMachine_removeUSBController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeUSBController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeUSBController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeUSBController")
            kw["aname"] = "_IMachine_removeUSBController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_removeUSBController_Holder"
            self.pyclass = Holder

    class IMachine_removeUSBControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeUSBControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeUSBControllerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeUSBControllerResponse")
            kw["aname"] = "_IMachine_removeUSBControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_removeUSBControllerResponse_Holder"
            self.pyclass = Holder

    class IMachine_getUSBControllerByName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getUSBControllerByName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getUSBControllerByName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getUSBControllerByName")
            kw["aname"] = "_IMachine_getUSBControllerByName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_getUSBControllerByName_Holder"
            self.pyclass = Holder

    class IMachine_getUSBControllerByNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getUSBControllerByNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getUSBControllerByNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getUSBControllerByNameResponse")
            kw["aname"] = "_IMachine_getUSBControllerByNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getUSBControllerByNameResponse_Holder"
            self.pyclass = Holder

    class IMachine_getUSBControllerCountByType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getUSBControllerCountByType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getUSBControllerCountByType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","USBControllerType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getUSBControllerCountByType")
            kw["aname"] = "_IMachine_getUSBControllerCountByType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._type = None
                    return
            Holder.__name__ = "IMachine_getUSBControllerCountByType_Holder"
            self.pyclass = Holder

    class IMachine_getUSBControllerCountByTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getUSBControllerCountByTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getUSBControllerCountByTypeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getUSBControllerCountByTypeResponse")
            kw["aname"] = "_IMachine_getUSBControllerCountByTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getUSBControllerCountByTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSerialPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSerialPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSerialPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="slot", aname="_slot", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSerialPort")
            kw["aname"] = "_IMachine_getSerialPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._slot = None
                    return
            Holder.__name__ = "IMachine_getSerialPort_Holder"
            self.pyclass = Holder

    class IMachine_getSerialPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSerialPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSerialPortResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSerialPortResponse")
            kw["aname"] = "_IMachine_getSerialPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSerialPortResponse_Holder"
            self.pyclass = Holder

    class IMachine_getParallelPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getParallelPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getParallelPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="slot", aname="_slot", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getParallelPort")
            kw["aname"] = "_IMachine_getParallelPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._slot = None
                    return
            Holder.__name__ = "IMachine_getParallelPort_Holder"
            self.pyclass = Holder

    class IMachine_getParallelPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getParallelPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getParallelPortResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getParallelPortResponse")
            kw["aname"] = "_IMachine_getParallelPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getParallelPortResponse_Holder"
            self.pyclass = Holder

    class IMachine_getExtraDataKeys_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getExtraDataKeys"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getExtraDataKeys_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getExtraDataKeys")
            kw["aname"] = "_IMachine_getExtraDataKeys"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getExtraDataKeys_Holder"
            self.pyclass = Holder

    class IMachine_getExtraDataKeysResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getExtraDataKeysResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getExtraDataKeysResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getExtraDataKeysResponse")
            kw["aname"] = "_IMachine_getExtraDataKeysResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_getExtraDataKeysResponse_Holder"
            self.pyclass = Holder

    class IMachine_getExtraData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getExtraData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getExtraData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getExtraData")
            kw["aname"] = "_IMachine_getExtraData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    return
            Holder.__name__ = "IMachine_getExtraData_Holder"
            self.pyclass = Holder

    class IMachine_getExtraDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getExtraDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getExtraDataResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getExtraDataResponse")
            kw["aname"] = "_IMachine_getExtraDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getExtraDataResponse_Holder"
            self.pyclass = Holder

    class IMachine_setExtraData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setExtraData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setExtraData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setExtraData")
            kw["aname"] = "_IMachine_setExtraData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "IMachine_setExtraData_Holder"
            self.pyclass = Holder

    class IMachine_setExtraDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setExtraDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setExtraDataResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setExtraDataResponse")
            kw["aname"] = "_IMachine_setExtraDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setExtraDataResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","CPUPropertyType",lazy=False)(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUProperty")
            kw["aname"] = "_IMachine_getCPUProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    return
            Holder.__name__ = "IMachine_getCPUProperty_Holder"
            self.pyclass = Holder

    class IMachine_getCPUPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUPropertyResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUPropertyResponse")
            kw["aname"] = "_IMachine_getCPUPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCPUPropertyResponse_Holder"
            self.pyclass = Holder

    class IMachine_setCPUProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","CPUPropertyType",lazy=False)(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUProperty")
            kw["aname"] = "_IMachine_setCPUProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    self._value = None
                    return
            Holder.__name__ = "IMachine_setCPUProperty_Holder"
            self.pyclass = Holder

    class IMachine_setCPUPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUPropertyResponse")
            kw["aname"] = "_IMachine_setCPUPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setCPUPropertyResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUIDLeafByOrdinal_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUIDLeafByOrdinal"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUIDLeafByOrdinal_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ordinal", aname="_ordinal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUIDLeafByOrdinal")
            kw["aname"] = "_IMachine_getCPUIDLeafByOrdinal"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._ordinal = None
                    return
            Holder.__name__ = "IMachine_getCPUIDLeafByOrdinal_Holder"
            self.pyclass = Holder

    class IMachine_getCPUIDLeafByOrdinalResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUIDLeafByOrdinalResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUIDLeafByOrdinalResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="idx", aname="_idx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="idxSub", aname="_idxSub", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEax", aname="_valEax", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEbx", aname="_valEbx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEcx", aname="_valEcx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEdx", aname="_valEdx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUIDLeafByOrdinalResponse")
            kw["aname"] = "_IMachine_getCPUIDLeafByOrdinalResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._idx = None
                    self._idxSub = None
                    self._valEax = None
                    self._valEbx = None
                    self._valEcx = None
                    self._valEdx = None
                    return
            Holder.__name__ = "IMachine_getCPUIDLeafByOrdinalResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUIDLeaf_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUIDLeaf"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUIDLeaf_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="idx", aname="_idx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="idxSub", aname="_idxSub", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUIDLeaf")
            kw["aname"] = "_IMachine_getCPUIDLeaf"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._idx = None
                    self._idxSub = None
                    return
            Holder.__name__ = "IMachine_getCPUIDLeaf_Holder"
            self.pyclass = Holder

    class IMachine_getCPUIDLeafResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUIDLeafResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUIDLeafResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="valEax", aname="_valEax", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEbx", aname="_valEbx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEcx", aname="_valEcx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEdx", aname="_valEdx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUIDLeafResponse")
            kw["aname"] = "_IMachine_getCPUIDLeafResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._valEax = None
                    self._valEbx = None
                    self._valEcx = None
                    self._valEdx = None
                    return
            Holder.__name__ = "IMachine_getCPUIDLeafResponse_Holder"
            self.pyclass = Holder

    class IMachine_setCPUIDLeaf_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUIDLeaf"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUIDLeaf_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="idx", aname="_idx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="idxSub", aname="_idxSub", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEax", aname="_valEax", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEbx", aname="_valEbx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEcx", aname="_valEcx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEdx", aname="_valEdx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUIDLeaf")
            kw["aname"] = "_IMachine_setCPUIDLeaf"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._idx = None
                    self._idxSub = None
                    self._valEax = None
                    self._valEbx = None
                    self._valEcx = None
                    self._valEdx = None
                    return
            Holder.__name__ = "IMachine_setCPUIDLeaf_Holder"
            self.pyclass = Holder

    class IMachine_setCPUIDLeafResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUIDLeafResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUIDLeafResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUIDLeafResponse")
            kw["aname"] = "_IMachine_setCPUIDLeafResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setCPUIDLeafResponse_Holder"
            self.pyclass = Holder

    class IMachine_removeCPUIDLeaf_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeCPUIDLeaf"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeCPUIDLeaf_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="idx", aname="_idx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="idxSub", aname="_idxSub", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeCPUIDLeaf")
            kw["aname"] = "_IMachine_removeCPUIDLeaf"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._idx = None
                    self._idxSub = None
                    return
            Holder.__name__ = "IMachine_removeCPUIDLeaf_Holder"
            self.pyclass = Holder

    class IMachine_removeCPUIDLeafResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeCPUIDLeafResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeCPUIDLeafResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeCPUIDLeafResponse")
            kw["aname"] = "_IMachine_removeCPUIDLeafResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_removeCPUIDLeafResponse_Holder"
            self.pyclass = Holder

    class IMachine_removeAllCPUIDLeaves_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeAllCPUIDLeaves"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeAllCPUIDLeaves_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeAllCPUIDLeaves")
            kw["aname"] = "_IMachine_removeAllCPUIDLeaves"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_removeAllCPUIDLeaves_Holder"
            self.pyclass = Holder

    class IMachine_removeAllCPUIDLeavesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeAllCPUIDLeavesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeAllCPUIDLeavesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeAllCPUIDLeavesResponse")
            kw["aname"] = "_IMachine_removeAllCPUIDLeavesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_removeAllCPUIDLeavesResponse_Holder"
            self.pyclass = Holder

    class IMachine_getHWVirtExProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHWVirtExProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHWVirtExProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","HWVirtExPropertyType",lazy=False)(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHWVirtExProperty")
            kw["aname"] = "_IMachine_getHWVirtExProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    return
            Holder.__name__ = "IMachine_getHWVirtExProperty_Holder"
            self.pyclass = Holder

    class IMachine_getHWVirtExPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHWVirtExPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHWVirtExPropertyResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHWVirtExPropertyResponse")
            kw["aname"] = "_IMachine_getHWVirtExPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getHWVirtExPropertyResponse_Holder"
            self.pyclass = Holder

    class IMachine_setHWVirtExProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHWVirtExProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHWVirtExProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","HWVirtExPropertyType",lazy=False)(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHWVirtExProperty")
            kw["aname"] = "_IMachine_setHWVirtExProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    self._value = None
                    return
            Holder.__name__ = "IMachine_setHWVirtExProperty_Holder"
            self.pyclass = Holder

    class IMachine_setHWVirtExPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHWVirtExPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHWVirtExPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHWVirtExPropertyResponse")
            kw["aname"] = "_IMachine_setHWVirtExPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setHWVirtExPropertyResponse_Holder"
            self.pyclass = Holder

    class IMachine_setSettingsFilePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setSettingsFilePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setSettingsFilePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="settingsFilePath", aname="_settingsFilePath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setSettingsFilePath")
            kw["aname"] = "_IMachine_setSettingsFilePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._settingsFilePath = None
                    return
            Holder.__name__ = "IMachine_setSettingsFilePath_Holder"
            self.pyclass = Holder

    class IMachine_setSettingsFilePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setSettingsFilePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setSettingsFilePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setSettingsFilePathResponse")
            kw["aname"] = "_IMachine_setSettingsFilePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_setSettingsFilePathResponse_Holder"
            self.pyclass = Holder

    class IMachine_saveSettings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_saveSettings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_saveSettings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_saveSettings")
            kw["aname"] = "_IMachine_saveSettings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_saveSettings_Holder"
            self.pyclass = Holder

    class IMachine_saveSettingsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_saveSettingsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_saveSettingsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_saveSettingsResponse")
            kw["aname"] = "_IMachine_saveSettingsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_saveSettingsResponse_Holder"
            self.pyclass = Holder

    class IMachine_discardSettings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_discardSettings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_discardSettings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_discardSettings")
            kw["aname"] = "_IMachine_discardSettings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_discardSettings_Holder"
            self.pyclass = Holder

    class IMachine_discardSettingsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_discardSettingsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_discardSettingsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_discardSettingsResponse")
            kw["aname"] = "_IMachine_discardSettingsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_discardSettingsResponse_Holder"
            self.pyclass = Holder

    class IMachine_unregister_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_unregister"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_unregister_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","CleanupMode",lazy=False)(pname="cleanupMode", aname="_cleanupMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_unregister")
            kw["aname"] = "_IMachine_unregister"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cleanupMode = None
                    return
            Holder.__name__ = "IMachine_unregister_Holder"
            self.pyclass = Holder

    class IMachine_unregisterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_unregisterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_unregisterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_unregisterResponse")
            kw["aname"] = "_IMachine_unregisterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_unregisterResponse_Holder"
            self.pyclass = Holder

    class IMachine_deleteConfig_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_deleteConfig"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_deleteConfig_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="media", aname="_media", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_deleteConfig")
            kw["aname"] = "_IMachine_deleteConfig"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._media = []
                    return
            Holder.__name__ = "IMachine_deleteConfig_Holder"
            self.pyclass = Holder

    class IMachine_deleteConfigResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_deleteConfigResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_deleteConfigResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_deleteConfigResponse")
            kw["aname"] = "_IMachine_deleteConfigResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_deleteConfigResponse_Holder"
            self.pyclass = Holder

    class IMachine_exportTo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_exportTo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_exportTo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="appliance", aname="_appliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_exportTo")
            kw["aname"] = "_IMachine_exportTo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._appliance = None
                    self._location = None
                    return
            Holder.__name__ = "IMachine_exportTo_Holder"
            self.pyclass = Holder

    class IMachine_exportToResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_exportToResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_exportToResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_exportToResponse")
            kw["aname"] = "_IMachine_exportToResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_exportToResponse_Holder"
            self.pyclass = Holder

    class IMachine_findSnapshot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_findSnapshot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_findSnapshot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nameOrId", aname="_nameOrId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_findSnapshot")
            kw["aname"] = "_IMachine_findSnapshot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._nameOrId = None
                    return
            Holder.__name__ = "IMachine_findSnapshot_Holder"
            self.pyclass = Holder

    class IMachine_findSnapshotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_findSnapshotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_findSnapshotResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_findSnapshotResponse")
            kw["aname"] = "_IMachine_findSnapshotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_findSnapshotResponse_Holder"
            self.pyclass = Holder

    class IMachine_createSharedFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_createSharedFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_createSharedFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostPath", aname="_hostPath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="writable", aname="_writable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="automount", aname="_automount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="autoMountPoint", aname="_autoMountPoint", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_createSharedFolder")
            kw["aname"] = "_IMachine_createSharedFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._hostPath = None
                    self._writable = None
                    self._automount = None
                    self._autoMountPoint = None
                    return
            Holder.__name__ = "IMachine_createSharedFolder_Holder"
            self.pyclass = Holder

    class IMachine_createSharedFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_createSharedFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_createSharedFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_createSharedFolderResponse")
            kw["aname"] = "_IMachine_createSharedFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_createSharedFolderResponse_Holder"
            self.pyclass = Holder

    class IMachine_removeSharedFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeSharedFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeSharedFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeSharedFolder")
            kw["aname"] = "_IMachine_removeSharedFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_removeSharedFolder_Holder"
            self.pyclass = Holder

    class IMachine_removeSharedFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeSharedFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeSharedFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeSharedFolderResponse")
            kw["aname"] = "_IMachine_removeSharedFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_removeSharedFolderResponse_Holder"
            self.pyclass = Holder

    class IMachine_canShowConsoleWindow_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_canShowConsoleWindow"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_canShowConsoleWindow_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_canShowConsoleWindow")
            kw["aname"] = "_IMachine_canShowConsoleWindow"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_canShowConsoleWindow_Holder"
            self.pyclass = Holder

    class IMachine_canShowConsoleWindowResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_canShowConsoleWindowResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_canShowConsoleWindowResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_canShowConsoleWindowResponse")
            kw["aname"] = "_IMachine_canShowConsoleWindowResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_canShowConsoleWindowResponse_Holder"
            self.pyclass = Holder

    class IMachine_showConsoleWindow_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_showConsoleWindow"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_showConsoleWindow_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_showConsoleWindow")
            kw["aname"] = "_IMachine_showConsoleWindow"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_showConsoleWindow_Holder"
            self.pyclass = Holder

    class IMachine_showConsoleWindowResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_showConsoleWindowResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_showConsoleWindowResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_showConsoleWindowResponse")
            kw["aname"] = "_IMachine_showConsoleWindowResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_showConsoleWindowResponse_Holder"
            self.pyclass = Holder

    class IMachine_getGuestProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGuestProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGuestProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGuestProperty")
            kw["aname"] = "_IMachine_getGuestProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_getGuestProperty_Holder"
            self.pyclass = Holder

    class IMachine_getGuestPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGuestPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGuestPropertyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="timestamp", aname="_timestamp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGuestPropertyResponse")
            kw["aname"] = "_IMachine_getGuestPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    self._timestamp = None
                    self._flags = None
                    return
            Holder.__name__ = "IMachine_getGuestPropertyResponse_Holder"
            self.pyclass = Holder

    class IMachine_getGuestPropertyValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGuestPropertyValue"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGuestPropertyValue_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGuestPropertyValue")
            kw["aname"] = "_IMachine_getGuestPropertyValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    return
            Holder.__name__ = "IMachine_getGuestPropertyValue_Holder"
            self.pyclass = Holder

    class IMachine_getGuestPropertyValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGuestPropertyValueResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGuestPropertyValueResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGuestPropertyValueResponse")
            kw["aname"] = "_IMachine_getGuestPropertyValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getGuestPropertyValueResponse_Holder"
            self.pyclass = Holder

    class IMachine_getGuestPropertyTimestamp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGuestPropertyTimestamp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGuestPropertyTimestamp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGuestPropertyTimestamp")
            kw["aname"] = "_IMachine_getGuestPropertyTimestamp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    return
            Holder.__name__ = "IMachine_getGuestPropertyTimestamp_Holder"
            self.pyclass = Holder

    class IMachine_getGuestPropertyTimestampResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGuestPropertyTimestampResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGuestPropertyTimestampResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGuestPropertyTimestampResponse")
            kw["aname"] = "_IMachine_getGuestPropertyTimestampResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getGuestPropertyTimestampResponse_Holder"
            self.pyclass = Holder

    class IMachine_setGuestProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setGuestProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setGuestProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setGuestProperty")
            kw["aname"] = "_IMachine_setGuestProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    self._value = None
                    self._flags = None
                    return
            Holder.__name__ = "IMachine_setGuestProperty_Holder"
            self.pyclass = Holder

    class IMachine_setGuestPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setGuestPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setGuestPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setGuestPropertyResponse")
            kw["aname"] = "_IMachine_setGuestPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setGuestPropertyResponse_Holder"
            self.pyclass = Holder

    class IMachine_setGuestPropertyValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setGuestPropertyValue"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setGuestPropertyValue_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setGuestPropertyValue")
            kw["aname"] = "_IMachine_setGuestPropertyValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    self._value = None
                    return
            Holder.__name__ = "IMachine_setGuestPropertyValue_Holder"
            self.pyclass = Holder

    class IMachine_setGuestPropertyValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setGuestPropertyValueResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setGuestPropertyValueResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setGuestPropertyValueResponse")
            kw["aname"] = "_IMachine_setGuestPropertyValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setGuestPropertyValueResponse_Holder"
            self.pyclass = Holder

    class IMachine_deleteGuestProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_deleteGuestProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_deleteGuestProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_deleteGuestProperty")
            kw["aname"] = "_IMachine_deleteGuestProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_deleteGuestProperty_Holder"
            self.pyclass = Holder

    class IMachine_deleteGuestPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_deleteGuestPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_deleteGuestPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_deleteGuestPropertyResponse")
            kw["aname"] = "_IMachine_deleteGuestPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_deleteGuestPropertyResponse_Holder"
            self.pyclass = Holder

    class IMachine_enumerateGuestProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_enumerateGuestProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_enumerateGuestProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="patterns", aname="_patterns", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_enumerateGuestProperties")
            kw["aname"] = "_IMachine_enumerateGuestProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._patterns = None
                    return
            Holder.__name__ = "IMachine_enumerateGuestProperties_Holder"
            self.pyclass = Holder

    class IMachine_enumerateGuestPropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_enumerateGuestPropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_enumerateGuestPropertiesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="names", aname="_names", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="values", aname="_values", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="timestamps", aname="_timestamps", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_enumerateGuestPropertiesResponse")
            kw["aname"] = "_IMachine_enumerateGuestPropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._names = []
                    self._values = []
                    self._timestamps = []
                    self._flags = []
                    return
            Holder.__name__ = "IMachine_enumerateGuestPropertiesResponse_Holder"
            self.pyclass = Holder

    class IMachine_querySavedGuestScreenInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_querySavedGuestScreenInfo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_querySavedGuestScreenInfo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_querySavedGuestScreenInfo")
            kw["aname"] = "_IMachine_querySavedGuestScreenInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IMachine_querySavedGuestScreenInfo_Holder"
            self.pyclass = Holder

    class IMachine_querySavedGuestScreenInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_querySavedGuestScreenInfoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_querySavedGuestScreenInfoResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="originX", aname="_originX", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="originY", aname="_originY", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_querySavedGuestScreenInfoResponse")
            kw["aname"] = "_IMachine_querySavedGuestScreenInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._originX = None
                    self._originY = None
                    self._width = None
                    self._height = None
                    self._enabled = None
                    return
            Holder.__name__ = "IMachine_querySavedGuestScreenInfoResponse_Holder"
            self.pyclass = Holder

    class IMachine_readSavedThumbnailToArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_readSavedThumbnailToArray"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_readSavedThumbnailToArray_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","BitmapFormat",lazy=False)(pname="bitmapFormat", aname="_bitmapFormat", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_readSavedThumbnailToArray")
            kw["aname"] = "_IMachine_readSavedThumbnailToArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._bitmapFormat = None
                    return
            Holder.__name__ = "IMachine_readSavedThumbnailToArray_Holder"
            self.pyclass = Holder

    class IMachine_readSavedThumbnailToArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_readSavedThumbnailToArrayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_readSavedThumbnailToArrayResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_readSavedThumbnailToArrayResponse")
            kw["aname"] = "_IMachine_readSavedThumbnailToArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._width = None
                    self._height = None
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_readSavedThumbnailToArrayResponse_Holder"
            self.pyclass = Holder

    class IMachine_querySavedScreenshotInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_querySavedScreenshotInfo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_querySavedScreenshotInfo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_querySavedScreenshotInfo")
            kw["aname"] = "_IMachine_querySavedScreenshotInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IMachine_querySavedScreenshotInfo_Holder"
            self.pyclass = Holder

    class IMachine_querySavedScreenshotInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_querySavedScreenshotInfoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_querySavedScreenshotInfoResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","BitmapFormat",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_querySavedScreenshotInfoResponse")
            kw["aname"] = "_IMachine_querySavedScreenshotInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._width = None
                    self._height = None
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_querySavedScreenshotInfoResponse_Holder"
            self.pyclass = Holder

    class IMachine_readSavedScreenshotToArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_readSavedScreenshotToArray"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_readSavedScreenshotToArray_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","BitmapFormat",lazy=False)(pname="bitmapFormat", aname="_bitmapFormat", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_readSavedScreenshotToArray")
            kw["aname"] = "_IMachine_readSavedScreenshotToArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._bitmapFormat = None
                    return
            Holder.__name__ = "IMachine_readSavedScreenshotToArray_Holder"
            self.pyclass = Holder

    class IMachine_readSavedScreenshotToArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_readSavedScreenshotToArrayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_readSavedScreenshotToArrayResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_readSavedScreenshotToArrayResponse")
            kw["aname"] = "_IMachine_readSavedScreenshotToArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._width = None
                    self._height = None
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_readSavedScreenshotToArrayResponse_Holder"
            self.pyclass = Holder

    class IMachine_hotPlugCPU_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_hotPlugCPU"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_hotPlugCPU_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpu", aname="_cpu", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_hotPlugCPU")
            kw["aname"] = "_IMachine_hotPlugCPU"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpu = None
                    return
            Holder.__name__ = "IMachine_hotPlugCPU_Holder"
            self.pyclass = Holder

    class IMachine_hotPlugCPUResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_hotPlugCPUResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_hotPlugCPUResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_hotPlugCPUResponse")
            kw["aname"] = "_IMachine_hotPlugCPUResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_hotPlugCPUResponse_Holder"
            self.pyclass = Holder

    class IMachine_hotUnplugCPU_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_hotUnplugCPU"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_hotUnplugCPU_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpu", aname="_cpu", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_hotUnplugCPU")
            kw["aname"] = "_IMachine_hotUnplugCPU"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpu = None
                    return
            Holder.__name__ = "IMachine_hotUnplugCPU_Holder"
            self.pyclass = Holder

    class IMachine_hotUnplugCPUResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_hotUnplugCPUResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_hotUnplugCPUResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_hotUnplugCPUResponse")
            kw["aname"] = "_IMachine_hotUnplugCPUResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_hotUnplugCPUResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpu", aname="_cpu", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUStatus")
            kw["aname"] = "_IMachine_getCPUStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpu = None
                    return
            Holder.__name__ = "IMachine_getCPUStatus_Holder"
            self.pyclass = Holder

    class IMachine_getCPUStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUStatusResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUStatusResponse")
            kw["aname"] = "_IMachine_getCPUStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCPUStatusResponse_Holder"
            self.pyclass = Holder

    class IMachine_getEffectiveParavirtProvider_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getEffectiveParavirtProvider"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getEffectiveParavirtProvider_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getEffectiveParavirtProvider")
            kw["aname"] = "_IMachine_getEffectiveParavirtProvider"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getEffectiveParavirtProvider_Holder"
            self.pyclass = Holder

    class IMachine_getEffectiveParavirtProviderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getEffectiveParavirtProviderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getEffectiveParavirtProviderResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ParavirtProvider",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getEffectiveParavirtProviderResponse")
            kw["aname"] = "_IMachine_getEffectiveParavirtProviderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getEffectiveParavirtProviderResponse_Holder"
            self.pyclass = Holder

    class IMachine_queryLogFilename_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_queryLogFilename"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_queryLogFilename_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="idx", aname="_idx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_queryLogFilename")
            kw["aname"] = "_IMachine_queryLogFilename"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._idx = None
                    return
            Holder.__name__ = "IMachine_queryLogFilename_Holder"
            self.pyclass = Holder

    class IMachine_queryLogFilenameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_queryLogFilenameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_queryLogFilenameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_queryLogFilenameResponse")
            kw["aname"] = "_IMachine_queryLogFilenameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_queryLogFilenameResponse_Holder"
            self.pyclass = Holder

    class IMachine_readLog_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_readLog"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_readLog_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="idx", aname="_idx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="offset", aname="_offset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_readLog")
            kw["aname"] = "_IMachine_readLog"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._idx = None
                    self._offset = None
                    self._size = None
                    return
            Holder.__name__ = "IMachine_readLog_Holder"
            self.pyclass = Holder

    class IMachine_readLogResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_readLogResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_readLogResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_readLogResponse")
            kw["aname"] = "_IMachine_readLogResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_readLogResponse_Holder"
            self.pyclass = Holder

    class IMachine_cloneTo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_cloneTo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_cloneTo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="target", aname="_target", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","CloneMode",lazy=False)(pname="mode", aname="_mode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","CloneOptions",lazy=False)(pname="options", aname="_options", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_cloneTo")
            kw["aname"] = "_IMachine_cloneTo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._target = None
                    self._mode = None
                    self._options = []
                    return
            Holder.__name__ = "IMachine_cloneTo_Holder"
            self.pyclass = Holder

    class IMachine_cloneToResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_cloneToResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_cloneToResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_cloneToResponse")
            kw["aname"] = "_IMachine_cloneToResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_cloneToResponse_Holder"
            self.pyclass = Holder

    class IMachine_moveTo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_moveTo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_moveTo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="folder", aname="_folder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_moveTo")
            kw["aname"] = "_IMachine_moveTo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._folder = None
                    self._type = None
                    return
            Holder.__name__ = "IMachine_moveTo_Holder"
            self.pyclass = Holder

    class IMachine_moveToResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_moveToResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_moveToResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_moveToResponse")
            kw["aname"] = "_IMachine_moveToResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_moveToResponse_Holder"
            self.pyclass = Holder

    class IMachine_saveState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_saveState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_saveState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_saveState")
            kw["aname"] = "_IMachine_saveState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_saveState_Holder"
            self.pyclass = Holder

    class IMachine_saveStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_saveStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_saveStateResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_saveStateResponse")
            kw["aname"] = "_IMachine_saveStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_saveStateResponse_Holder"
            self.pyclass = Holder

    class IMachine_adoptSavedState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_adoptSavedState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_adoptSavedState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="savedStateFile", aname="_savedStateFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_adoptSavedState")
            kw["aname"] = "_IMachine_adoptSavedState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._savedStateFile = None
                    return
            Holder.__name__ = "IMachine_adoptSavedState_Holder"
            self.pyclass = Holder

    class IMachine_adoptSavedStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_adoptSavedStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_adoptSavedStateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_adoptSavedStateResponse")
            kw["aname"] = "_IMachine_adoptSavedStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_adoptSavedStateResponse_Holder"
            self.pyclass = Holder

    class IMachine_discardSavedState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_discardSavedState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_discardSavedState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="fRemoveFile", aname="_fRemoveFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_discardSavedState")
            kw["aname"] = "_IMachine_discardSavedState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._fRemoveFile = None
                    return
            Holder.__name__ = "IMachine_discardSavedState_Holder"
            self.pyclass = Holder

    class IMachine_discardSavedStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_discardSavedStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_discardSavedStateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_discardSavedStateResponse")
            kw["aname"] = "_IMachine_discardSavedStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_discardSavedStateResponse_Holder"
            self.pyclass = Holder

    class IMachine_takeSnapshot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_takeSnapshot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_takeSnapshot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="pause", aname="_pause", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_takeSnapshot")
            kw["aname"] = "_IMachine_takeSnapshot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._description = None
                    self._pause = None
                    return
            Holder.__name__ = "IMachine_takeSnapshot_Holder"
            self.pyclass = Holder

    class IMachine_takeSnapshotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_takeSnapshotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_takeSnapshotResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_takeSnapshotResponse")
            kw["aname"] = "_IMachine_takeSnapshotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_takeSnapshotResponse_Holder"
            self.pyclass = Holder

    class IMachine_deleteSnapshot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_deleteSnapshot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_deleteSnapshot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_deleteSnapshot")
            kw["aname"] = "_IMachine_deleteSnapshot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IMachine_deleteSnapshot_Holder"
            self.pyclass = Holder

    class IMachine_deleteSnapshotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_deleteSnapshotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_deleteSnapshotResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_deleteSnapshotResponse")
            kw["aname"] = "_IMachine_deleteSnapshotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_deleteSnapshotResponse_Holder"
            self.pyclass = Holder

    class IMachine_deleteSnapshotAndAllChildren_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_deleteSnapshotAndAllChildren"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_deleteSnapshotAndAllChildren_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_deleteSnapshotAndAllChildren")
            kw["aname"] = "_IMachine_deleteSnapshotAndAllChildren"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IMachine_deleteSnapshotAndAllChildren_Holder"
            self.pyclass = Holder

    class IMachine_deleteSnapshotAndAllChildrenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_deleteSnapshotAndAllChildrenResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_deleteSnapshotAndAllChildrenResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_deleteSnapshotAndAllChildrenResponse")
            kw["aname"] = "_IMachine_deleteSnapshotAndAllChildrenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_deleteSnapshotAndAllChildrenResponse_Holder"
            self.pyclass = Holder

    class IMachine_deleteSnapshotRange_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_deleteSnapshotRange"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_deleteSnapshotRange_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="startId", aname="_startId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="endId", aname="_endId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_deleteSnapshotRange")
            kw["aname"] = "_IMachine_deleteSnapshotRange"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._startId = None
                    self._endId = None
                    return
            Holder.__name__ = "IMachine_deleteSnapshotRange_Holder"
            self.pyclass = Holder

    class IMachine_deleteSnapshotRangeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_deleteSnapshotRangeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_deleteSnapshotRangeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_deleteSnapshotRangeResponse")
            kw["aname"] = "_IMachine_deleteSnapshotRangeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_deleteSnapshotRangeResponse_Holder"
            self.pyclass = Holder

    class IMachine_restoreSnapshot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_restoreSnapshot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_restoreSnapshot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="snapshot", aname="_snapshot", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_restoreSnapshot")
            kw["aname"] = "_IMachine_restoreSnapshot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._snapshot = None
                    return
            Holder.__name__ = "IMachine_restoreSnapshot_Holder"
            self.pyclass = Holder

    class IMachine_restoreSnapshotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_restoreSnapshotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_restoreSnapshotResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_restoreSnapshotResponse")
            kw["aname"] = "_IMachine_restoreSnapshotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_restoreSnapshotResponse_Holder"
            self.pyclass = Holder

    class IMachine_applyDefaults_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_applyDefaults"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_applyDefaults_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_applyDefaults")
            kw["aname"] = "_IMachine_applyDefaults"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._flags = None
                    return
            Holder.__name__ = "IMachine_applyDefaults_Holder"
            self.pyclass = Holder

    class IMachine_applyDefaultsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_applyDefaultsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_applyDefaultsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_applyDefaultsResponse")
            kw["aname"] = "_IMachine_applyDefaultsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_applyDefaultsResponse_Holder"
            self.pyclass = Holder

    class IEmulatedUSB_getWebcams_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEmulatedUSB_getWebcams"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEmulatedUSB_getWebcams_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEmulatedUSB_getWebcams")
            kw["aname"] = "_IEmulatedUSB_getWebcams"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEmulatedUSB_getWebcams_Holder"
            self.pyclass = Holder

    class IEmulatedUSB_getWebcamsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEmulatedUSB_getWebcamsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEmulatedUSB_getWebcamsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEmulatedUSB_getWebcamsResponse")
            kw["aname"] = "_IEmulatedUSB_getWebcamsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IEmulatedUSB_getWebcamsResponse_Holder"
            self.pyclass = Holder

    class IEmulatedUSB_webcamAttach_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEmulatedUSB_webcamAttach"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEmulatedUSB_webcamAttach_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="settings", aname="_settings", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEmulatedUSB_webcamAttach")
            kw["aname"] = "_IEmulatedUSB_webcamAttach"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    self._settings = None
                    return
            Holder.__name__ = "IEmulatedUSB_webcamAttach_Holder"
            self.pyclass = Holder

    class IEmulatedUSB_webcamAttachResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEmulatedUSB_webcamAttachResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEmulatedUSB_webcamAttachResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IEmulatedUSB_webcamAttachResponse")
            kw["aname"] = "_IEmulatedUSB_webcamAttachResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IEmulatedUSB_webcamAttachResponse_Holder"
            self.pyclass = Holder

    class IEmulatedUSB_webcamDetach_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEmulatedUSB_webcamDetach"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEmulatedUSB_webcamDetach_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEmulatedUSB_webcamDetach")
            kw["aname"] = "_IEmulatedUSB_webcamDetach"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    return
            Holder.__name__ = "IEmulatedUSB_webcamDetach_Holder"
            self.pyclass = Holder

    class IEmulatedUSB_webcamDetachResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEmulatedUSB_webcamDetachResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEmulatedUSB_webcamDetachResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IEmulatedUSB_webcamDetachResponse")
            kw["aname"] = "_IEmulatedUSB_webcamDetachResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IEmulatedUSB_webcamDetachResponse_Holder"
            self.pyclass = Holder

    class IConsole_getMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getMachine")
            kw["aname"] = "_IConsole_getMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getMachine_Holder"
            self.pyclass = Holder

    class IConsole_getMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getMachineResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getMachineResponse")
            kw["aname"] = "_IConsole_getMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getMachineResponse_Holder"
            self.pyclass = Holder

    class IConsole_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getState")
            kw["aname"] = "_IConsole_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getState_Holder"
            self.pyclass = Holder

    class IConsole_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MachineState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getStateResponse")
            kw["aname"] = "_IConsole_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getStateResponse_Holder"
            self.pyclass = Holder

    class IConsole_getGuest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getGuest"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getGuest_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getGuest")
            kw["aname"] = "_IConsole_getGuest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getGuest_Holder"
            self.pyclass = Holder

    class IConsole_getGuestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getGuestResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getGuestResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getGuestResponse")
            kw["aname"] = "_IConsole_getGuestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getGuestResponse_Holder"
            self.pyclass = Holder

    class IConsole_getKeyboard_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getKeyboard"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getKeyboard_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getKeyboard")
            kw["aname"] = "_IConsole_getKeyboard"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getKeyboard_Holder"
            self.pyclass = Holder

    class IConsole_getKeyboardResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getKeyboardResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getKeyboardResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getKeyboardResponse")
            kw["aname"] = "_IConsole_getKeyboardResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getKeyboardResponse_Holder"
            self.pyclass = Holder

    class IConsole_getMouse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getMouse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getMouse_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getMouse")
            kw["aname"] = "_IConsole_getMouse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getMouse_Holder"
            self.pyclass = Holder

    class IConsole_getMouseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getMouseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getMouseResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getMouseResponse")
            kw["aname"] = "_IConsole_getMouseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getMouseResponse_Holder"
            self.pyclass = Holder

    class IConsole_getDisplay_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getDisplay"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getDisplay_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getDisplay")
            kw["aname"] = "_IConsole_getDisplay"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getDisplay_Holder"
            self.pyclass = Holder

    class IConsole_getDisplayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getDisplayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getDisplayResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getDisplayResponse")
            kw["aname"] = "_IConsole_getDisplayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getDisplayResponse_Holder"
            self.pyclass = Holder

    class IConsole_getDebugger_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getDebugger"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getDebugger_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getDebugger")
            kw["aname"] = "_IConsole_getDebugger"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getDebugger_Holder"
            self.pyclass = Holder

    class IConsole_getDebuggerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getDebuggerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getDebuggerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getDebuggerResponse")
            kw["aname"] = "_IConsole_getDebuggerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getDebuggerResponse_Holder"
            self.pyclass = Holder

    class IConsole_getUSBDevices_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getUSBDevices"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getUSBDevices_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getUSBDevices")
            kw["aname"] = "_IConsole_getUSBDevices"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getUSBDevices_Holder"
            self.pyclass = Holder

    class IConsole_getUSBDevicesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getUSBDevicesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getUSBDevicesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getUSBDevicesResponse")
            kw["aname"] = "_IConsole_getUSBDevicesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IConsole_getUSBDevicesResponse_Holder"
            self.pyclass = Holder

    class IConsole_getRemoteUSBDevices_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getRemoteUSBDevices"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getRemoteUSBDevices_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getRemoteUSBDevices")
            kw["aname"] = "_IConsole_getRemoteUSBDevices"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getRemoteUSBDevices_Holder"
            self.pyclass = Holder

    class IConsole_getRemoteUSBDevicesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getRemoteUSBDevicesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getRemoteUSBDevicesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getRemoteUSBDevicesResponse")
            kw["aname"] = "_IConsole_getRemoteUSBDevicesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IConsole_getRemoteUSBDevicesResponse_Holder"
            self.pyclass = Holder

    class IConsole_getSharedFolders_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getSharedFolders"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getSharedFolders_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getSharedFolders")
            kw["aname"] = "_IConsole_getSharedFolders"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getSharedFolders_Holder"
            self.pyclass = Holder

    class IConsole_getSharedFoldersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getSharedFoldersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getSharedFoldersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getSharedFoldersResponse")
            kw["aname"] = "_IConsole_getSharedFoldersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IConsole_getSharedFoldersResponse_Holder"
            self.pyclass = Holder

    class IConsole_getVRDEServerInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getVRDEServerInfo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getVRDEServerInfo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getVRDEServerInfo")
            kw["aname"] = "_IConsole_getVRDEServerInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getVRDEServerInfo_Holder"
            self.pyclass = Holder

    class IConsole_getVRDEServerInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getVRDEServerInfoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getVRDEServerInfoResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IVRDEServerInfo",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getVRDEServerInfoResponse")
            kw["aname"] = "_IConsole_getVRDEServerInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getVRDEServerInfoResponse_Holder"
            self.pyclass = Holder

    class IConsole_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getEventSource")
            kw["aname"] = "_IConsole_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getEventSource_Holder"
            self.pyclass = Holder

    class IConsole_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getEventSourceResponse")
            kw["aname"] = "_IConsole_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class IConsole_getAttachedPCIDevices_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getAttachedPCIDevices"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getAttachedPCIDevices_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getAttachedPCIDevices")
            kw["aname"] = "_IConsole_getAttachedPCIDevices"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getAttachedPCIDevices_Holder"
            self.pyclass = Holder

    class IConsole_getAttachedPCIDevicesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getAttachedPCIDevicesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getAttachedPCIDevicesResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IPCIDeviceAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getAttachedPCIDevicesResponse")
            kw["aname"] = "_IConsole_getAttachedPCIDevicesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IConsole_getAttachedPCIDevicesResponse_Holder"
            self.pyclass = Holder

    class IConsole_getUseHostClipboard_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getUseHostClipboard"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getUseHostClipboard_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getUseHostClipboard")
            kw["aname"] = "_IConsole_getUseHostClipboard"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getUseHostClipboard_Holder"
            self.pyclass = Holder

    class IConsole_getUseHostClipboardResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getUseHostClipboardResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getUseHostClipboardResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getUseHostClipboardResponse")
            kw["aname"] = "_IConsole_getUseHostClipboardResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getUseHostClipboardResponse_Holder"
            self.pyclass = Holder

    class IConsole_setUseHostClipboard_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_setUseHostClipboard"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_setUseHostClipboard_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="useHostClipboard", aname="_useHostClipboard", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_setUseHostClipboard")
            kw["aname"] = "_IConsole_setUseHostClipboard"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._useHostClipboard = None
                    return
            Holder.__name__ = "IConsole_setUseHostClipboard_Holder"
            self.pyclass = Holder

    class IConsole_setUseHostClipboardResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_setUseHostClipboardResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_setUseHostClipboardResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_setUseHostClipboardResponse")
            kw["aname"] = "_IConsole_setUseHostClipboardResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_setUseHostClipboardResponse_Holder"
            self.pyclass = Holder

    class IConsole_getEmulatedUSB_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getEmulatedUSB"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getEmulatedUSB_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getEmulatedUSB")
            kw["aname"] = "_IConsole_getEmulatedUSB"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getEmulatedUSB_Holder"
            self.pyclass = Holder

    class IConsole_getEmulatedUSBResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getEmulatedUSBResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getEmulatedUSBResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getEmulatedUSBResponse")
            kw["aname"] = "_IConsole_getEmulatedUSBResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getEmulatedUSBResponse_Holder"
            self.pyclass = Holder

    class IConsole_powerUp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerUp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerUp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerUp")
            kw["aname"] = "_IConsole_powerUp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_powerUp_Holder"
            self.pyclass = Holder

    class IConsole_powerUpResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerUpResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerUpResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerUpResponse")
            kw["aname"] = "_IConsole_powerUpResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_powerUpResponse_Holder"
            self.pyclass = Holder

    class IConsole_powerUpPaused_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerUpPaused"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerUpPaused_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerUpPaused")
            kw["aname"] = "_IConsole_powerUpPaused"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_powerUpPaused_Holder"
            self.pyclass = Holder

    class IConsole_powerUpPausedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerUpPausedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerUpPausedResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerUpPausedResponse")
            kw["aname"] = "_IConsole_powerUpPausedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_powerUpPausedResponse_Holder"
            self.pyclass = Holder

    class IConsole_powerDown_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerDown"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerDown_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerDown")
            kw["aname"] = "_IConsole_powerDown"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_powerDown_Holder"
            self.pyclass = Holder

    class IConsole_powerDownResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerDownResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerDownResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerDownResponse")
            kw["aname"] = "_IConsole_powerDownResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_powerDownResponse_Holder"
            self.pyclass = Holder

    class IConsole_reset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_reset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_reset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_reset")
            kw["aname"] = "_IConsole_reset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_reset_Holder"
            self.pyclass = Holder

    class IConsole_resetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_resetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_resetResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_resetResponse")
            kw["aname"] = "_IConsole_resetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_resetResponse_Holder"
            self.pyclass = Holder

    class IConsole_pause_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_pause"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_pause_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_pause")
            kw["aname"] = "_IConsole_pause"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_pause_Holder"
            self.pyclass = Holder

    class IConsole_pauseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_pauseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_pauseResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_pauseResponse")
            kw["aname"] = "_IConsole_pauseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_pauseResponse_Holder"
            self.pyclass = Holder

    class IConsole_resume_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_resume"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_resume_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_resume")
            kw["aname"] = "_IConsole_resume"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_resume_Holder"
            self.pyclass = Holder

    class IConsole_resumeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_resumeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_resumeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_resumeResponse")
            kw["aname"] = "_IConsole_resumeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_resumeResponse_Holder"
            self.pyclass = Holder

    class IConsole_powerButton_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerButton"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerButton_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerButton")
            kw["aname"] = "_IConsole_powerButton"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_powerButton_Holder"
            self.pyclass = Holder

    class IConsole_powerButtonResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerButtonResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerButtonResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerButtonResponse")
            kw["aname"] = "_IConsole_powerButtonResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_powerButtonResponse_Holder"
            self.pyclass = Holder

    class IConsole_sleepButton_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_sleepButton"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_sleepButton_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_sleepButton")
            kw["aname"] = "_IConsole_sleepButton"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_sleepButton_Holder"
            self.pyclass = Holder

    class IConsole_sleepButtonResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_sleepButtonResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_sleepButtonResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_sleepButtonResponse")
            kw["aname"] = "_IConsole_sleepButtonResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_sleepButtonResponse_Holder"
            self.pyclass = Holder

    class IConsole_getPowerButtonHandled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getPowerButtonHandled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getPowerButtonHandled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getPowerButtonHandled")
            kw["aname"] = "_IConsole_getPowerButtonHandled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getPowerButtonHandled_Holder"
            self.pyclass = Holder

    class IConsole_getPowerButtonHandledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getPowerButtonHandledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getPowerButtonHandledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getPowerButtonHandledResponse")
            kw["aname"] = "_IConsole_getPowerButtonHandledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getPowerButtonHandledResponse_Holder"
            self.pyclass = Holder

    class IConsole_getGuestEnteredACPIMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getGuestEnteredACPIMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getGuestEnteredACPIMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getGuestEnteredACPIMode")
            kw["aname"] = "_IConsole_getGuestEnteredACPIMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getGuestEnteredACPIMode_Holder"
            self.pyclass = Holder

    class IConsole_getGuestEnteredACPIModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getGuestEnteredACPIModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getGuestEnteredACPIModeResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getGuestEnteredACPIModeResponse")
            kw["aname"] = "_IConsole_getGuestEnteredACPIModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getGuestEnteredACPIModeResponse_Holder"
            self.pyclass = Holder

    class IConsole_getDeviceActivity_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getDeviceActivity"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getDeviceActivity_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="type", aname="_type", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getDeviceActivity")
            kw["aname"] = "_IConsole_getDeviceActivity"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._type = []
                    return
            Holder.__name__ = "IConsole_getDeviceActivity_Holder"
            self.pyclass = Holder

    class IConsole_getDeviceActivityResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getDeviceActivityResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getDeviceActivityResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","DeviceActivity",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getDeviceActivityResponse")
            kw["aname"] = "_IConsole_getDeviceActivityResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IConsole_getDeviceActivityResponse_Holder"
            self.pyclass = Holder

    class IConsole_attachUSBDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_attachUSBDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_attachUSBDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="captureFilename", aname="_captureFilename", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_attachUSBDevice")
            kw["aname"] = "_IConsole_attachUSBDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    self._captureFilename = None
                    return
            Holder.__name__ = "IConsole_attachUSBDevice_Holder"
            self.pyclass = Holder

    class IConsole_attachUSBDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_attachUSBDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_attachUSBDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_attachUSBDeviceResponse")
            kw["aname"] = "_IConsole_attachUSBDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_attachUSBDeviceResponse_Holder"
            self.pyclass = Holder

    class IConsole_detachUSBDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_detachUSBDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_detachUSBDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_detachUSBDevice")
            kw["aname"] = "_IConsole_detachUSBDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IConsole_detachUSBDevice_Holder"
            self.pyclass = Holder

    class IConsole_detachUSBDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_detachUSBDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_detachUSBDeviceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_detachUSBDeviceResponse")
            kw["aname"] = "_IConsole_detachUSBDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_detachUSBDeviceResponse_Holder"
            self.pyclass = Holder

    class IConsole_findUSBDeviceByAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_findUSBDeviceByAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_findUSBDeviceByAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_findUSBDeviceByAddress")
            kw["aname"] = "_IConsole_findUSBDeviceByAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IConsole_findUSBDeviceByAddress_Holder"
            self.pyclass = Holder

    class IConsole_findUSBDeviceByAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_findUSBDeviceByAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_findUSBDeviceByAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_findUSBDeviceByAddressResponse")
            kw["aname"] = "_IConsole_findUSBDeviceByAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_findUSBDeviceByAddressResponse_Holder"
            self.pyclass = Holder

    class IConsole_findUSBDeviceById_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_findUSBDeviceById"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_findUSBDeviceById_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_findUSBDeviceById")
            kw["aname"] = "_IConsole_findUSBDeviceById"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IConsole_findUSBDeviceById_Holder"
            self.pyclass = Holder

    class IConsole_findUSBDeviceByIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_findUSBDeviceByIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_findUSBDeviceByIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_findUSBDeviceByIdResponse")
            kw["aname"] = "_IConsole_findUSBDeviceByIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_findUSBDeviceByIdResponse_Holder"
            self.pyclass = Holder

    class IConsole_createSharedFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_createSharedFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_createSharedFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostPath", aname="_hostPath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="writable", aname="_writable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="automount", aname="_automount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="autoMountPoint", aname="_autoMountPoint", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_createSharedFolder")
            kw["aname"] = "_IConsole_createSharedFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._hostPath = None
                    self._writable = None
                    self._automount = None
                    self._autoMountPoint = None
                    return
            Holder.__name__ = "IConsole_createSharedFolder_Holder"
            self.pyclass = Holder

    class IConsole_createSharedFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_createSharedFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_createSharedFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_createSharedFolderResponse")
            kw["aname"] = "_IConsole_createSharedFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_createSharedFolderResponse_Holder"
            self.pyclass = Holder

    class IConsole_removeSharedFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_removeSharedFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_removeSharedFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_removeSharedFolder")
            kw["aname"] = "_IConsole_removeSharedFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IConsole_removeSharedFolder_Holder"
            self.pyclass = Holder

    class IConsole_removeSharedFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_removeSharedFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_removeSharedFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_removeSharedFolderResponse")
            kw["aname"] = "_IConsole_removeSharedFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_removeSharedFolderResponse_Holder"
            self.pyclass = Holder

    class IConsole_teleport_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_teleport"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_teleport_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostname", aname="_hostname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tcpport", aname="_tcpport", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxDowntime", aname="_maxDowntime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_teleport")
            kw["aname"] = "_IConsole_teleport"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hostname = None
                    self._tcpport = None
                    self._password = None
                    self._maxDowntime = None
                    return
            Holder.__name__ = "IConsole_teleport_Holder"
            self.pyclass = Holder

    class IConsole_teleportResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_teleportResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_teleportResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_teleportResponse")
            kw["aname"] = "_IConsole_teleportResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_teleportResponse_Holder"
            self.pyclass = Holder

    class IConsole_addDiskEncryptionPassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_addDiskEncryptionPassword"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_addDiskEncryptionPassword_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="clearOnSuspend", aname="_clearOnSuspend", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_addDiskEncryptionPassword")
            kw["aname"] = "_IConsole_addDiskEncryptionPassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    self._password = None
                    self._clearOnSuspend = None
                    return
            Holder.__name__ = "IConsole_addDiskEncryptionPassword_Holder"
            self.pyclass = Holder

    class IConsole_addDiskEncryptionPasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_addDiskEncryptionPasswordResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_addDiskEncryptionPasswordResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_addDiskEncryptionPasswordResponse")
            kw["aname"] = "_IConsole_addDiskEncryptionPasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_addDiskEncryptionPasswordResponse_Holder"
            self.pyclass = Holder

    class IConsole_addDiskEncryptionPasswords_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_addDiskEncryptionPasswords"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_addDiskEncryptionPasswords_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ids", aname="_ids", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="passwords", aname="_passwords", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="clearOnSuspend", aname="_clearOnSuspend", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_addDiskEncryptionPasswords")
            kw["aname"] = "_IConsole_addDiskEncryptionPasswords"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._ids = []
                    self._passwords = []
                    self._clearOnSuspend = None
                    return
            Holder.__name__ = "IConsole_addDiskEncryptionPasswords_Holder"
            self.pyclass = Holder

    class IConsole_addDiskEncryptionPasswordsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_addDiskEncryptionPasswordsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_addDiskEncryptionPasswordsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_addDiskEncryptionPasswordsResponse")
            kw["aname"] = "_IConsole_addDiskEncryptionPasswordsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_addDiskEncryptionPasswordsResponse_Holder"
            self.pyclass = Holder

    class IConsole_removeDiskEncryptionPassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_removeDiskEncryptionPassword"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_removeDiskEncryptionPassword_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_removeDiskEncryptionPassword")
            kw["aname"] = "_IConsole_removeDiskEncryptionPassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IConsole_removeDiskEncryptionPassword_Holder"
            self.pyclass = Holder

    class IConsole_removeDiskEncryptionPasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_removeDiskEncryptionPasswordResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_removeDiskEncryptionPasswordResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_removeDiskEncryptionPasswordResponse")
            kw["aname"] = "_IConsole_removeDiskEncryptionPasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_removeDiskEncryptionPasswordResponse_Holder"
            self.pyclass = Holder

    class IConsole_clearAllDiskEncryptionPasswords_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_clearAllDiskEncryptionPasswords"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_clearAllDiskEncryptionPasswords_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_clearAllDiskEncryptionPasswords")
            kw["aname"] = "_IConsole_clearAllDiskEncryptionPasswords"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_clearAllDiskEncryptionPasswords_Holder"
            self.pyclass = Holder

    class IConsole_clearAllDiskEncryptionPasswordsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_clearAllDiskEncryptionPasswordsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_clearAllDiskEncryptionPasswordsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_clearAllDiskEncryptionPasswordsResponse")
            kw["aname"] = "_IConsole_clearAllDiskEncryptionPasswordsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_clearAllDiskEncryptionPasswordsResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getName")
            kw["aname"] = "_IHostNetworkInterface_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getName_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getNameResponse")
            kw["aname"] = "_IHostNetworkInterface_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getNameResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getShortName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getShortName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getShortName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getShortName")
            kw["aname"] = "_IHostNetworkInterface_getShortName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getShortName_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getShortNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getShortNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getShortNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getShortNameResponse")
            kw["aname"] = "_IHostNetworkInterface_getShortNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getShortNameResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getId")
            kw["aname"] = "_IHostNetworkInterface_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getId_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIdResponse")
            kw["aname"] = "_IHostNetworkInterface_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIdResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getNetworkName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getNetworkName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getNetworkName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getNetworkName")
            kw["aname"] = "_IHostNetworkInterface_getNetworkName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getNetworkName_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getNetworkNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getNetworkNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getNetworkNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getNetworkNameResponse")
            kw["aname"] = "_IHostNetworkInterface_getNetworkNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getNetworkNameResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getDHCPEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getDHCPEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getDHCPEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getDHCPEnabled")
            kw["aname"] = "_IHostNetworkInterface_getDHCPEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getDHCPEnabled_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getDHCPEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getDHCPEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getDHCPEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getDHCPEnabledResponse")
            kw["aname"] = "_IHostNetworkInterface_getDHCPEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getDHCPEnabledResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPAddress")
            kw["aname"] = "_IHostNetworkInterface_getIPAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPAddress_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPAddressResponse")
            kw["aname"] = "_IHostNetworkInterface_getIPAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPAddressResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getNetworkMask_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getNetworkMask"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getNetworkMask_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getNetworkMask")
            kw["aname"] = "_IHostNetworkInterface_getNetworkMask"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getNetworkMask_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getNetworkMaskResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getNetworkMaskResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getNetworkMaskResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getNetworkMaskResponse")
            kw["aname"] = "_IHostNetworkInterface_getNetworkMaskResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getNetworkMaskResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPV6Supported_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPV6Supported"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPV6Supported_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPV6Supported")
            kw["aname"] = "_IHostNetworkInterface_getIPV6Supported"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPV6Supported_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPV6SupportedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPV6SupportedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPV6SupportedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPV6SupportedResponse")
            kw["aname"] = "_IHostNetworkInterface_getIPV6SupportedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPV6SupportedResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPV6Address_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPV6Address"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPV6Address_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPV6Address")
            kw["aname"] = "_IHostNetworkInterface_getIPV6Address"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPV6Address_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPV6AddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPV6AddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPV6AddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPV6AddressResponse")
            kw["aname"] = "_IHostNetworkInterface_getIPV6AddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPV6AddressResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPV6NetworkMaskPrefixLength_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPV6NetworkMaskPrefixLength"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPV6NetworkMaskPrefixLength_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPV6NetworkMaskPrefixLength")
            kw["aname"] = "_IHostNetworkInterface_getIPV6NetworkMaskPrefixLength"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPV6NetworkMaskPrefixLength_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse")
            kw["aname"] = "_IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getHardwareAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getHardwareAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getHardwareAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getHardwareAddress")
            kw["aname"] = "_IHostNetworkInterface_getHardwareAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getHardwareAddress_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getHardwareAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getHardwareAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getHardwareAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getHardwareAddressResponse")
            kw["aname"] = "_IHostNetworkInterface_getHardwareAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getHardwareAddressResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getMediumType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getMediumType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getMediumType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getMediumType")
            kw["aname"] = "_IHostNetworkInterface_getMediumType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getMediumType_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getMediumTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getMediumTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getMediumTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","HostNetworkInterfaceMediumType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getMediumTypeResponse")
            kw["aname"] = "_IHostNetworkInterface_getMediumTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getMediumTypeResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getStatus")
            kw["aname"] = "_IHostNetworkInterface_getStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getStatus_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getStatusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","HostNetworkInterfaceStatus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getStatusResponse")
            kw["aname"] = "_IHostNetworkInterface_getStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getStatusResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getInterfaceType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getInterfaceType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getInterfaceType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getInterfaceType")
            kw["aname"] = "_IHostNetworkInterface_getInterfaceType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getInterfaceType_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getInterfaceTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getInterfaceTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getInterfaceTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","HostNetworkInterfaceType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getInterfaceTypeResponse")
            kw["aname"] = "_IHostNetworkInterface_getInterfaceTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getInterfaceTypeResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getWireless_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getWireless"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getWireless_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getWireless")
            kw["aname"] = "_IHostNetworkInterface_getWireless"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getWireless_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getWirelessResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getWirelessResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getWirelessResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getWirelessResponse")
            kw["aname"] = "_IHostNetworkInterface_getWirelessResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getWirelessResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_enableStaticIPConfig_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_enableStaticIPConfig"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_enableStaticIPConfig_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="IPAddress", aname="_IPAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="networkMask", aname="_networkMask", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_enableStaticIPConfig")
            kw["aname"] = "_IHostNetworkInterface_enableStaticIPConfig"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IPAddress = None
                    self._networkMask = None
                    return
            Holder.__name__ = "IHostNetworkInterface_enableStaticIPConfig_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_enableStaticIPConfigResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_enableStaticIPConfigResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_enableStaticIPConfigResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_enableStaticIPConfigResponse")
            kw["aname"] = "_IHostNetworkInterface_enableStaticIPConfigResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHostNetworkInterface_enableStaticIPConfigResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_enableStaticIPConfigV6_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_enableStaticIPConfigV6"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_enableStaticIPConfigV6_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="IPV6Address", aname="_IPV6Address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="IPV6NetworkMaskPrefixLength", aname="_IPV6NetworkMaskPrefixLength", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_enableStaticIPConfigV6")
            kw["aname"] = "_IHostNetworkInterface_enableStaticIPConfigV6"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IPV6Address = None
                    self._IPV6NetworkMaskPrefixLength = None
                    return
            Holder.__name__ = "IHostNetworkInterface_enableStaticIPConfigV6_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_enableStaticIPConfigV6Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_enableStaticIPConfigV6Response"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_enableStaticIPConfigV6Response_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_enableStaticIPConfigV6Response")
            kw["aname"] = "_IHostNetworkInterface_enableStaticIPConfigV6Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHostNetworkInterface_enableStaticIPConfigV6Response_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_enableDynamicIPConfig_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_enableDynamicIPConfig"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_enableDynamicIPConfig_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_enableDynamicIPConfig")
            kw["aname"] = "_IHostNetworkInterface_enableDynamicIPConfig"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_enableDynamicIPConfig_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_enableDynamicIPConfigResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_enableDynamicIPConfigResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_enableDynamicIPConfigResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_enableDynamicIPConfigResponse")
            kw["aname"] = "_IHostNetworkInterface_enableDynamicIPConfigResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHostNetworkInterface_enableDynamicIPConfigResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_DHCPRediscover_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_DHCPRediscover"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_DHCPRediscover_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_DHCPRediscover")
            kw["aname"] = "_IHostNetworkInterface_DHCPRediscover"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_DHCPRediscover_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_DHCPRediscoverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_DHCPRediscoverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_DHCPRediscoverResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_DHCPRediscoverResponse")
            kw["aname"] = "_IHostNetworkInterface_DHCPRediscoverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHostNetworkInterface_DHCPRediscoverResponse_Holder"
            self.pyclass = Holder

    class IHostVideoInputDevice_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostVideoInputDevice_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostVideoInputDevice_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostVideoInputDevice_getName")
            kw["aname"] = "_IHostVideoInputDevice_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostVideoInputDevice_getName_Holder"
            self.pyclass = Holder

    class IHostVideoInputDevice_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostVideoInputDevice_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostVideoInputDevice_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostVideoInputDevice_getNameResponse")
            kw["aname"] = "_IHostVideoInputDevice_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostVideoInputDevice_getNameResponse_Holder"
            self.pyclass = Holder

    class IHostVideoInputDevice_getPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostVideoInputDevice_getPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostVideoInputDevice_getPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostVideoInputDevice_getPath")
            kw["aname"] = "_IHostVideoInputDevice_getPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostVideoInputDevice_getPath_Holder"
            self.pyclass = Holder

    class IHostVideoInputDevice_getPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostVideoInputDevice_getPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostVideoInputDevice_getPathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostVideoInputDevice_getPathResponse")
            kw["aname"] = "_IHostVideoInputDevice_getPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostVideoInputDevice_getPathResponse_Holder"
            self.pyclass = Holder

    class IHostVideoInputDevice_getAlias_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostVideoInputDevice_getAlias"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostVideoInputDevice_getAlias_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostVideoInputDevice_getAlias")
            kw["aname"] = "_IHostVideoInputDevice_getAlias"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostVideoInputDevice_getAlias_Holder"
            self.pyclass = Holder

    class IHostVideoInputDevice_getAliasResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostVideoInputDevice_getAliasResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostVideoInputDevice_getAliasResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostVideoInputDevice_getAliasResponse")
            kw["aname"] = "_IHostVideoInputDevice_getAliasResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostVideoInputDevice_getAliasResponse_Holder"
            self.pyclass = Holder

    class IHost_getDVDDrives_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getDVDDrives"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getDVDDrives_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getDVDDrives")
            kw["aname"] = "_IHost_getDVDDrives"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getDVDDrives_Holder"
            self.pyclass = Holder

    class IHost_getDVDDrivesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getDVDDrivesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getDVDDrivesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getDVDDrivesResponse")
            kw["aname"] = "_IHost_getDVDDrivesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_getDVDDrivesResponse_Holder"
            self.pyclass = Holder

    class IHost_getFloppyDrives_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getFloppyDrives"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getFloppyDrives_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getFloppyDrives")
            kw["aname"] = "_IHost_getFloppyDrives"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getFloppyDrives_Holder"
            self.pyclass = Holder

    class IHost_getFloppyDrivesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getFloppyDrivesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getFloppyDrivesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getFloppyDrivesResponse")
            kw["aname"] = "_IHost_getFloppyDrivesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_getFloppyDrivesResponse_Holder"
            self.pyclass = Holder

    class IHost_getUSBDevices_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getUSBDevices"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getUSBDevices_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getUSBDevices")
            kw["aname"] = "_IHost_getUSBDevices"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getUSBDevices_Holder"
            self.pyclass = Holder

    class IHost_getUSBDevicesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getUSBDevicesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getUSBDevicesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getUSBDevicesResponse")
            kw["aname"] = "_IHost_getUSBDevicesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_getUSBDevicesResponse_Holder"
            self.pyclass = Holder

    class IHost_getUSBDeviceFilters_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getUSBDeviceFilters"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getUSBDeviceFilters_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getUSBDeviceFilters")
            kw["aname"] = "_IHost_getUSBDeviceFilters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getUSBDeviceFilters_Holder"
            self.pyclass = Holder

    class IHost_getUSBDeviceFiltersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getUSBDeviceFiltersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getUSBDeviceFiltersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getUSBDeviceFiltersResponse")
            kw["aname"] = "_IHost_getUSBDeviceFiltersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_getUSBDeviceFiltersResponse_Holder"
            self.pyclass = Holder

    class IHost_getNetworkInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getNetworkInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getNetworkInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getNetworkInterfaces")
            kw["aname"] = "_IHost_getNetworkInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getNetworkInterfaces_Holder"
            self.pyclass = Holder

    class IHost_getNetworkInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getNetworkInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getNetworkInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getNetworkInterfacesResponse")
            kw["aname"] = "_IHost_getNetworkInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_getNetworkInterfacesResponse_Holder"
            self.pyclass = Holder

    class IHost_getNameServers_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getNameServers"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getNameServers_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getNameServers")
            kw["aname"] = "_IHost_getNameServers"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getNameServers_Holder"
            self.pyclass = Holder

    class IHost_getNameServersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getNameServersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getNameServersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getNameServersResponse")
            kw["aname"] = "_IHost_getNameServersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_getNameServersResponse_Holder"
            self.pyclass = Holder

    class IHost_getDomainName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getDomainName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getDomainName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getDomainName")
            kw["aname"] = "_IHost_getDomainName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getDomainName_Holder"
            self.pyclass = Holder

    class IHost_getDomainNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getDomainNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getDomainNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getDomainNameResponse")
            kw["aname"] = "_IHost_getDomainNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getDomainNameResponse_Holder"
            self.pyclass = Holder

    class IHost_getSearchStrings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getSearchStrings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getSearchStrings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getSearchStrings")
            kw["aname"] = "_IHost_getSearchStrings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getSearchStrings_Holder"
            self.pyclass = Holder

    class IHost_getSearchStringsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getSearchStringsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getSearchStringsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getSearchStringsResponse")
            kw["aname"] = "_IHost_getSearchStringsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_getSearchStringsResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorCount")
            kw["aname"] = "_IHost_getProcessorCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getProcessorCount_Holder"
            self.pyclass = Holder

    class IHost_getProcessorCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorCountResponse")
            kw["aname"] = "_IHost_getProcessorCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getProcessorCountResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorOnlineCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorOnlineCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorOnlineCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorOnlineCount")
            kw["aname"] = "_IHost_getProcessorOnlineCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getProcessorOnlineCount_Holder"
            self.pyclass = Holder

    class IHost_getProcessorOnlineCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorOnlineCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorOnlineCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorOnlineCountResponse")
            kw["aname"] = "_IHost_getProcessorOnlineCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getProcessorOnlineCountResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorCoreCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorCoreCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorCoreCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorCoreCount")
            kw["aname"] = "_IHost_getProcessorCoreCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getProcessorCoreCount_Holder"
            self.pyclass = Holder

    class IHost_getProcessorCoreCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorCoreCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorCoreCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorCoreCountResponse")
            kw["aname"] = "_IHost_getProcessorCoreCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getProcessorCoreCountResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorOnlineCoreCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorOnlineCoreCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorOnlineCoreCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorOnlineCoreCount")
            kw["aname"] = "_IHost_getProcessorOnlineCoreCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getProcessorOnlineCoreCount_Holder"
            self.pyclass = Holder

    class IHost_getProcessorOnlineCoreCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorOnlineCoreCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorOnlineCoreCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorOnlineCoreCountResponse")
            kw["aname"] = "_IHost_getProcessorOnlineCoreCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getProcessorOnlineCoreCountResponse_Holder"
            self.pyclass = Holder

    class IHost_getMemorySize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getMemorySize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getMemorySize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getMemorySize")
            kw["aname"] = "_IHost_getMemorySize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getMemorySize_Holder"
            self.pyclass = Holder

    class IHost_getMemorySizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getMemorySizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getMemorySizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getMemorySizeResponse")
            kw["aname"] = "_IHost_getMemorySizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getMemorySizeResponse_Holder"
            self.pyclass = Holder

    class IHost_getMemoryAvailable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getMemoryAvailable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getMemoryAvailable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getMemoryAvailable")
            kw["aname"] = "_IHost_getMemoryAvailable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getMemoryAvailable_Holder"
            self.pyclass = Holder

    class IHost_getMemoryAvailableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getMemoryAvailableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getMemoryAvailableResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getMemoryAvailableResponse")
            kw["aname"] = "_IHost_getMemoryAvailableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getMemoryAvailableResponse_Holder"
            self.pyclass = Holder

    class IHost_getOperatingSystem_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getOperatingSystem"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getOperatingSystem_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getOperatingSystem")
            kw["aname"] = "_IHost_getOperatingSystem"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getOperatingSystem_Holder"
            self.pyclass = Holder

    class IHost_getOperatingSystemResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getOperatingSystemResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getOperatingSystemResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getOperatingSystemResponse")
            kw["aname"] = "_IHost_getOperatingSystemResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getOperatingSystemResponse_Holder"
            self.pyclass = Holder

    class IHost_getOSVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getOSVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getOSVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getOSVersion")
            kw["aname"] = "_IHost_getOSVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getOSVersion_Holder"
            self.pyclass = Holder

    class IHost_getOSVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getOSVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getOSVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getOSVersionResponse")
            kw["aname"] = "_IHost_getOSVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getOSVersionResponse_Holder"
            self.pyclass = Holder

    class IHost_getUTCTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getUTCTime"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getUTCTime_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getUTCTime")
            kw["aname"] = "_IHost_getUTCTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getUTCTime_Holder"
            self.pyclass = Holder

    class IHost_getUTCTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getUTCTimeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getUTCTimeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getUTCTimeResponse")
            kw["aname"] = "_IHost_getUTCTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getUTCTimeResponse_Holder"
            self.pyclass = Holder

    class IHost_getAcceleration3DAvailable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getAcceleration3DAvailable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getAcceleration3DAvailable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getAcceleration3DAvailable")
            kw["aname"] = "_IHost_getAcceleration3DAvailable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getAcceleration3DAvailable_Holder"
            self.pyclass = Holder

    class IHost_getAcceleration3DAvailableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getAcceleration3DAvailableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getAcceleration3DAvailableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getAcceleration3DAvailableResponse")
            kw["aname"] = "_IHost_getAcceleration3DAvailableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getAcceleration3DAvailableResponse_Holder"
            self.pyclass = Holder

    class IHost_getVideoInputDevices_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getVideoInputDevices"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getVideoInputDevices_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getVideoInputDevices")
            kw["aname"] = "_IHost_getVideoInputDevices"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getVideoInputDevices_Holder"
            self.pyclass = Holder

    class IHost_getVideoInputDevicesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getVideoInputDevicesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getVideoInputDevicesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getVideoInputDevicesResponse")
            kw["aname"] = "_IHost_getVideoInputDevicesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_getVideoInputDevicesResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorSpeed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorSpeed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorSpeed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuId", aname="_cpuId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorSpeed")
            kw["aname"] = "_IHost_getProcessorSpeed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpuId = None
                    return
            Holder.__name__ = "IHost_getProcessorSpeed_Holder"
            self.pyclass = Holder

    class IHost_getProcessorSpeedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorSpeedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorSpeedResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorSpeedResponse")
            kw["aname"] = "_IHost_getProcessorSpeedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getProcessorSpeedResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorFeature_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorFeature"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorFeature_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ProcessorFeature",lazy=False)(pname="feature", aname="_feature", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorFeature")
            kw["aname"] = "_IHost_getProcessorFeature"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._feature = None
                    return
            Holder.__name__ = "IHost_getProcessorFeature_Holder"
            self.pyclass = Holder

    class IHost_getProcessorFeatureResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorFeatureResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorFeatureResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorFeatureResponse")
            kw["aname"] = "_IHost_getProcessorFeatureResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getProcessorFeatureResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuId", aname="_cpuId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorDescription")
            kw["aname"] = "_IHost_getProcessorDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpuId = None
                    return
            Holder.__name__ = "IHost_getProcessorDescription_Holder"
            self.pyclass = Holder

    class IHost_getProcessorDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorDescriptionResponse")
            kw["aname"] = "_IHost_getProcessorDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getProcessorDescriptionResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorCPUIDLeaf_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorCPUIDLeaf"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorCPUIDLeaf_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuId", aname="_cpuId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="leaf", aname="_leaf", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="subLeaf", aname="_subLeaf", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorCPUIDLeaf")
            kw["aname"] = "_IHost_getProcessorCPUIDLeaf"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpuId = None
                    self._leaf = None
                    self._subLeaf = None
                    return
            Holder.__name__ = "IHost_getProcessorCPUIDLeaf_Holder"
            self.pyclass = Holder

    class IHost_getProcessorCPUIDLeafResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorCPUIDLeafResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorCPUIDLeafResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="valEax", aname="_valEax", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEbx", aname="_valEbx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEcx", aname="_valEcx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEdx", aname="_valEdx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorCPUIDLeafResponse")
            kw["aname"] = "_IHost_getProcessorCPUIDLeafResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._valEax = None
                    self._valEbx = None
                    self._valEcx = None
                    self._valEdx = None
                    return
            Holder.__name__ = "IHost_getProcessorCPUIDLeafResponse_Holder"
            self.pyclass = Holder

    class IHost_createHostOnlyNetworkInterface_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_createHostOnlyNetworkInterface"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_createHostOnlyNetworkInterface_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_createHostOnlyNetworkInterface")
            kw["aname"] = "_IHost_createHostOnlyNetworkInterface"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_createHostOnlyNetworkInterface_Holder"
            self.pyclass = Holder

    class IHost_createHostOnlyNetworkInterfaceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_createHostOnlyNetworkInterfaceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_createHostOnlyNetworkInterfaceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="hostInterface", aname="_hostInterface", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_createHostOnlyNetworkInterfaceResponse")
            kw["aname"] = "_IHost_createHostOnlyNetworkInterfaceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hostInterface = None
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_createHostOnlyNetworkInterfaceResponse_Holder"
            self.pyclass = Holder

    class IHost_removeHostOnlyNetworkInterface_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_removeHostOnlyNetworkInterface"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_removeHostOnlyNetworkInterface_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_removeHostOnlyNetworkInterface")
            kw["aname"] = "_IHost_removeHostOnlyNetworkInterface"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IHost_removeHostOnlyNetworkInterface_Holder"
            self.pyclass = Holder

    class IHost_removeHostOnlyNetworkInterfaceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_removeHostOnlyNetworkInterfaceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_removeHostOnlyNetworkInterfaceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_removeHostOnlyNetworkInterfaceResponse")
            kw["aname"] = "_IHost_removeHostOnlyNetworkInterfaceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_removeHostOnlyNetworkInterfaceResponse_Holder"
            self.pyclass = Holder

    class IHost_createUSBDeviceFilter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_createUSBDeviceFilter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_createUSBDeviceFilter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_createUSBDeviceFilter")
            kw["aname"] = "_IHost_createUSBDeviceFilter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IHost_createUSBDeviceFilter_Holder"
            self.pyclass = Holder

    class IHost_createUSBDeviceFilterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_createUSBDeviceFilterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_createUSBDeviceFilterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_createUSBDeviceFilterResponse")
            kw["aname"] = "_IHost_createUSBDeviceFilterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_createUSBDeviceFilterResponse_Holder"
            self.pyclass = Holder

    class IHost_insertUSBDeviceFilter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_insertUSBDeviceFilter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_insertUSBDeviceFilter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filter", aname="_filter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_insertUSBDeviceFilter")
            kw["aname"] = "_IHost_insertUSBDeviceFilter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._position = None
                    self._filter = None
                    return
            Holder.__name__ = "IHost_insertUSBDeviceFilter_Holder"
            self.pyclass = Holder

    class IHost_insertUSBDeviceFilterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_insertUSBDeviceFilterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_insertUSBDeviceFilterResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHost_insertUSBDeviceFilterResponse")
            kw["aname"] = "_IHost_insertUSBDeviceFilterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHost_insertUSBDeviceFilterResponse_Holder"
            self.pyclass = Holder

    class IHost_removeUSBDeviceFilter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_removeUSBDeviceFilter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_removeUSBDeviceFilter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_removeUSBDeviceFilter")
            kw["aname"] = "_IHost_removeUSBDeviceFilter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._position = None
                    return
            Holder.__name__ = "IHost_removeUSBDeviceFilter_Holder"
            self.pyclass = Holder

    class IHost_removeUSBDeviceFilterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_removeUSBDeviceFilterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_removeUSBDeviceFilterResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHost_removeUSBDeviceFilterResponse")
            kw["aname"] = "_IHost_removeUSBDeviceFilterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHost_removeUSBDeviceFilterResponse_Holder"
            self.pyclass = Holder

    class IHost_findHostDVDDrive_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostDVDDrive"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostDVDDrive_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostDVDDrive")
            kw["aname"] = "_IHost_findHostDVDDrive"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IHost_findHostDVDDrive_Holder"
            self.pyclass = Holder

    class IHost_findHostDVDDriveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostDVDDriveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostDVDDriveResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostDVDDriveResponse")
            kw["aname"] = "_IHost_findHostDVDDriveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_findHostDVDDriveResponse_Holder"
            self.pyclass = Holder

    class IHost_findHostFloppyDrive_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostFloppyDrive"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostFloppyDrive_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostFloppyDrive")
            kw["aname"] = "_IHost_findHostFloppyDrive"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IHost_findHostFloppyDrive_Holder"
            self.pyclass = Holder

    class IHost_findHostFloppyDriveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostFloppyDriveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostFloppyDriveResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostFloppyDriveResponse")
            kw["aname"] = "_IHost_findHostFloppyDriveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_findHostFloppyDriveResponse_Holder"
            self.pyclass = Holder

    class IHost_findHostNetworkInterfaceByName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostNetworkInterfaceByName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostNetworkInterfaceByName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostNetworkInterfaceByName")
            kw["aname"] = "_IHost_findHostNetworkInterfaceByName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IHost_findHostNetworkInterfaceByName_Holder"
            self.pyclass = Holder

    class IHost_findHostNetworkInterfaceByNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostNetworkInterfaceByNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostNetworkInterfaceByNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostNetworkInterfaceByNameResponse")
            kw["aname"] = "_IHost_findHostNetworkInterfaceByNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_findHostNetworkInterfaceByNameResponse_Holder"
            self.pyclass = Holder

    class IHost_findHostNetworkInterfaceById_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostNetworkInterfaceById"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostNetworkInterfaceById_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostNetworkInterfaceById")
            kw["aname"] = "_IHost_findHostNetworkInterfaceById"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IHost_findHostNetworkInterfaceById_Holder"
            self.pyclass = Holder

    class IHost_findHostNetworkInterfaceByIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostNetworkInterfaceByIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostNetworkInterfaceByIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostNetworkInterfaceByIdResponse")
            kw["aname"] = "_IHost_findHostNetworkInterfaceByIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_findHostNetworkInterfaceByIdResponse_Holder"
            self.pyclass = Holder

    class IHost_findHostNetworkInterfacesOfType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostNetworkInterfacesOfType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostNetworkInterfacesOfType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","HostNetworkInterfaceType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostNetworkInterfacesOfType")
            kw["aname"] = "_IHost_findHostNetworkInterfacesOfType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._type = None
                    return
            Holder.__name__ = "IHost_findHostNetworkInterfacesOfType_Holder"
            self.pyclass = Holder

    class IHost_findHostNetworkInterfacesOfTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostNetworkInterfacesOfTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostNetworkInterfacesOfTypeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostNetworkInterfacesOfTypeResponse")
            kw["aname"] = "_IHost_findHostNetworkInterfacesOfTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_findHostNetworkInterfacesOfTypeResponse_Holder"
            self.pyclass = Holder

    class IHost_findUSBDeviceById_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findUSBDeviceById"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findUSBDeviceById_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findUSBDeviceById")
            kw["aname"] = "_IHost_findUSBDeviceById"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IHost_findUSBDeviceById_Holder"
            self.pyclass = Holder

    class IHost_findUSBDeviceByIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findUSBDeviceByIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findUSBDeviceByIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findUSBDeviceByIdResponse")
            kw["aname"] = "_IHost_findUSBDeviceByIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_findUSBDeviceByIdResponse_Holder"
            self.pyclass = Holder

    class IHost_findUSBDeviceByAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findUSBDeviceByAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findUSBDeviceByAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findUSBDeviceByAddress")
            kw["aname"] = "_IHost_findUSBDeviceByAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IHost_findUSBDeviceByAddress_Holder"
            self.pyclass = Holder

    class IHost_findUSBDeviceByAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findUSBDeviceByAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findUSBDeviceByAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findUSBDeviceByAddressResponse")
            kw["aname"] = "_IHost_findUSBDeviceByAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_findUSBDeviceByAddressResponse_Holder"
            self.pyclass = Holder

    class IHost_generateMACAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_generateMACAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_generateMACAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_generateMACAddress")
            kw["aname"] = "_IHost_generateMACAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_generateMACAddress_Holder"
            self.pyclass = Holder

    class IHost_generateMACAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_generateMACAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_generateMACAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_generateMACAddressResponse")
            kw["aname"] = "_IHost_generateMACAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_generateMACAddressResponse_Holder"
            self.pyclass = Holder

    class IHost_addUSBDeviceSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_addUSBDeviceSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_addUSBDeviceSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="backend", aname="_backend", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address", aname="_address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="propertyNames", aname="_propertyNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="propertyValues", aname="_propertyValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_addUSBDeviceSource")
            kw["aname"] = "_IHost_addUSBDeviceSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._backend = None
                    self._id = None
                    self._address = None
                    self._propertyNames = []
                    self._propertyValues = []
                    return
            Holder.__name__ = "IHost_addUSBDeviceSource_Holder"
            self.pyclass = Holder

    class IHost_addUSBDeviceSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_addUSBDeviceSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_addUSBDeviceSourceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHost_addUSBDeviceSourceResponse")
            kw["aname"] = "_IHost_addUSBDeviceSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHost_addUSBDeviceSourceResponse_Holder"
            self.pyclass = Holder

    class IHost_removeUSBDeviceSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_removeUSBDeviceSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_removeUSBDeviceSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_removeUSBDeviceSource")
            kw["aname"] = "_IHost_removeUSBDeviceSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IHost_removeUSBDeviceSource_Holder"
            self.pyclass = Holder

    class IHost_removeUSBDeviceSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_removeUSBDeviceSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_removeUSBDeviceSourceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHost_removeUSBDeviceSourceResponse")
            kw["aname"] = "_IHost_removeUSBDeviceSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHost_removeUSBDeviceSourceResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinGuestRAM_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinGuestRAM"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinGuestRAM_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinGuestRAM")
            kw["aname"] = "_ISystemProperties_getMinGuestRAM"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMinGuestRAM_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinGuestRAMResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinGuestRAMResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinGuestRAMResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinGuestRAMResponse")
            kw["aname"] = "_ISystemProperties_getMinGuestRAMResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMinGuestRAMResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestRAM_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestRAM"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestRAM_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestRAM")
            kw["aname"] = "_ISystemProperties_getMaxGuestRAM"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestRAM_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestRAMResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestRAMResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestRAMResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestRAMResponse")
            kw["aname"] = "_ISystemProperties_getMaxGuestRAMResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestRAMResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinGuestVRAM_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinGuestVRAM"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinGuestVRAM_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinGuestVRAM")
            kw["aname"] = "_ISystemProperties_getMinGuestVRAM"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMinGuestVRAM_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinGuestVRAMResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinGuestVRAMResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinGuestVRAMResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinGuestVRAMResponse")
            kw["aname"] = "_ISystemProperties_getMinGuestVRAMResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMinGuestVRAMResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestVRAM_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestVRAM"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestVRAM_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestVRAM")
            kw["aname"] = "_ISystemProperties_getMaxGuestVRAM"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestVRAM_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestVRAMResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestVRAMResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestVRAMResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestVRAMResponse")
            kw["aname"] = "_ISystemProperties_getMaxGuestVRAMResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestVRAMResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinGuestCPUCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinGuestCPUCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinGuestCPUCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinGuestCPUCount")
            kw["aname"] = "_ISystemProperties_getMinGuestCPUCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMinGuestCPUCount_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinGuestCPUCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinGuestCPUCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinGuestCPUCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinGuestCPUCountResponse")
            kw["aname"] = "_ISystemProperties_getMinGuestCPUCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMinGuestCPUCountResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestCPUCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestCPUCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestCPUCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestCPUCount")
            kw["aname"] = "_ISystemProperties_getMaxGuestCPUCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestCPUCount_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestCPUCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestCPUCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestCPUCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestCPUCountResponse")
            kw["aname"] = "_ISystemProperties_getMaxGuestCPUCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestCPUCountResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestMonitors_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestMonitors"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestMonitors_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestMonitors")
            kw["aname"] = "_ISystemProperties_getMaxGuestMonitors"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestMonitors_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestMonitorsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestMonitorsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestMonitorsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestMonitorsResponse")
            kw["aname"] = "_ISystemProperties_getMaxGuestMonitorsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestMonitorsResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getInfoVDSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getInfoVDSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getInfoVDSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getInfoVDSize")
            kw["aname"] = "_ISystemProperties_getInfoVDSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getInfoVDSize_Holder"
            self.pyclass = Holder

    class ISystemProperties_getInfoVDSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getInfoVDSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getInfoVDSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getInfoVDSizeResponse")
            kw["aname"] = "_ISystemProperties_getInfoVDSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getInfoVDSizeResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getSerialPortCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getSerialPortCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getSerialPortCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getSerialPortCount")
            kw["aname"] = "_ISystemProperties_getSerialPortCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getSerialPortCount_Holder"
            self.pyclass = Holder

    class ISystemProperties_getSerialPortCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getSerialPortCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getSerialPortCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getSerialPortCountResponse")
            kw["aname"] = "_ISystemProperties_getSerialPortCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getSerialPortCountResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getParallelPortCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getParallelPortCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getParallelPortCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getParallelPortCount")
            kw["aname"] = "_ISystemProperties_getParallelPortCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getParallelPortCount_Holder"
            self.pyclass = Holder

    class ISystemProperties_getParallelPortCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getParallelPortCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getParallelPortCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getParallelPortCountResponse")
            kw["aname"] = "_ISystemProperties_getParallelPortCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getParallelPortCountResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxBootPosition_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxBootPosition"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxBootPosition_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxBootPosition")
            kw["aname"] = "_ISystemProperties_getMaxBootPosition"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxBootPosition_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxBootPositionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxBootPositionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxBootPositionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxBootPositionResponse")
            kw["aname"] = "_ISystemProperties_getMaxBootPositionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxBootPositionResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getRawModeSupported_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getRawModeSupported"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getRawModeSupported_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getRawModeSupported")
            kw["aname"] = "_ISystemProperties_getRawModeSupported"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getRawModeSupported_Holder"
            self.pyclass = Holder

    class ISystemProperties_getRawModeSupportedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getRawModeSupportedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getRawModeSupportedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getRawModeSupportedResponse")
            kw["aname"] = "_ISystemProperties_getRawModeSupportedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getRawModeSupportedResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getExclusiveHwVirt_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getExclusiveHwVirt"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getExclusiveHwVirt_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getExclusiveHwVirt")
            kw["aname"] = "_ISystemProperties_getExclusiveHwVirt"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getExclusiveHwVirt_Holder"
            self.pyclass = Holder

    class ISystemProperties_getExclusiveHwVirtResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getExclusiveHwVirtResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getExclusiveHwVirtResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getExclusiveHwVirtResponse")
            kw["aname"] = "_ISystemProperties_getExclusiveHwVirtResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getExclusiveHwVirtResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setExclusiveHwVirt_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setExclusiveHwVirt"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setExclusiveHwVirt_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="exclusiveHwVirt", aname="_exclusiveHwVirt", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setExclusiveHwVirt")
            kw["aname"] = "_ISystemProperties_setExclusiveHwVirt"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._exclusiveHwVirt = None
                    return
            Holder.__name__ = "ISystemProperties_setExclusiveHwVirt_Holder"
            self.pyclass = Holder

    class ISystemProperties_setExclusiveHwVirtResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setExclusiveHwVirtResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setExclusiveHwVirtResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setExclusiveHwVirtResponse")
            kw["aname"] = "_ISystemProperties_setExclusiveHwVirtResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setExclusiveHwVirtResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultMachineFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultMachineFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultMachineFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultMachineFolder")
            kw["aname"] = "_ISystemProperties_getDefaultMachineFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultMachineFolder_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultMachineFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultMachineFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultMachineFolderResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultMachineFolderResponse")
            kw["aname"] = "_ISystemProperties_getDefaultMachineFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultMachineFolderResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultMachineFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultMachineFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultMachineFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultMachineFolder", aname="_defaultMachineFolder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultMachineFolder")
            kw["aname"] = "_ISystemProperties_setDefaultMachineFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._defaultMachineFolder = None
                    return
            Holder.__name__ = "ISystemProperties_setDefaultMachineFolder_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultMachineFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultMachineFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultMachineFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultMachineFolderResponse")
            kw["aname"] = "_ISystemProperties_setDefaultMachineFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setDefaultMachineFolderResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getLoggingLevel_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getLoggingLevel"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getLoggingLevel_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getLoggingLevel")
            kw["aname"] = "_ISystemProperties_getLoggingLevel"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getLoggingLevel_Holder"
            self.pyclass = Holder

    class ISystemProperties_getLoggingLevelResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getLoggingLevelResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getLoggingLevelResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getLoggingLevelResponse")
            kw["aname"] = "_ISystemProperties_getLoggingLevelResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getLoggingLevelResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setLoggingLevel_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setLoggingLevel"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setLoggingLevel_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="loggingLevel", aname="_loggingLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setLoggingLevel")
            kw["aname"] = "_ISystemProperties_setLoggingLevel"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._loggingLevel = None
                    return
            Holder.__name__ = "ISystemProperties_setLoggingLevel_Holder"
            self.pyclass = Holder

    class ISystemProperties_setLoggingLevelResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setLoggingLevelResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setLoggingLevelResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setLoggingLevelResponse")
            kw["aname"] = "_ISystemProperties_setLoggingLevelResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setLoggingLevelResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMediumFormats_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMediumFormats"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMediumFormats_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMediumFormats")
            kw["aname"] = "_ISystemProperties_getMediumFormats"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMediumFormats_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMediumFormatsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMediumFormatsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMediumFormatsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMediumFormatsResponse")
            kw["aname"] = "_ISystemProperties_getMediumFormatsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "ISystemProperties_getMediumFormatsResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultHardDiskFormat_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultHardDiskFormat"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultHardDiskFormat_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultHardDiskFormat")
            kw["aname"] = "_ISystemProperties_getDefaultHardDiskFormat"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultHardDiskFormat_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultHardDiskFormatResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultHardDiskFormatResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultHardDiskFormatResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultHardDiskFormatResponse")
            kw["aname"] = "_ISystemProperties_getDefaultHardDiskFormatResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultHardDiskFormatResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultHardDiskFormat_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultHardDiskFormat"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultHardDiskFormat_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultHardDiskFormat", aname="_defaultHardDiskFormat", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultHardDiskFormat")
            kw["aname"] = "_ISystemProperties_setDefaultHardDiskFormat"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._defaultHardDiskFormat = None
                    return
            Holder.__name__ = "ISystemProperties_setDefaultHardDiskFormat_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultHardDiskFormatResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultHardDiskFormatResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultHardDiskFormatResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultHardDiskFormatResponse")
            kw["aname"] = "_ISystemProperties_setDefaultHardDiskFormatResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setDefaultHardDiskFormatResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpaceWarning_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpaceWarning"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpaceWarning_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpaceWarning")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpaceWarning"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpaceWarning_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpaceWarningResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpaceWarningResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpaceWarningResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpaceWarningResponse")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpaceWarningResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpaceWarningResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpaceWarning_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpaceWarning"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpaceWarning_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="freeDiskSpaceWarning", aname="_freeDiskSpaceWarning", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpaceWarning")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpaceWarning"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._freeDiskSpaceWarning = None
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpaceWarning_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpaceWarningResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpaceWarningResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpaceWarningResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpaceWarningResponse")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpaceWarningResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpaceWarningResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpacePercentWarning_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpacePercentWarning"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpacePercentWarning_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpacePercentWarning")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpacePercentWarning"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpacePercentWarning_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpacePercentWarningResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpacePercentWarningResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpacePercentWarningResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpacePercentWarningResponse")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpacePercentWarningResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpacePercentWarningResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpacePercentWarning_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpacePercentWarning"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpacePercentWarning_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="freeDiskSpacePercentWarning", aname="_freeDiskSpacePercentWarning", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpacePercentWarning")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpacePercentWarning"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._freeDiskSpacePercentWarning = None
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpacePercentWarning_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpacePercentWarningResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpacePercentWarningResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpacePercentWarningResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpacePercentWarningResponse")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpacePercentWarningResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpacePercentWarningResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpaceError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpaceError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpaceError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpaceError")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpaceError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpaceError_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpaceErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpaceErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpaceErrorResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpaceErrorResponse")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpaceErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpaceErrorResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpaceError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpaceError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpaceError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="freeDiskSpaceError", aname="_freeDiskSpaceError", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpaceError")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpaceError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._freeDiskSpaceError = None
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpaceError_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpaceErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpaceErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpaceErrorResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpaceErrorResponse")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpaceErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpaceErrorResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpacePercentError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpacePercentError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpacePercentError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpacePercentError")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpacePercentError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpacePercentError_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpacePercentErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpacePercentErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpacePercentErrorResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpacePercentErrorResponse")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpacePercentErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpacePercentErrorResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpacePercentError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpacePercentError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpacePercentError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="freeDiskSpacePercentError", aname="_freeDiskSpacePercentError", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpacePercentError")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpacePercentError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._freeDiskSpacePercentError = None
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpacePercentError_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpacePercentErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpacePercentErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpacePercentErrorResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpacePercentErrorResponse")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpacePercentErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpacePercentErrorResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getVRDEAuthLibrary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getVRDEAuthLibrary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getVRDEAuthLibrary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getVRDEAuthLibrary")
            kw["aname"] = "_ISystemProperties_getVRDEAuthLibrary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getVRDEAuthLibrary_Holder"
            self.pyclass = Holder

    class ISystemProperties_getVRDEAuthLibraryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getVRDEAuthLibraryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getVRDEAuthLibraryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getVRDEAuthLibraryResponse")
            kw["aname"] = "_ISystemProperties_getVRDEAuthLibraryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getVRDEAuthLibraryResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setVRDEAuthLibrary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setVRDEAuthLibrary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setVRDEAuthLibrary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="VRDEAuthLibrary", aname="_VRDEAuthLibrary", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setVRDEAuthLibrary")
            kw["aname"] = "_ISystemProperties_setVRDEAuthLibrary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._VRDEAuthLibrary = None
                    return
            Holder.__name__ = "ISystemProperties_setVRDEAuthLibrary_Holder"
            self.pyclass = Holder

    class ISystemProperties_setVRDEAuthLibraryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setVRDEAuthLibraryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setVRDEAuthLibraryResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setVRDEAuthLibraryResponse")
            kw["aname"] = "_ISystemProperties_setVRDEAuthLibraryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setVRDEAuthLibraryResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getWebServiceAuthLibrary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getWebServiceAuthLibrary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getWebServiceAuthLibrary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getWebServiceAuthLibrary")
            kw["aname"] = "_ISystemProperties_getWebServiceAuthLibrary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getWebServiceAuthLibrary_Holder"
            self.pyclass = Holder

    class ISystemProperties_getWebServiceAuthLibraryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getWebServiceAuthLibraryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getWebServiceAuthLibraryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getWebServiceAuthLibraryResponse")
            kw["aname"] = "_ISystemProperties_getWebServiceAuthLibraryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getWebServiceAuthLibraryResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setWebServiceAuthLibrary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setWebServiceAuthLibrary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setWebServiceAuthLibrary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="webServiceAuthLibrary", aname="_webServiceAuthLibrary", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setWebServiceAuthLibrary")
            kw["aname"] = "_ISystemProperties_setWebServiceAuthLibrary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._webServiceAuthLibrary = None
                    return
            Holder.__name__ = "ISystemProperties_setWebServiceAuthLibrary_Holder"
            self.pyclass = Holder

    class ISystemProperties_setWebServiceAuthLibraryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setWebServiceAuthLibraryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setWebServiceAuthLibraryResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setWebServiceAuthLibraryResponse")
            kw["aname"] = "_ISystemProperties_setWebServiceAuthLibraryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setWebServiceAuthLibraryResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultVRDEExtPack_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultVRDEExtPack"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultVRDEExtPack_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultVRDEExtPack")
            kw["aname"] = "_ISystemProperties_getDefaultVRDEExtPack"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultVRDEExtPack_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultVRDEExtPackResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultVRDEExtPackResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultVRDEExtPackResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultVRDEExtPackResponse")
            kw["aname"] = "_ISystemProperties_getDefaultVRDEExtPackResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultVRDEExtPackResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultVRDEExtPack_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultVRDEExtPack"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultVRDEExtPack_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultVRDEExtPack", aname="_defaultVRDEExtPack", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultVRDEExtPack")
            kw["aname"] = "_ISystemProperties_setDefaultVRDEExtPack"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._defaultVRDEExtPack = None
                    return
            Holder.__name__ = "ISystemProperties_setDefaultVRDEExtPack_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultVRDEExtPackResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultVRDEExtPackResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultVRDEExtPackResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultVRDEExtPackResponse")
            kw["aname"] = "_ISystemProperties_setDefaultVRDEExtPackResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setDefaultVRDEExtPackResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getLogHistoryCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getLogHistoryCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getLogHistoryCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getLogHistoryCount")
            kw["aname"] = "_ISystemProperties_getLogHistoryCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getLogHistoryCount_Holder"
            self.pyclass = Holder

    class ISystemProperties_getLogHistoryCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getLogHistoryCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getLogHistoryCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getLogHistoryCountResponse")
            kw["aname"] = "_ISystemProperties_getLogHistoryCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getLogHistoryCountResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setLogHistoryCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setLogHistoryCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setLogHistoryCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="logHistoryCount", aname="_logHistoryCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setLogHistoryCount")
            kw["aname"] = "_ISystemProperties_setLogHistoryCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logHistoryCount = None
                    return
            Holder.__name__ = "ISystemProperties_setLogHistoryCount_Holder"
            self.pyclass = Holder

    class ISystemProperties_setLogHistoryCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setLogHistoryCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setLogHistoryCountResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setLogHistoryCountResponse")
            kw["aname"] = "_ISystemProperties_setLogHistoryCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setLogHistoryCountResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultAudioDriver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultAudioDriver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultAudioDriver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultAudioDriver")
            kw["aname"] = "_ISystemProperties_getDefaultAudioDriver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultAudioDriver_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultAudioDriverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultAudioDriverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultAudioDriverResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AudioDriverType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultAudioDriverResponse")
            kw["aname"] = "_ISystemProperties_getDefaultAudioDriverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultAudioDriverResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getAutostartDatabasePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getAutostartDatabasePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getAutostartDatabasePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getAutostartDatabasePath")
            kw["aname"] = "_ISystemProperties_getAutostartDatabasePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getAutostartDatabasePath_Holder"
            self.pyclass = Holder

    class ISystemProperties_getAutostartDatabasePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getAutostartDatabasePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getAutostartDatabasePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getAutostartDatabasePathResponse")
            kw["aname"] = "_ISystemProperties_getAutostartDatabasePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getAutostartDatabasePathResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setAutostartDatabasePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setAutostartDatabasePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setAutostartDatabasePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="autostartDatabasePath", aname="_autostartDatabasePath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setAutostartDatabasePath")
            kw["aname"] = "_ISystemProperties_setAutostartDatabasePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._autostartDatabasePath = None
                    return
            Holder.__name__ = "ISystemProperties_setAutostartDatabasePath_Holder"
            self.pyclass = Holder

    class ISystemProperties_setAutostartDatabasePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setAutostartDatabasePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setAutostartDatabasePathResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setAutostartDatabasePathResponse")
            kw["aname"] = "_ISystemProperties_setAutostartDatabasePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setAutostartDatabasePathResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultAdditionsISO_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultAdditionsISO"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultAdditionsISO_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultAdditionsISO")
            kw["aname"] = "_ISystemProperties_getDefaultAdditionsISO"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultAdditionsISO_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultAdditionsISOResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultAdditionsISOResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultAdditionsISOResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultAdditionsISOResponse")
            kw["aname"] = "_ISystemProperties_getDefaultAdditionsISOResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultAdditionsISOResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultAdditionsISO_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultAdditionsISO"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultAdditionsISO_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultAdditionsISO", aname="_defaultAdditionsISO", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultAdditionsISO")
            kw["aname"] = "_ISystemProperties_setDefaultAdditionsISO"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._defaultAdditionsISO = None
                    return
            Holder.__name__ = "ISystemProperties_setDefaultAdditionsISO_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultAdditionsISOResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultAdditionsISOResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultAdditionsISOResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultAdditionsISOResponse")
            kw["aname"] = "_ISystemProperties_setDefaultAdditionsISOResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setDefaultAdditionsISOResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultFrontend_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultFrontend"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultFrontend_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultFrontend")
            kw["aname"] = "_ISystemProperties_getDefaultFrontend"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultFrontend_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultFrontendResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultFrontendResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultFrontendResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultFrontendResponse")
            kw["aname"] = "_ISystemProperties_getDefaultFrontendResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultFrontendResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultFrontend_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultFrontend"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultFrontend_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultFrontend", aname="_defaultFrontend", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultFrontend")
            kw["aname"] = "_ISystemProperties_setDefaultFrontend"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._defaultFrontend = None
                    return
            Holder.__name__ = "ISystemProperties_setDefaultFrontend_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultFrontendResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultFrontendResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultFrontendResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultFrontendResponse")
            kw["aname"] = "_ISystemProperties_setDefaultFrontendResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setDefaultFrontendResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getScreenShotFormats_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getScreenShotFormats"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getScreenShotFormats_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getScreenShotFormats")
            kw["aname"] = "_ISystemProperties_getScreenShotFormats"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getScreenShotFormats_Holder"
            self.pyclass = Holder

    class ISystemProperties_getScreenShotFormatsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getScreenShotFormatsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getScreenShotFormatsResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","BitmapFormat",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getScreenShotFormatsResponse")
            kw["aname"] = "_ISystemProperties_getScreenShotFormatsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "ISystemProperties_getScreenShotFormatsResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getProxyMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getProxyMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getProxyMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getProxyMode")
            kw["aname"] = "_ISystemProperties_getProxyMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getProxyMode_Holder"
            self.pyclass = Holder

    class ISystemProperties_getProxyModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getProxyModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getProxyModeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ProxyMode",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getProxyModeResponse")
            kw["aname"] = "_ISystemProperties_getProxyModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getProxyModeResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setProxyMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setProxyMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setProxyMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ProxyMode",lazy=False)(pname="proxyMode", aname="_proxyMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setProxyMode")
            kw["aname"] = "_ISystemProperties_setProxyMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._proxyMode = None
                    return
            Holder.__name__ = "ISystemProperties_setProxyMode_Holder"
            self.pyclass = Holder

    class ISystemProperties_setProxyModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setProxyModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setProxyModeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setProxyModeResponse")
            kw["aname"] = "_ISystemProperties_setProxyModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setProxyModeResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getProxyURL_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getProxyURL"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getProxyURL_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getProxyURL")
            kw["aname"] = "_ISystemProperties_getProxyURL"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getProxyURL_Holder"
            self.pyclass = Holder

    class ISystemProperties_getProxyURLResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getProxyURLResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getProxyURLResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getProxyURLResponse")
            kw["aname"] = "_ISystemProperties_getProxyURLResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getProxyURLResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setProxyURL_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setProxyURL"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setProxyURL_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="proxyURL", aname="_proxyURL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setProxyURL")
            kw["aname"] = "_ISystemProperties_setProxyURL"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._proxyURL = None
                    return
            Holder.__name__ = "ISystemProperties_setProxyURL_Holder"
            self.pyclass = Holder

    class ISystemProperties_setProxyURLResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setProxyURLResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setProxyURLResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setProxyURLResponse")
            kw["aname"] = "_ISystemProperties_setProxyURLResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setProxyURLResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxNetworkAdapters_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxNetworkAdapters"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxNetworkAdapters_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ChipsetType",lazy=False)(pname="chipset", aname="_chipset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxNetworkAdapters")
            kw["aname"] = "_ISystemProperties_getMaxNetworkAdapters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._chipset = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxNetworkAdapters_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxNetworkAdaptersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxNetworkAdaptersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxNetworkAdaptersResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxNetworkAdaptersResponse")
            kw["aname"] = "_ISystemProperties_getMaxNetworkAdaptersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxNetworkAdaptersResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxNetworkAdaptersOfType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxNetworkAdaptersOfType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxNetworkAdaptersOfType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ChipsetType",lazy=False)(pname="chipset", aname="_chipset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","NetworkAttachmentType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxNetworkAdaptersOfType")
            kw["aname"] = "_ISystemProperties_getMaxNetworkAdaptersOfType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._chipset = None
                    self._type = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxNetworkAdaptersOfType_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxNetworkAdaptersOfTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxNetworkAdaptersOfTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxNetworkAdaptersOfTypeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxNetworkAdaptersOfTypeResponse")
            kw["aname"] = "_ISystemProperties_getMaxNetworkAdaptersOfTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxNetworkAdaptersOfTypeResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxDevicesPerPortForStorageBus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxDevicesPerPortForStorageBus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxDevicesPerPortForStorageBus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="bus", aname="_bus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxDevicesPerPortForStorageBus")
            kw["aname"] = "_ISystemProperties_getMaxDevicesPerPortForStorageBus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bus = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxDevicesPerPortForStorageBus_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxDevicesPerPortForStorageBusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxDevicesPerPortForStorageBusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxDevicesPerPortForStorageBusResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxDevicesPerPortForStorageBusResponse")
            kw["aname"] = "_ISystemProperties_getMaxDevicesPerPortForStorageBusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxDevicesPerPortForStorageBusResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinPortCountForStorageBus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinPortCountForStorageBus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinPortCountForStorageBus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="bus", aname="_bus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinPortCountForStorageBus")
            kw["aname"] = "_ISystemProperties_getMinPortCountForStorageBus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bus = None
                    return
            Holder.__name__ = "ISystemProperties_getMinPortCountForStorageBus_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinPortCountForStorageBusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinPortCountForStorageBusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinPortCountForStorageBusResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinPortCountForStorageBusResponse")
            kw["aname"] = "_ISystemProperties_getMinPortCountForStorageBusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMinPortCountForStorageBusResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxPortCountForStorageBus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxPortCountForStorageBus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxPortCountForStorageBus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="bus", aname="_bus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxPortCountForStorageBus")
            kw["aname"] = "_ISystemProperties_getMaxPortCountForStorageBus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bus = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxPortCountForStorageBus_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxPortCountForStorageBusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxPortCountForStorageBusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxPortCountForStorageBusResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxPortCountForStorageBusResponse")
            kw["aname"] = "_ISystemProperties_getMaxPortCountForStorageBusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxPortCountForStorageBusResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxInstancesOfStorageBus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxInstancesOfStorageBus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxInstancesOfStorageBus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ChipsetType",lazy=False)(pname="chipset", aname="_chipset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="bus", aname="_bus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxInstancesOfStorageBus")
            kw["aname"] = "_ISystemProperties_getMaxInstancesOfStorageBus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._chipset = None
                    self._bus = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxInstancesOfStorageBus_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxInstancesOfStorageBusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxInstancesOfStorageBusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxInstancesOfStorageBusResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxInstancesOfStorageBusResponse")
            kw["aname"] = "_ISystemProperties_getMaxInstancesOfStorageBusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxInstancesOfStorageBusResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDeviceTypesForStorageBus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDeviceTypesForStorageBus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDeviceTypesForStorageBus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="bus", aname="_bus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDeviceTypesForStorageBus")
            kw["aname"] = "_ISystemProperties_getDeviceTypesForStorageBus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bus = None
                    return
            Holder.__name__ = "ISystemProperties_getDeviceTypesForStorageBus_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDeviceTypesForStorageBusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDeviceTypesForStorageBusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDeviceTypesForStorageBusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDeviceTypesForStorageBusResponse")
            kw["aname"] = "_ISystemProperties_getDeviceTypesForStorageBusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "ISystemProperties_getDeviceTypesForStorageBusResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultIoCacheSettingForStorageController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultIoCacheSettingForStorageController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultIoCacheSettingForStorageController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageControllerType",lazy=False)(pname="controllerType", aname="_controllerType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultIoCacheSettingForStorageController")
            kw["aname"] = "_ISystemProperties_getDefaultIoCacheSettingForStorageController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._controllerType = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultIoCacheSettingForStorageController_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse")
            kw["aname"] = "_ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getStorageControllerHotplugCapable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getStorageControllerHotplugCapable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getStorageControllerHotplugCapable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageControllerType",lazy=False)(pname="controllerType", aname="_controllerType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getStorageControllerHotplugCapable")
            kw["aname"] = "_ISystemProperties_getStorageControllerHotplugCapable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._controllerType = None
                    return
            Holder.__name__ = "ISystemProperties_getStorageControllerHotplugCapable_Holder"
            self.pyclass = Holder

    class ISystemProperties_getStorageControllerHotplugCapableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getStorageControllerHotplugCapableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getStorageControllerHotplugCapableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getStorageControllerHotplugCapableResponse")
            kw["aname"] = "_ISystemProperties_getStorageControllerHotplugCapableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getStorageControllerHotplugCapableResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxInstancesOfUSBControllerType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxInstancesOfUSBControllerType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxInstancesOfUSBControllerType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ChipsetType",lazy=False)(pname="chipset", aname="_chipset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","USBControllerType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxInstancesOfUSBControllerType")
            kw["aname"] = "_ISystemProperties_getMaxInstancesOfUSBControllerType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._chipset = None
                    self._type = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxInstancesOfUSBControllerType_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxInstancesOfUSBControllerTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxInstancesOfUSBControllerTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxInstancesOfUSBControllerTypeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxInstancesOfUSBControllerTypeResponse")
            kw["aname"] = "_ISystemProperties_getMaxInstancesOfUSBControllerTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxInstancesOfUSBControllerTypeResponse_Holder"
            self.pyclass = Holder

    class IDnDBase_getFormats_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDBase_getFormats"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDBase_getFormats_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDBase_getFormats")
            kw["aname"] = "_IDnDBase_getFormats"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDnDBase_getFormats_Holder"
            self.pyclass = Holder

    class IDnDBase_getFormatsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDBase_getFormatsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDBase_getFormatsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDBase_getFormatsResponse")
            kw["aname"] = "_IDnDBase_getFormatsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IDnDBase_getFormatsResponse_Holder"
            self.pyclass = Holder

    class IDnDBase_getProtocolVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDBase_getProtocolVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDBase_getProtocolVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDBase_getProtocolVersion")
            kw["aname"] = "_IDnDBase_getProtocolVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDnDBase_getProtocolVersion_Holder"
            self.pyclass = Holder

    class IDnDBase_getProtocolVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDBase_getProtocolVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDBase_getProtocolVersionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDBase_getProtocolVersionResponse")
            kw["aname"] = "_IDnDBase_getProtocolVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDnDBase_getProtocolVersionResponse_Holder"
            self.pyclass = Holder

    class IDnDBase_isFormatSupported_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDBase_isFormatSupported"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDBase_isFormatSupported_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDBase_isFormatSupported")
            kw["aname"] = "_IDnDBase_isFormatSupported"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._format = None
                    return
            Holder.__name__ = "IDnDBase_isFormatSupported_Holder"
            self.pyclass = Holder

    class IDnDBase_isFormatSupportedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDBase_isFormatSupportedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDBase_isFormatSupportedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDBase_isFormatSupportedResponse")
            kw["aname"] = "_IDnDBase_isFormatSupportedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDnDBase_isFormatSupportedResponse_Holder"
            self.pyclass = Holder

    class IDnDBase_addFormats_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDBase_addFormats"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDBase_addFormats_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formats", aname="_formats", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDBase_addFormats")
            kw["aname"] = "_IDnDBase_addFormats"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._formats = []
                    return
            Holder.__name__ = "IDnDBase_addFormats_Holder"
            self.pyclass = Holder

    class IDnDBase_addFormatsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDBase_addFormatsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDBase_addFormatsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDnDBase_addFormatsResponse")
            kw["aname"] = "_IDnDBase_addFormatsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDnDBase_addFormatsResponse_Holder"
            self.pyclass = Holder

    class IDnDBase_removeFormats_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDBase_removeFormats"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDBase_removeFormats_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formats", aname="_formats", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDBase_removeFormats")
            kw["aname"] = "_IDnDBase_removeFormats"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._formats = []
                    return
            Holder.__name__ = "IDnDBase_removeFormats_Holder"
            self.pyclass = Holder

    class IDnDBase_removeFormatsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDBase_removeFormatsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDBase_removeFormatsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDnDBase_removeFormatsResponse")
            kw["aname"] = "_IDnDBase_removeFormatsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDnDBase_removeFormatsResponse_Holder"
            self.pyclass = Holder

    class IDnDSource_dragIsPending_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDSource_dragIsPending"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDSource_dragIsPending_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDSource_dragIsPending")
            kw["aname"] = "_IDnDSource_dragIsPending"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IDnDSource_dragIsPending_Holder"
            self.pyclass = Holder

    class IDnDSource_dragIsPendingResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDSource_dragIsPendingResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDSource_dragIsPendingResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="formats", aname="_formats", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DnDAction",lazy=False)(pname="allowedActions", aname="_allowedActions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DnDAction",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDSource_dragIsPendingResponse")
            kw["aname"] = "_IDnDSource_dragIsPendingResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._formats = []
                    self._allowedActions = []
                    self._returnval = None
                    return
            Holder.__name__ = "IDnDSource_dragIsPendingResponse_Holder"
            self.pyclass = Holder

    class IDnDSource_drop_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDSource_drop"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDSource_drop_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DnDAction",lazy=False)(pname="action", aname="_action", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDSource_drop")
            kw["aname"] = "_IDnDSource_drop"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._format = None
                    self._action = None
                    return
            Holder.__name__ = "IDnDSource_drop_Holder"
            self.pyclass = Holder

    class IDnDSource_dropResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDSource_dropResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDSource_dropResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDSource_dropResponse")
            kw["aname"] = "_IDnDSource_dropResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDnDSource_dropResponse_Holder"
            self.pyclass = Holder

    class IDnDSource_receiveData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDSource_receiveData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDSource_receiveData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDSource_receiveData")
            kw["aname"] = "_IDnDSource_receiveData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDnDSource_receiveData_Holder"
            self.pyclass = Holder

    class IDnDSource_receiveDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDSource_receiveDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDSource_receiveDataResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDSource_receiveDataResponse")
            kw["aname"] = "_IDnDSource_receiveDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDnDSource_receiveDataResponse_Holder"
            self.pyclass = Holder

    class IGuestDnDSource_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestDnDSource_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestDnDSource_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestDnDSource_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IGuestDnDSource_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestDnDSource_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IDnDTarget_enter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDTarget_enter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDTarget_enter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="y", aname="_y", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="x", aname="_x", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DnDAction",lazy=False)(pname="defaultAction", aname="_defaultAction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DnDAction",lazy=False)(pname="allowedActions", aname="_allowedActions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formats", aname="_formats", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDTarget_enter")
            kw["aname"] = "_IDnDTarget_enter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._y = None
                    self._x = None
                    self._defaultAction = None
                    self._allowedActions = []
                    self._formats = []
                    return
            Holder.__name__ = "IDnDTarget_enter_Holder"
            self.pyclass = Holder

    class IDnDTarget_enterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDTarget_enterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDTarget_enterResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","DnDAction",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDTarget_enterResponse")
            kw["aname"] = "_IDnDTarget_enterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDnDTarget_enterResponse_Holder"
            self.pyclass = Holder

    class IDnDTarget_move_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDTarget_move"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDTarget_move_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="x", aname="_x", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="y", aname="_y", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DnDAction",lazy=False)(pname="defaultAction", aname="_defaultAction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DnDAction",lazy=False)(pname="allowedActions", aname="_allowedActions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formats", aname="_formats", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDTarget_move")
            kw["aname"] = "_IDnDTarget_move"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._x = None
                    self._y = None
                    self._defaultAction = None
                    self._allowedActions = []
                    self._formats = []
                    return
            Holder.__name__ = "IDnDTarget_move_Holder"
            self.pyclass = Holder

    class IDnDTarget_moveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDTarget_moveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDTarget_moveResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","DnDAction",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDTarget_moveResponse")
            kw["aname"] = "_IDnDTarget_moveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDnDTarget_moveResponse_Holder"
            self.pyclass = Holder

    class IDnDTarget_leave_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDTarget_leave"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDTarget_leave_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDTarget_leave")
            kw["aname"] = "_IDnDTarget_leave"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IDnDTarget_leave_Holder"
            self.pyclass = Holder

    class IDnDTarget_leaveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDTarget_leaveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDTarget_leaveResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDnDTarget_leaveResponse")
            kw["aname"] = "_IDnDTarget_leaveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDnDTarget_leaveResponse_Holder"
            self.pyclass = Holder

    class IDnDTarget_drop_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDTarget_drop"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDTarget_drop_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="x", aname="_x", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="y", aname="_y", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DnDAction",lazy=False)(pname="defaultAction", aname="_defaultAction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DnDAction",lazy=False)(pname="allowedActions", aname="_allowedActions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formats", aname="_formats", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDTarget_drop")
            kw["aname"] = "_IDnDTarget_drop"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._x = None
                    self._y = None
                    self._defaultAction = None
                    self._allowedActions = []
                    self._formats = []
                    return
            Holder.__name__ = "IDnDTarget_drop_Holder"
            self.pyclass = Holder

    class IDnDTarget_dropResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDTarget_dropResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDTarget_dropResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DnDAction",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDTarget_dropResponse")
            kw["aname"] = "_IDnDTarget_dropResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._format = None
                    self._returnval = None
                    return
            Holder.__name__ = "IDnDTarget_dropResponse_Holder"
            self.pyclass = Holder

    class IDnDTarget_sendData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDTarget_sendData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDTarget_sendData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="data", aname="_data", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDTarget_sendData")
            kw["aname"] = "_IDnDTarget_sendData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._format = None
                    self._data = None
                    return
            Holder.__name__ = "IDnDTarget_sendData_Holder"
            self.pyclass = Holder

    class IDnDTarget_sendDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDTarget_sendDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDTarget_sendDataResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDTarget_sendDataResponse")
            kw["aname"] = "_IDnDTarget_sendDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDnDTarget_sendDataResponse_Holder"
            self.pyclass = Holder

    class IDnDTarget_cancel_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDTarget_cancel"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDTarget_cancel_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDTarget_cancel")
            kw["aname"] = "_IDnDTarget_cancel"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDnDTarget_cancel_Holder"
            self.pyclass = Holder

    class IDnDTarget_cancelResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDTarget_cancelResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDTarget_cancelResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDTarget_cancelResponse")
            kw["aname"] = "_IDnDTarget_cancelResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDnDTarget_cancelResponse_Holder"
            self.pyclass = Holder

    class IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getUser"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getUser_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getUser")
            kw["aname"] = "_IGuestSession_getUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getUser_Holder"
            self.pyclass = Holder

    class IGuestSession_getUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getUserResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getUserResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getUserResponse")
            kw["aname"] = "_IGuestSession_getUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_getUserResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getDomain_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getDomain"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getDomain_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getDomain")
            kw["aname"] = "_IGuestSession_getDomain"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getDomain_Holder"
            self.pyclass = Holder

    class IGuestSession_getDomainResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getDomainResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getDomainResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getDomainResponse")
            kw["aname"] = "_IGuestSession_getDomainResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_getDomainResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getName")
            kw["aname"] = "_IGuestSession_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getName_Holder"
            self.pyclass = Holder

    class IGuestSession_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getNameResponse")
            kw["aname"] = "_IGuestSession_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_getNameResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getId")
            kw["aname"] = "_IGuestSession_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getId_Holder"
            self.pyclass = Holder

    class IGuestSession_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getIdResponse")
            kw["aname"] = "_IGuestSession_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_getIdResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getTimeout_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getTimeout"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getTimeout_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getTimeout")
            kw["aname"] = "_IGuestSession_getTimeout"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getTimeout_Holder"
            self.pyclass = Holder

    class IGuestSession_getTimeoutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getTimeoutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getTimeoutResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getTimeoutResponse")
            kw["aname"] = "_IGuestSession_getTimeoutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_getTimeoutResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_setTimeout_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_setTimeout"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_setTimeout_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_setTimeout")
            kw["aname"] = "_IGuestSession_setTimeout"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._timeout = None
                    return
            Holder.__name__ = "IGuestSession_setTimeout_Holder"
            self.pyclass = Holder

    class IGuestSession_setTimeoutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_setTimeoutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_setTimeoutResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_setTimeoutResponse")
            kw["aname"] = "_IGuestSession_setTimeoutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuestSession_setTimeoutResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getProtocolVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getProtocolVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getProtocolVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getProtocolVersion")
            kw["aname"] = "_IGuestSession_getProtocolVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getProtocolVersion_Holder"
            self.pyclass = Holder

    class IGuestSession_getProtocolVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getProtocolVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getProtocolVersionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getProtocolVersionResponse")
            kw["aname"] = "_IGuestSession_getProtocolVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_getProtocolVersionResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getStatus")
            kw["aname"] = "_IGuestSession_getStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getStatus_Holder"
            self.pyclass = Holder

    class IGuestSession_getStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getStatusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","GuestSessionStatus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getStatusResponse")
            kw["aname"] = "_IGuestSession_getStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_getStatusResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getEnvironmentChanges_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getEnvironmentChanges"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getEnvironmentChanges_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getEnvironmentChanges")
            kw["aname"] = "_IGuestSession_getEnvironmentChanges"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getEnvironmentChanges_Holder"
            self.pyclass = Holder

    class IGuestSession_getEnvironmentChangesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getEnvironmentChangesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getEnvironmentChangesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getEnvironmentChangesResponse")
            kw["aname"] = "_IGuestSession_getEnvironmentChangesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuestSession_getEnvironmentChangesResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_setEnvironmentChanges_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_setEnvironmentChanges"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_setEnvironmentChanges_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="environmentChanges", aname="_environmentChanges", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_setEnvironmentChanges")
            kw["aname"] = "_IGuestSession_setEnvironmentChanges"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._environmentChanges = []
                    return
            Holder.__name__ = "IGuestSession_setEnvironmentChanges_Holder"
            self.pyclass = Holder

    class IGuestSession_setEnvironmentChangesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_setEnvironmentChangesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_setEnvironmentChangesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_setEnvironmentChangesResponse")
            kw["aname"] = "_IGuestSession_setEnvironmentChangesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuestSession_setEnvironmentChangesResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getEnvironmentBase_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getEnvironmentBase"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getEnvironmentBase_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getEnvironmentBase")
            kw["aname"] = "_IGuestSession_getEnvironmentBase"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getEnvironmentBase_Holder"
            self.pyclass = Holder

    class IGuestSession_getEnvironmentBaseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getEnvironmentBaseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getEnvironmentBaseResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getEnvironmentBaseResponse")
            kw["aname"] = "_IGuestSession_getEnvironmentBaseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuestSession_getEnvironmentBaseResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getProcesses_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getProcesses"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getProcesses_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getProcesses")
            kw["aname"] = "_IGuestSession_getProcesses"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getProcesses_Holder"
            self.pyclass = Holder

    class IGuestSession_getProcessesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getProcessesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getProcessesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getProcessesResponse")
            kw["aname"] = "_IGuestSession_getProcessesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuestSession_getProcessesResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getPathStyle_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getPathStyle"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getPathStyle_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getPathStyle")
            kw["aname"] = "_IGuestSession_getPathStyle"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getPathStyle_Holder"
            self.pyclass = Holder

    class IGuestSession_getPathStyleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getPathStyleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getPathStyleResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","PathStyle",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getPathStyleResponse")
            kw["aname"] = "_IGuestSession_getPathStyleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_getPathStyleResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getCurrentDirectory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getCurrentDirectory"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getCurrentDirectory_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getCurrentDirectory")
            kw["aname"] = "_IGuestSession_getCurrentDirectory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getCurrentDirectory_Holder"
            self.pyclass = Holder

    class IGuestSession_getCurrentDirectoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getCurrentDirectoryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getCurrentDirectoryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getCurrentDirectoryResponse")
            kw["aname"] = "_IGuestSession_getCurrentDirectoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_getCurrentDirectoryResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_setCurrentDirectory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_setCurrentDirectory"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_setCurrentDirectory_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="currentDirectory", aname="_currentDirectory", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_setCurrentDirectory")
            kw["aname"] = "_IGuestSession_setCurrentDirectory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._currentDirectory = None
                    return
            Holder.__name__ = "IGuestSession_setCurrentDirectory_Holder"
            self.pyclass = Holder

    class IGuestSession_setCurrentDirectoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_setCurrentDirectoryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_setCurrentDirectoryResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_setCurrentDirectoryResponse")
            kw["aname"] = "_IGuestSession_setCurrentDirectoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuestSession_setCurrentDirectoryResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getUserHome_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getUserHome"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getUserHome_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getUserHome")
            kw["aname"] = "_IGuestSession_getUserHome"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getUserHome_Holder"
            self.pyclass = Holder

    class IGuestSession_getUserHomeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getUserHomeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getUserHomeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getUserHomeResponse")
            kw["aname"] = "_IGuestSession_getUserHomeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_getUserHomeResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getUserDocuments_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getUserDocuments"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getUserDocuments_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getUserDocuments")
            kw["aname"] = "_IGuestSession_getUserDocuments"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getUserDocuments_Holder"
            self.pyclass = Holder

    class IGuestSession_getUserDocumentsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getUserDocumentsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getUserDocumentsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getUserDocumentsResponse")
            kw["aname"] = "_IGuestSession_getUserDocumentsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_getUserDocumentsResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getDirectories_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getDirectories"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getDirectories_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getDirectories")
            kw["aname"] = "_IGuestSession_getDirectories"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getDirectories_Holder"
            self.pyclass = Holder

    class IGuestSession_getDirectoriesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getDirectoriesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getDirectoriesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getDirectoriesResponse")
            kw["aname"] = "_IGuestSession_getDirectoriesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuestSession_getDirectoriesResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getFiles_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getFiles"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getFiles_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getFiles")
            kw["aname"] = "_IGuestSession_getFiles"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getFiles_Holder"
            self.pyclass = Holder

    class IGuestSession_getFilesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getFilesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getFilesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getFilesResponse")
            kw["aname"] = "_IGuestSession_getFilesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuestSession_getFilesResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getEventSource")
            kw["aname"] = "_IGuestSession_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_getEventSource_Holder"
            self.pyclass = Holder

    class IGuestSession_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_getEventSourceResponse")
            kw["aname"] = "_IGuestSession_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_close_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_close"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_close_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_close")
            kw["aname"] = "_IGuestSession_close"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSession_close_Holder"
            self.pyclass = Holder

    class IGuestSession_closeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_closeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_closeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_closeResponse")
            kw["aname"] = "_IGuestSession_closeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuestSession_closeResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_copyFromGuest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_copyFromGuest"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_copyFromGuest_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sources", aname="_sources", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filters", aname="_filters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destination", aname="_destination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_copyFromGuest")
            kw["aname"] = "_IGuestSession_copyFromGuest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._sources = []
                    self._filters = []
                    self._flags = []
                    self._destination = None
                    return
            Holder.__name__ = "IGuestSession_copyFromGuest_Holder"
            self.pyclass = Holder

    class IGuestSession_copyFromGuestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_copyFromGuestResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_copyFromGuestResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_copyFromGuestResponse")
            kw["aname"] = "_IGuestSession_copyFromGuestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_copyFromGuestResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_copyToGuest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_copyToGuest"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_copyToGuest_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sources", aname="_sources", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filters", aname="_filters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destination", aname="_destination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_copyToGuest")
            kw["aname"] = "_IGuestSession_copyToGuest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._sources = []
                    self._filters = []
                    self._flags = []
                    self._destination = None
                    return
            Holder.__name__ = "IGuestSession_copyToGuest_Holder"
            self.pyclass = Holder

    class IGuestSession_copyToGuestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_copyToGuestResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_copyToGuestResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_copyToGuestResponse")
            kw["aname"] = "_IGuestSession_copyToGuestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_copyToGuestResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryCopy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryCopy"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryCopy_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="source", aname="_source", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destination", aname="_destination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DirectoryCopyFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryCopy")
            kw["aname"] = "_IGuestSession_directoryCopy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._source = None
                    self._destination = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_directoryCopy_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryCopyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryCopyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryCopyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryCopyResponse")
            kw["aname"] = "_IGuestSession_directoryCopyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_directoryCopyResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryCopyFromGuest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryCopyFromGuest"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryCopyFromGuest_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="source", aname="_source", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destination", aname="_destination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DirectoryCopyFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryCopyFromGuest")
            kw["aname"] = "_IGuestSession_directoryCopyFromGuest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._source = None
                    self._destination = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_directoryCopyFromGuest_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryCopyFromGuestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryCopyFromGuestResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryCopyFromGuestResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryCopyFromGuestResponse")
            kw["aname"] = "_IGuestSession_directoryCopyFromGuestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_directoryCopyFromGuestResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryCopyToGuest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryCopyToGuest"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryCopyToGuest_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="source", aname="_source", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destination", aname="_destination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DirectoryCopyFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryCopyToGuest")
            kw["aname"] = "_IGuestSession_directoryCopyToGuest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._source = None
                    self._destination = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_directoryCopyToGuest_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryCopyToGuestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryCopyToGuestResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryCopyToGuestResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryCopyToGuestResponse")
            kw["aname"] = "_IGuestSession_directoryCopyToGuestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_directoryCopyToGuestResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryCreate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryCreate"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryCreate_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="mode", aname="_mode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DirectoryCreateFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryCreate")
            kw["aname"] = "_IGuestSession_directoryCreate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    self._mode = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_directoryCreate_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryCreateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryCreateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryCreateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryCreateResponse")
            kw["aname"] = "_IGuestSession_directoryCreateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuestSession_directoryCreateResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryCreateTemp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryCreateTemp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryCreateTemp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="templateName", aname="_templateName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="mode", aname="_mode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="secure", aname="_secure", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryCreateTemp")
            kw["aname"] = "_IGuestSession_directoryCreateTemp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._templateName = None
                    self._mode = None
                    self._path = None
                    self._secure = None
                    return
            Holder.__name__ = "IGuestSession_directoryCreateTemp_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryCreateTempResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryCreateTempResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryCreateTempResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryCreateTempResponse")
            kw["aname"] = "_IGuestSession_directoryCreateTempResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_directoryCreateTempResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryExists_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryExists"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryExists_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="followSymlinks", aname="_followSymlinks", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryExists")
            kw["aname"] = "_IGuestSession_directoryExists"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    self._followSymlinks = None
                    return
            Holder.__name__ = "IGuestSession_directoryExists_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryExistsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryExistsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryExistsResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryExistsResponse")
            kw["aname"] = "_IGuestSession_directoryExistsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_directoryExistsResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryOpen_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryOpen"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryOpen_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filter", aname="_filter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DirectoryOpenFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryOpen")
            kw["aname"] = "_IGuestSession_directoryOpen"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    self._filter = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_directoryOpen_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryOpenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryOpenResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryOpenResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryOpenResponse")
            kw["aname"] = "_IGuestSession_directoryOpenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_directoryOpenResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryRemove_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryRemove"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryRemove_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryRemove")
            kw["aname"] = "_IGuestSession_directoryRemove"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    return
            Holder.__name__ = "IGuestSession_directoryRemove_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryRemoveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryRemoveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryRemoveResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryRemoveResponse")
            kw["aname"] = "_IGuestSession_directoryRemoveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuestSession_directoryRemoveResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryRemoveRecursive_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryRemoveRecursive"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryRemoveRecursive_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DirectoryRemoveRecFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryRemoveRecursive")
            kw["aname"] = "_IGuestSession_directoryRemoveRecursive"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_directoryRemoveRecursive_Holder"
            self.pyclass = Holder

    class IGuestSession_directoryRemoveRecursiveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_directoryRemoveRecursiveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_directoryRemoveRecursiveResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_directoryRemoveRecursiveResponse")
            kw["aname"] = "_IGuestSession_directoryRemoveRecursiveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_directoryRemoveRecursiveResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_environmentScheduleSet_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_environmentScheduleSet"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_environmentScheduleSet_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_environmentScheduleSet")
            kw["aname"] = "_IGuestSession_environmentScheduleSet"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "IGuestSession_environmentScheduleSet_Holder"
            self.pyclass = Holder

    class IGuestSession_environmentScheduleSetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_environmentScheduleSetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_environmentScheduleSetResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_environmentScheduleSetResponse")
            kw["aname"] = "_IGuestSession_environmentScheduleSetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuestSession_environmentScheduleSetResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_environmentScheduleUnset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_environmentScheduleUnset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_environmentScheduleUnset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_environmentScheduleUnset")
            kw["aname"] = "_IGuestSession_environmentScheduleUnset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IGuestSession_environmentScheduleUnset_Holder"
            self.pyclass = Holder

    class IGuestSession_environmentScheduleUnsetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_environmentScheduleUnsetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_environmentScheduleUnsetResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_environmentScheduleUnsetResponse")
            kw["aname"] = "_IGuestSession_environmentScheduleUnsetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuestSession_environmentScheduleUnsetResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_environmentGetBaseVariable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_environmentGetBaseVariable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_environmentGetBaseVariable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_environmentGetBaseVariable")
            kw["aname"] = "_IGuestSession_environmentGetBaseVariable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IGuestSession_environmentGetBaseVariable_Holder"
            self.pyclass = Holder

    class IGuestSession_environmentGetBaseVariableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_environmentGetBaseVariableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_environmentGetBaseVariableResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_environmentGetBaseVariableResponse")
            kw["aname"] = "_IGuestSession_environmentGetBaseVariableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_environmentGetBaseVariableResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_environmentDoesBaseVariableExist_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_environmentDoesBaseVariableExist"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_environmentDoesBaseVariableExist_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_environmentDoesBaseVariableExist")
            kw["aname"] = "_IGuestSession_environmentDoesBaseVariableExist"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IGuestSession_environmentDoesBaseVariableExist_Holder"
            self.pyclass = Holder

    class IGuestSession_environmentDoesBaseVariableExistResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_environmentDoesBaseVariableExistResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_environmentDoesBaseVariableExistResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_environmentDoesBaseVariableExistResponse")
            kw["aname"] = "_IGuestSession_environmentDoesBaseVariableExistResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_environmentDoesBaseVariableExistResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fileCopy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileCopy"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileCopy_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="source", aname="_source", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destination", aname="_destination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FileCopyFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileCopy")
            kw["aname"] = "_IGuestSession_fileCopy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._source = None
                    self._destination = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_fileCopy_Holder"
            self.pyclass = Holder

    class IGuestSession_fileCopyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileCopyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileCopyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileCopyResponse")
            kw["aname"] = "_IGuestSession_fileCopyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_fileCopyResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fileCopyFromGuest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileCopyFromGuest"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileCopyFromGuest_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="source", aname="_source", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destination", aname="_destination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FileCopyFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileCopyFromGuest")
            kw["aname"] = "_IGuestSession_fileCopyFromGuest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._source = None
                    self._destination = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_fileCopyFromGuest_Holder"
            self.pyclass = Holder

    class IGuestSession_fileCopyFromGuestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileCopyFromGuestResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileCopyFromGuestResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileCopyFromGuestResponse")
            kw["aname"] = "_IGuestSession_fileCopyFromGuestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_fileCopyFromGuestResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fileCopyToGuest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileCopyToGuest"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileCopyToGuest_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="source", aname="_source", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destination", aname="_destination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FileCopyFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileCopyToGuest")
            kw["aname"] = "_IGuestSession_fileCopyToGuest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._source = None
                    self._destination = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_fileCopyToGuest_Holder"
            self.pyclass = Holder

    class IGuestSession_fileCopyToGuestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileCopyToGuestResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileCopyToGuestResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileCopyToGuestResponse")
            kw["aname"] = "_IGuestSession_fileCopyToGuestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_fileCopyToGuestResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fileCreateTemp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileCreateTemp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileCreateTemp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="templateName", aname="_templateName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="mode", aname="_mode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="secure", aname="_secure", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileCreateTemp")
            kw["aname"] = "_IGuestSession_fileCreateTemp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._templateName = None
                    self._mode = None
                    self._path = None
                    self._secure = None
                    return
            Holder.__name__ = "IGuestSession_fileCreateTemp_Holder"
            self.pyclass = Holder

    class IGuestSession_fileCreateTempResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileCreateTempResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileCreateTempResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileCreateTempResponse")
            kw["aname"] = "_IGuestSession_fileCreateTempResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_fileCreateTempResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fileExists_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileExists"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileExists_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="followSymlinks", aname="_followSymlinks", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileExists")
            kw["aname"] = "_IGuestSession_fileExists"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    self._followSymlinks = None
                    return
            Holder.__name__ = "IGuestSession_fileExists_Holder"
            self.pyclass = Holder

    class IGuestSession_fileExistsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileExistsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileExistsResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileExistsResponse")
            kw["aname"] = "_IGuestSession_fileExistsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_fileExistsResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fileOpen_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileOpen"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileOpen_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FileAccessMode",lazy=False)(pname="accessMode", aname="_accessMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FileOpenAction",lazy=False)(pname="openAction", aname="_openAction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="creationMode", aname="_creationMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileOpen")
            kw["aname"] = "_IGuestSession_fileOpen"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    self._accessMode = None
                    self._openAction = None
                    self._creationMode = None
                    return
            Holder.__name__ = "IGuestSession_fileOpen_Holder"
            self.pyclass = Holder

    class IGuestSession_fileOpenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileOpenResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileOpenResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileOpenResponse")
            kw["aname"] = "_IGuestSession_fileOpenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_fileOpenResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fileOpenEx_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileOpenEx"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileOpenEx_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FileAccessMode",lazy=False)(pname="accessMode", aname="_accessMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FileOpenAction",lazy=False)(pname="openAction", aname="_openAction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FileSharingMode",lazy=False)(pname="sharingMode", aname="_sharingMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="creationMode", aname="_creationMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FileOpenExFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileOpenEx")
            kw["aname"] = "_IGuestSession_fileOpenEx"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    self._accessMode = None
                    self._openAction = None
                    self._sharingMode = None
                    self._creationMode = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_fileOpenEx_Holder"
            self.pyclass = Holder

    class IGuestSession_fileOpenExResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileOpenExResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileOpenExResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileOpenExResponse")
            kw["aname"] = "_IGuestSession_fileOpenExResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_fileOpenExResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fileQuerySize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileQuerySize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileQuerySize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="followSymlinks", aname="_followSymlinks", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileQuerySize")
            kw["aname"] = "_IGuestSession_fileQuerySize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    self._followSymlinks = None
                    return
            Holder.__name__ = "IGuestSession_fileQuerySize_Holder"
            self.pyclass = Holder

    class IGuestSession_fileQuerySizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fileQuerySizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fileQuerySizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fileQuerySizeResponse")
            kw["aname"] = "_IGuestSession_fileQuerySizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_fileQuerySizeResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjExists_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjExists"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjExists_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="followSymlinks", aname="_followSymlinks", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjExists")
            kw["aname"] = "_IGuestSession_fsObjExists"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    self._followSymlinks = None
                    return
            Holder.__name__ = "IGuestSession_fsObjExists_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjExistsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjExistsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjExistsResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjExistsResponse")
            kw["aname"] = "_IGuestSession_fsObjExistsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_fsObjExistsResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjQueryInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjQueryInfo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjQueryInfo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="followSymlinks", aname="_followSymlinks", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjQueryInfo")
            kw["aname"] = "_IGuestSession_fsObjQueryInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    self._followSymlinks = None
                    return
            Holder.__name__ = "IGuestSession_fsObjQueryInfo_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjQueryInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjQueryInfoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjQueryInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjQueryInfoResponse")
            kw["aname"] = "_IGuestSession_fsObjQueryInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_fsObjQueryInfoResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjRemove_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjRemove"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjRemove_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjRemove")
            kw["aname"] = "_IGuestSession_fsObjRemove"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    return
            Holder.__name__ = "IGuestSession_fsObjRemove_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjRemoveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjRemoveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjRemoveResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjRemoveResponse")
            kw["aname"] = "_IGuestSession_fsObjRemoveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuestSession_fsObjRemoveResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjRemoveArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjRemoveArray"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjRemoveArray_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjRemoveArray")
            kw["aname"] = "_IGuestSession_fsObjRemoveArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = []
                    return
            Holder.__name__ = "IGuestSession_fsObjRemoveArray_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjRemoveArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjRemoveArrayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjRemoveArrayResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjRemoveArrayResponse")
            kw["aname"] = "_IGuestSession_fsObjRemoveArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_fsObjRemoveArrayResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjRename_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjRename"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjRename_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="oldPath", aname="_oldPath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newPath", aname="_newPath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FsObjRenameFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjRename")
            kw["aname"] = "_IGuestSession_fsObjRename"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._oldPath = None
                    self._newPath = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_fsObjRename_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjRenameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjRenameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjRenameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjRenameResponse")
            kw["aname"] = "_IGuestSession_fsObjRenameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuestSession_fsObjRenameResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjMove_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjMove"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjMove_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="source", aname="_source", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destination", aname="_destination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FsObjMoveFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjMove")
            kw["aname"] = "_IGuestSession_fsObjMove"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._source = None
                    self._destination = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_fsObjMove_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjMoveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjMoveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjMoveResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjMoveResponse")
            kw["aname"] = "_IGuestSession_fsObjMoveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_fsObjMoveResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjMoveArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjMoveArray"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjMoveArray_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="source", aname="_source", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destination", aname="_destination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FsObjMoveFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjMoveArray")
            kw["aname"] = "_IGuestSession_fsObjMoveArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._source = []
                    self._destination = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_fsObjMoveArray_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjMoveArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjMoveArrayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjMoveArrayResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjMoveArrayResponse")
            kw["aname"] = "_IGuestSession_fsObjMoveArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_fsObjMoveArrayResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjCopyArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjCopyArray"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjCopyArray_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="source", aname="_source", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destination", aname="_destination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FileCopyFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjCopyArray")
            kw["aname"] = "_IGuestSession_fsObjCopyArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._source = []
                    self._destination = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_fsObjCopyArray_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjCopyArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjCopyArrayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjCopyArrayResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjCopyArrayResponse")
            kw["aname"] = "_IGuestSession_fsObjCopyArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_fsObjCopyArrayResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjSetACL_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjSetACL"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjSetACL_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="followSymlinks", aname="_followSymlinks", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="acl", aname="_acl", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="mode", aname="_mode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjSetACL")
            kw["aname"] = "_IGuestSession_fsObjSetACL"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    self._followSymlinks = None
                    self._acl = None
                    self._mode = None
                    return
            Holder.__name__ = "IGuestSession_fsObjSetACL_Holder"
            self.pyclass = Holder

    class IGuestSession_fsObjSetACLResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_fsObjSetACLResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_fsObjSetACLResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_fsObjSetACLResponse")
            kw["aname"] = "_IGuestSession_fsObjSetACLResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuestSession_fsObjSetACLResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_processCreate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_processCreate"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_processCreate_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="executable", aname="_executable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="arguments", aname="_arguments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="environmentChanges", aname="_environmentChanges", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ProcessCreateFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_processCreate")
            kw["aname"] = "_IGuestSession_processCreate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._executable = None
                    self._arguments = []
                    self._environmentChanges = []
                    self._flags = []
                    self._timeoutMS = None
                    return
            Holder.__name__ = "IGuestSession_processCreate_Holder"
            self.pyclass = Holder

    class IGuestSession_processCreateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_processCreateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_processCreateResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_processCreateResponse")
            kw["aname"] = "_IGuestSession_processCreateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_processCreateResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_processCreateEx_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_processCreateEx"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_processCreateEx_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="executable", aname="_executable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="arguments", aname="_arguments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="environmentChanges", aname="_environmentChanges", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ProcessCreateFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ProcessPriority",lazy=False)(pname="priority", aname="_priority", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="affinity", aname="_affinity", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_processCreateEx")
            kw["aname"] = "_IGuestSession_processCreateEx"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._executable = None
                    self._arguments = []
                    self._environmentChanges = []
                    self._flags = []
                    self._timeoutMS = None
                    self._priority = None
                    self._affinity = []
                    return
            Holder.__name__ = "IGuestSession_processCreateEx_Holder"
            self.pyclass = Holder

    class IGuestSession_processCreateExResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_processCreateExResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_processCreateExResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_processCreateExResponse")
            kw["aname"] = "_IGuestSession_processCreateExResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_processCreateExResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_processGet_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_processGet"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_processGet_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_processGet")
            kw["aname"] = "_IGuestSession_processGet"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._pid = None
                    return
            Holder.__name__ = "IGuestSession_processGet_Holder"
            self.pyclass = Holder

    class IGuestSession_processGetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_processGetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_processGetResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_processGetResponse")
            kw["aname"] = "_IGuestSession_processGetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_processGetResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_symlinkCreate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_symlinkCreate"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_symlinkCreate_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="symlink", aname="_symlink", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="target", aname="_target", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","SymlinkType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_symlinkCreate")
            kw["aname"] = "_IGuestSession_symlinkCreate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._symlink = None
                    self._target = None
                    self._type = None
                    return
            Holder.__name__ = "IGuestSession_symlinkCreate_Holder"
            self.pyclass = Holder

    class IGuestSession_symlinkCreateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_symlinkCreateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_symlinkCreateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_symlinkCreateResponse")
            kw["aname"] = "_IGuestSession_symlinkCreateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuestSession_symlinkCreateResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_symlinkExists_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_symlinkExists"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_symlinkExists_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="symlink", aname="_symlink", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_symlinkExists")
            kw["aname"] = "_IGuestSession_symlinkExists"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._symlink = None
                    return
            Holder.__name__ = "IGuestSession_symlinkExists_Holder"
            self.pyclass = Holder

    class IGuestSession_symlinkExistsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_symlinkExistsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_symlinkExistsResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_symlinkExistsResponse")
            kw["aname"] = "_IGuestSession_symlinkExistsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_symlinkExistsResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_symlinkRead_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_symlinkRead"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_symlinkRead_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="symlink", aname="_symlink", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","SymlinkReadFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_symlinkRead")
            kw["aname"] = "_IGuestSession_symlinkRead"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._symlink = None
                    self._flags = []
                    return
            Holder.__name__ = "IGuestSession_symlinkRead_Holder"
            self.pyclass = Holder

    class IGuestSession_symlinkReadResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_symlinkReadResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_symlinkReadResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_symlinkReadResponse")
            kw["aname"] = "_IGuestSession_symlinkReadResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_symlinkReadResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_waitFor_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_waitFor"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_waitFor_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="waitFor", aname="_waitFor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_waitFor")
            kw["aname"] = "_IGuestSession_waitFor"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._waitFor = None
                    self._timeoutMS = None
                    return
            Holder.__name__ = "IGuestSession_waitFor_Holder"
            self.pyclass = Holder

    class IGuestSession_waitForResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_waitForResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_waitForResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","GuestSessionWaitResult",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_waitForResponse")
            kw["aname"] = "_IGuestSession_waitForResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_waitForResponse_Holder"
            self.pyclass = Holder

    class IGuestSession_waitForArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_waitForArray"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_waitForArray_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","GuestSessionWaitForFlag",lazy=False)(pname="waitFor", aname="_waitFor", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_waitForArray")
            kw["aname"] = "_IGuestSession_waitForArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._waitFor = []
                    self._timeoutMS = None
                    return
            Holder.__name__ = "IGuestSession_waitForArray_Holder"
            self.pyclass = Holder

    class IGuestSession_waitForArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSession_waitForArrayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSession_waitForArrayResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","GuestSessionWaitResult",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSession_waitForArrayResponse")
            kw["aname"] = "_IGuestSession_waitForArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSession_waitForArrayResponse_Holder"
            self.pyclass = Holder

    class IProcess_getArguments_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getArguments"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getArguments_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getArguments")
            kw["aname"] = "_IProcess_getArguments"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProcess_getArguments_Holder"
            self.pyclass = Holder

    class IProcess_getArgumentsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getArgumentsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getArgumentsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getArgumentsResponse")
            kw["aname"] = "_IProcess_getArgumentsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IProcess_getArgumentsResponse_Holder"
            self.pyclass = Holder

    class IProcess_getEnvironment_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getEnvironment"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getEnvironment_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getEnvironment")
            kw["aname"] = "_IProcess_getEnvironment"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProcess_getEnvironment_Holder"
            self.pyclass = Holder

    class IProcess_getEnvironmentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getEnvironmentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getEnvironmentResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getEnvironmentResponse")
            kw["aname"] = "_IProcess_getEnvironmentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IProcess_getEnvironmentResponse_Holder"
            self.pyclass = Holder

    class IProcess_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getEventSource")
            kw["aname"] = "_IProcess_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProcess_getEventSource_Holder"
            self.pyclass = Holder

    class IProcess_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getEventSourceResponse")
            kw["aname"] = "_IProcess_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProcess_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class IProcess_getExecutablePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getExecutablePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getExecutablePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getExecutablePath")
            kw["aname"] = "_IProcess_getExecutablePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProcess_getExecutablePath_Holder"
            self.pyclass = Holder

    class IProcess_getExecutablePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getExecutablePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getExecutablePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getExecutablePathResponse")
            kw["aname"] = "_IProcess_getExecutablePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProcess_getExecutablePathResponse_Holder"
            self.pyclass = Holder

    class IProcess_getExitCode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getExitCode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getExitCode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getExitCode")
            kw["aname"] = "_IProcess_getExitCode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProcess_getExitCode_Holder"
            self.pyclass = Holder

    class IProcess_getExitCodeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getExitCodeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getExitCodeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getExitCodeResponse")
            kw["aname"] = "_IProcess_getExitCodeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProcess_getExitCodeResponse_Holder"
            self.pyclass = Holder

    class IProcess_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getName")
            kw["aname"] = "_IProcess_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProcess_getName_Holder"
            self.pyclass = Holder

    class IProcess_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getNameResponse")
            kw["aname"] = "_IProcess_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProcess_getNameResponse_Holder"
            self.pyclass = Holder

    class IProcess_getPID_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getPID"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getPID_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getPID")
            kw["aname"] = "_IProcess_getPID"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProcess_getPID_Holder"
            self.pyclass = Holder

    class IProcess_getPIDResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getPIDResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getPIDResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getPIDResponse")
            kw["aname"] = "_IProcess_getPIDResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProcess_getPIDResponse_Holder"
            self.pyclass = Holder

    class IProcess_getStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getStatus")
            kw["aname"] = "_IProcess_getStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProcess_getStatus_Holder"
            self.pyclass = Holder

    class IProcess_getStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_getStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_getStatusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ProcessStatus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_getStatusResponse")
            kw["aname"] = "_IProcess_getStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProcess_getStatusResponse_Holder"
            self.pyclass = Holder

    class IProcess_waitFor_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_waitFor"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_waitFor_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="waitFor", aname="_waitFor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_waitFor")
            kw["aname"] = "_IProcess_waitFor"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._waitFor = None
                    self._timeoutMS = None
                    return
            Holder.__name__ = "IProcess_waitFor_Holder"
            self.pyclass = Holder

    class IProcess_waitForResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_waitForResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_waitForResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ProcessWaitResult",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_waitForResponse")
            kw["aname"] = "_IProcess_waitForResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProcess_waitForResponse_Holder"
            self.pyclass = Holder

    class IProcess_waitForArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_waitForArray"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_waitForArray_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ProcessWaitForFlag",lazy=False)(pname="waitFor", aname="_waitFor", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_waitForArray")
            kw["aname"] = "_IProcess_waitForArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._waitFor = []
                    self._timeoutMS = None
                    return
            Holder.__name__ = "IProcess_waitForArray_Holder"
            self.pyclass = Holder

    class IProcess_waitForArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_waitForArrayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_waitForArrayResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ProcessWaitResult",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_waitForArrayResponse")
            kw["aname"] = "_IProcess_waitForArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProcess_waitForArrayResponse_Holder"
            self.pyclass = Holder

    class IProcess_read_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_read"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_read_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="handle", aname="_handle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="toRead", aname="_toRead", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_read")
            kw["aname"] = "_IProcess_read"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._handle = None
                    self._toRead = None
                    self._timeoutMS = None
                    return
            Holder.__name__ = "IProcess_read_Holder"
            self.pyclass = Holder

    class IProcess_readResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_readResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_readResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_readResponse")
            kw["aname"] = "_IProcess_readResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProcess_readResponse_Holder"
            self.pyclass = Holder

    class IProcess_write_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_write"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_write_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="handle", aname="_handle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="data", aname="_data", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_write")
            kw["aname"] = "_IProcess_write"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._handle = None
                    self._flags = None
                    self._data = None
                    self._timeoutMS = None
                    return
            Holder.__name__ = "IProcess_write_Holder"
            self.pyclass = Holder

    class IProcess_writeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_writeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_writeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_writeResponse")
            kw["aname"] = "_IProcess_writeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProcess_writeResponse_Holder"
            self.pyclass = Holder

    class IProcess_writeArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_writeArray"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_writeArray_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="handle", aname="_handle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ProcessInputFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="data", aname="_data", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_writeArray")
            kw["aname"] = "_IProcess_writeArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._handle = None
                    self._flags = []
                    self._data = None
                    self._timeoutMS = None
                    return
            Holder.__name__ = "IProcess_writeArray_Holder"
            self.pyclass = Holder

    class IProcess_writeArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_writeArrayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_writeArrayResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_writeArrayResponse")
            kw["aname"] = "_IProcess_writeArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProcess_writeArrayResponse_Holder"
            self.pyclass = Holder

    class IProcess_terminate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_terminate"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_terminate_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_terminate")
            kw["aname"] = "_IProcess_terminate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProcess_terminate_Holder"
            self.pyclass = Holder

    class IProcess_terminateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProcess_terminateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProcess_terminateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IProcess_terminateResponse")
            kw["aname"] = "_IProcess_terminateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IProcess_terminateResponse_Holder"
            self.pyclass = Holder

    class IGuestProcess_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcess_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcess_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcess_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IGuestProcess_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestProcess_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IGuestProcess_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcess_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcess_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcess_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IGuestProcess_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestProcess_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IDirectory_getDirectoryName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDirectory_getDirectoryName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDirectory_getDirectoryName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDirectory_getDirectoryName")
            kw["aname"] = "_IDirectory_getDirectoryName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDirectory_getDirectoryName_Holder"
            self.pyclass = Holder

    class IDirectory_getDirectoryNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDirectory_getDirectoryNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDirectory_getDirectoryNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDirectory_getDirectoryNameResponse")
            kw["aname"] = "_IDirectory_getDirectoryNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDirectory_getDirectoryNameResponse_Holder"
            self.pyclass = Holder

    class IDirectory_getFilter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDirectory_getFilter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDirectory_getFilter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDirectory_getFilter")
            kw["aname"] = "_IDirectory_getFilter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDirectory_getFilter_Holder"
            self.pyclass = Holder

    class IDirectory_getFilterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDirectory_getFilterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDirectory_getFilterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDirectory_getFilterResponse")
            kw["aname"] = "_IDirectory_getFilterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDirectory_getFilterResponse_Holder"
            self.pyclass = Holder

    class IDirectory_close_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDirectory_close"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDirectory_close_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDirectory_close")
            kw["aname"] = "_IDirectory_close"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDirectory_close_Holder"
            self.pyclass = Holder

    class IDirectory_closeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDirectory_closeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDirectory_closeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDirectory_closeResponse")
            kw["aname"] = "_IDirectory_closeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDirectory_closeResponse_Holder"
            self.pyclass = Holder

    class IDirectory_read_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDirectory_read"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDirectory_read_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDirectory_read")
            kw["aname"] = "_IDirectory_read"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDirectory_read_Holder"
            self.pyclass = Holder

    class IDirectory_readResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDirectory_readResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDirectory_readResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDirectory_readResponse")
            kw["aname"] = "_IDirectory_readResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDirectory_readResponse_Holder"
            self.pyclass = Holder

    class IGuestDirectory_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestDirectory_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestDirectory_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestDirectory_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IGuestDirectory_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestDirectory_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IFile_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getEventSource")
            kw["aname"] = "_IFile_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFile_getEventSource_Holder"
            self.pyclass = Holder

    class IFile_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getEventSourceResponse")
            kw["aname"] = "_IFile_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class IFile_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getId")
            kw["aname"] = "_IFile_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFile_getId_Holder"
            self.pyclass = Holder

    class IFile_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getIdResponse")
            kw["aname"] = "_IFile_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_getIdResponse_Holder"
            self.pyclass = Holder

    class IFile_getInitialSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getInitialSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getInitialSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getInitialSize")
            kw["aname"] = "_IFile_getInitialSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFile_getInitialSize_Holder"
            self.pyclass = Holder

    class IFile_getInitialSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getInitialSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getInitialSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getInitialSizeResponse")
            kw["aname"] = "_IFile_getInitialSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_getInitialSizeResponse_Holder"
            self.pyclass = Holder

    class IFile_getOffset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getOffset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getOffset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getOffset")
            kw["aname"] = "_IFile_getOffset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFile_getOffset_Holder"
            self.pyclass = Holder

    class IFile_getOffsetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getOffsetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getOffsetResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getOffsetResponse")
            kw["aname"] = "_IFile_getOffsetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_getOffsetResponse_Holder"
            self.pyclass = Holder

    class IFile_getStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getStatus")
            kw["aname"] = "_IFile_getStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFile_getStatus_Holder"
            self.pyclass = Holder

    class IFile_getStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getStatusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","FileStatus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getStatusResponse")
            kw["aname"] = "_IFile_getStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_getStatusResponse_Holder"
            self.pyclass = Holder

    class IFile_getFilename_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getFilename"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getFilename_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getFilename")
            kw["aname"] = "_IFile_getFilename"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFile_getFilename_Holder"
            self.pyclass = Holder

    class IFile_getFilenameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getFilenameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getFilenameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getFilenameResponse")
            kw["aname"] = "_IFile_getFilenameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_getFilenameResponse_Holder"
            self.pyclass = Holder

    class IFile_getCreationMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getCreationMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getCreationMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getCreationMode")
            kw["aname"] = "_IFile_getCreationMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFile_getCreationMode_Holder"
            self.pyclass = Holder

    class IFile_getCreationModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getCreationModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getCreationModeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getCreationModeResponse")
            kw["aname"] = "_IFile_getCreationModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_getCreationModeResponse_Holder"
            self.pyclass = Holder

    class IFile_getOpenAction_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getOpenAction"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getOpenAction_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getOpenAction")
            kw["aname"] = "_IFile_getOpenAction"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFile_getOpenAction_Holder"
            self.pyclass = Holder

    class IFile_getOpenActionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getOpenActionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getOpenActionResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","FileOpenAction",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getOpenActionResponse")
            kw["aname"] = "_IFile_getOpenActionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_getOpenActionResponse_Holder"
            self.pyclass = Holder

    class IFile_getAccessMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getAccessMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getAccessMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getAccessMode")
            kw["aname"] = "_IFile_getAccessMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFile_getAccessMode_Holder"
            self.pyclass = Holder

    class IFile_getAccessModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_getAccessModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_getAccessModeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","FileAccessMode",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_getAccessModeResponse")
            kw["aname"] = "_IFile_getAccessModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_getAccessModeResponse_Holder"
            self.pyclass = Holder

    class IFile_close_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_close"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_close_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_close")
            kw["aname"] = "_IFile_close"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFile_close_Holder"
            self.pyclass = Holder

    class IFile_closeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_closeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_closeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IFile_closeResponse")
            kw["aname"] = "_IFile_closeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IFile_closeResponse_Holder"
            self.pyclass = Holder

    class IFile_queryInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_queryInfo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_queryInfo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_queryInfo")
            kw["aname"] = "_IFile_queryInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFile_queryInfo_Holder"
            self.pyclass = Holder

    class IFile_queryInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_queryInfoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_queryInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_queryInfoResponse")
            kw["aname"] = "_IFile_queryInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_queryInfoResponse_Holder"
            self.pyclass = Holder

    class IFile_querySize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_querySize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_querySize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_querySize")
            kw["aname"] = "_IFile_querySize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFile_querySize_Holder"
            self.pyclass = Holder

    class IFile_querySizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_querySizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_querySizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_querySizeResponse")
            kw["aname"] = "_IFile_querySizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_querySizeResponse_Holder"
            self.pyclass = Holder

    class IFile_read_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_read"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_read_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="toRead", aname="_toRead", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_read")
            kw["aname"] = "_IFile_read"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._toRead = None
                    self._timeoutMS = None
                    return
            Holder.__name__ = "IFile_read_Holder"
            self.pyclass = Holder

    class IFile_readResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_readResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_readResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_readResponse")
            kw["aname"] = "_IFile_readResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_readResponse_Holder"
            self.pyclass = Holder

    class IFile_readAt_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_readAt"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_readAt_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="offset", aname="_offset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="toRead", aname="_toRead", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_readAt")
            kw["aname"] = "_IFile_readAt"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._offset = None
                    self._toRead = None
                    self._timeoutMS = None
                    return
            Holder.__name__ = "IFile_readAt_Holder"
            self.pyclass = Holder

    class IFile_readAtResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_readAtResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_readAtResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_readAtResponse")
            kw["aname"] = "_IFile_readAtResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_readAtResponse_Holder"
            self.pyclass = Holder

    class IFile_seek_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_seek"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_seek_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="offset", aname="_offset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FileSeekOrigin",lazy=False)(pname="whence", aname="_whence", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_seek")
            kw["aname"] = "_IFile_seek"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._offset = None
                    self._whence = None
                    return
            Holder.__name__ = "IFile_seek_Holder"
            self.pyclass = Holder

    class IFile_seekResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_seekResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_seekResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_seekResponse")
            kw["aname"] = "_IFile_seekResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_seekResponse_Holder"
            self.pyclass = Holder

    class IFile_setACL_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_setACL"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_setACL_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="acl", aname="_acl", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="mode", aname="_mode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_setACL")
            kw["aname"] = "_IFile_setACL"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._acl = None
                    self._mode = None
                    return
            Holder.__name__ = "IFile_setACL_Holder"
            self.pyclass = Holder

    class IFile_setACLResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_setACLResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_setACLResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IFile_setACLResponse")
            kw["aname"] = "_IFile_setACLResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IFile_setACLResponse_Holder"
            self.pyclass = Holder

    class IFile_setSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_setSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_setSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_setSize")
            kw["aname"] = "_IFile_setSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._size = None
                    return
            Holder.__name__ = "IFile_setSize_Holder"
            self.pyclass = Holder

    class IFile_setSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_setSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_setSizeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IFile_setSizeResponse")
            kw["aname"] = "_IFile_setSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IFile_setSizeResponse_Holder"
            self.pyclass = Holder

    class IFile_write_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_write"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_write_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="data", aname="_data", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_write")
            kw["aname"] = "_IFile_write"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._data = None
                    self._timeoutMS = None
                    return
            Holder.__name__ = "IFile_write_Holder"
            self.pyclass = Holder

    class IFile_writeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_writeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_writeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_writeResponse")
            kw["aname"] = "_IFile_writeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_writeResponse_Holder"
            self.pyclass = Holder

    class IFile_writeAt_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_writeAt"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_writeAt_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="offset", aname="_offset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="data", aname="_data", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_writeAt")
            kw["aname"] = "_IFile_writeAt"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._offset = None
                    self._data = None
                    self._timeoutMS = None
                    return
            Holder.__name__ = "IFile_writeAt_Holder"
            self.pyclass = Holder

    class IFile_writeAtResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFile_writeAtResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFile_writeAtResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFile_writeAtResponse")
            kw["aname"] = "_IFile_writeAtResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFile_writeAtResponse_Holder"
            self.pyclass = Holder

    class IGuestFile_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFile_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFile_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFile_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IGuestFile_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestFile_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IGuestFile_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFile_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFile_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFile_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IGuestFile_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestFile_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getName")
            kw["aname"] = "_IFsObjInfo_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getName_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getNameResponse")
            kw["aname"] = "_IFsObjInfo_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getNameResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getType")
            kw["aname"] = "_IFsObjInfo_getType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getType_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","FsObjType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getTypeResponse")
            kw["aname"] = "_IFsObjInfo_getTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getTypeResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getFileAttributes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getFileAttributes"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getFileAttributes_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getFileAttributes")
            kw["aname"] = "_IFsObjInfo_getFileAttributes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getFileAttributes_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getFileAttributesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getFileAttributesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getFileAttributesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getFileAttributesResponse")
            kw["aname"] = "_IFsObjInfo_getFileAttributesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getFileAttributesResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getObjectSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getObjectSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getObjectSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getObjectSize")
            kw["aname"] = "_IFsObjInfo_getObjectSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getObjectSize_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getObjectSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getObjectSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getObjectSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getObjectSizeResponse")
            kw["aname"] = "_IFsObjInfo_getObjectSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getObjectSizeResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getAllocatedSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getAllocatedSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getAllocatedSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getAllocatedSize")
            kw["aname"] = "_IFsObjInfo_getAllocatedSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getAllocatedSize_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getAllocatedSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getAllocatedSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getAllocatedSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getAllocatedSizeResponse")
            kw["aname"] = "_IFsObjInfo_getAllocatedSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getAllocatedSizeResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getAccessTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getAccessTime"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getAccessTime_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getAccessTime")
            kw["aname"] = "_IFsObjInfo_getAccessTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getAccessTime_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getAccessTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getAccessTimeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getAccessTimeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getAccessTimeResponse")
            kw["aname"] = "_IFsObjInfo_getAccessTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getAccessTimeResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getBirthTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getBirthTime"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getBirthTime_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getBirthTime")
            kw["aname"] = "_IFsObjInfo_getBirthTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getBirthTime_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getBirthTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getBirthTimeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getBirthTimeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getBirthTimeResponse")
            kw["aname"] = "_IFsObjInfo_getBirthTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getBirthTimeResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getChangeTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getChangeTime"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getChangeTime_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getChangeTime")
            kw["aname"] = "_IFsObjInfo_getChangeTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getChangeTime_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getChangeTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getChangeTimeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getChangeTimeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getChangeTimeResponse")
            kw["aname"] = "_IFsObjInfo_getChangeTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getChangeTimeResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getModificationTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getModificationTime"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getModificationTime_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getModificationTime")
            kw["aname"] = "_IFsObjInfo_getModificationTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getModificationTime_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getModificationTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getModificationTimeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getModificationTimeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getModificationTimeResponse")
            kw["aname"] = "_IFsObjInfo_getModificationTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getModificationTimeResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getUID_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getUID"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getUID_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getUID")
            kw["aname"] = "_IFsObjInfo_getUID"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getUID_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getUIDResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getUIDResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getUIDResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getUIDResponse")
            kw["aname"] = "_IFsObjInfo_getUIDResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getUIDResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getUserName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getUserName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getUserName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getUserName")
            kw["aname"] = "_IFsObjInfo_getUserName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getUserName_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getUserNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getUserNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getUserNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getUserNameResponse")
            kw["aname"] = "_IFsObjInfo_getUserNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getUserNameResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getGID_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getGID"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getGID_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getGID")
            kw["aname"] = "_IFsObjInfo_getGID"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getGID_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getGIDResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getGIDResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getGIDResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getGIDResponse")
            kw["aname"] = "_IFsObjInfo_getGIDResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getGIDResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getGroupName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getGroupName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getGroupName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getGroupName")
            kw["aname"] = "_IFsObjInfo_getGroupName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getGroupName_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getGroupNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getGroupNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getGroupNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getGroupNameResponse")
            kw["aname"] = "_IFsObjInfo_getGroupNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getGroupNameResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getNodeId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getNodeId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getNodeId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getNodeId")
            kw["aname"] = "_IFsObjInfo_getNodeId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getNodeId_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getNodeIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getNodeIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getNodeIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getNodeIdResponse")
            kw["aname"] = "_IFsObjInfo_getNodeIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getNodeIdResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getNodeIdDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getNodeIdDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getNodeIdDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getNodeIdDevice")
            kw["aname"] = "_IFsObjInfo_getNodeIdDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getNodeIdDevice_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getNodeIdDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getNodeIdDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getNodeIdDeviceResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getNodeIdDeviceResponse")
            kw["aname"] = "_IFsObjInfo_getNodeIdDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getNodeIdDeviceResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getHardLinks_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getHardLinks"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getHardLinks_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getHardLinks")
            kw["aname"] = "_IFsObjInfo_getHardLinks"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getHardLinks_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getHardLinksResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getHardLinksResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getHardLinksResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getHardLinksResponse")
            kw["aname"] = "_IFsObjInfo_getHardLinksResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getHardLinksResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getDeviceNumber_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getDeviceNumber"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getDeviceNumber_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getDeviceNumber")
            kw["aname"] = "_IFsObjInfo_getDeviceNumber"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getDeviceNumber_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getDeviceNumberResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getDeviceNumberResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getDeviceNumberResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getDeviceNumberResponse")
            kw["aname"] = "_IFsObjInfo_getDeviceNumberResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getDeviceNumberResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getGenerationId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getGenerationId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getGenerationId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getGenerationId")
            kw["aname"] = "_IFsObjInfo_getGenerationId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getGenerationId_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getGenerationIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getGenerationIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getGenerationIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getGenerationIdResponse")
            kw["aname"] = "_IFsObjInfo_getGenerationIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getGenerationIdResponse_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getUserFlags_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getUserFlags"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getUserFlags_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getUserFlags")
            kw["aname"] = "_IFsObjInfo_getUserFlags"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFsObjInfo_getUserFlags_Holder"
            self.pyclass = Holder

    class IFsObjInfo_getUserFlagsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFsObjInfo_getUserFlagsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFsObjInfo_getUserFlagsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFsObjInfo_getUserFlagsResponse")
            kw["aname"] = "_IFsObjInfo_getUserFlagsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFsObjInfo_getUserFlagsResponse_Holder"
            self.pyclass = Holder

    class IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IGuest_getOSTypeId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getOSTypeId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getOSTypeId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getOSTypeId")
            kw["aname"] = "_IGuest_getOSTypeId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getOSTypeId_Holder"
            self.pyclass = Holder

    class IGuest_getOSTypeIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getOSTypeIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getOSTypeIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getOSTypeIdResponse")
            kw["aname"] = "_IGuest_getOSTypeIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getOSTypeIdResponse_Holder"
            self.pyclass = Holder

    class IGuest_getAdditionsRunLevel_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getAdditionsRunLevel"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getAdditionsRunLevel_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getAdditionsRunLevel")
            kw["aname"] = "_IGuest_getAdditionsRunLevel"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getAdditionsRunLevel_Holder"
            self.pyclass = Holder

    class IGuest_getAdditionsRunLevelResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getAdditionsRunLevelResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getAdditionsRunLevelResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AdditionsRunLevelType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getAdditionsRunLevelResponse")
            kw["aname"] = "_IGuest_getAdditionsRunLevelResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getAdditionsRunLevelResponse_Holder"
            self.pyclass = Holder

    class IGuest_getAdditionsVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getAdditionsVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getAdditionsVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getAdditionsVersion")
            kw["aname"] = "_IGuest_getAdditionsVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getAdditionsVersion_Holder"
            self.pyclass = Holder

    class IGuest_getAdditionsVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getAdditionsVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getAdditionsVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getAdditionsVersionResponse")
            kw["aname"] = "_IGuest_getAdditionsVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getAdditionsVersionResponse_Holder"
            self.pyclass = Holder

    class IGuest_getAdditionsRevision_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getAdditionsRevision"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getAdditionsRevision_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getAdditionsRevision")
            kw["aname"] = "_IGuest_getAdditionsRevision"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getAdditionsRevision_Holder"
            self.pyclass = Holder

    class IGuest_getAdditionsRevisionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getAdditionsRevisionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getAdditionsRevisionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getAdditionsRevisionResponse")
            kw["aname"] = "_IGuest_getAdditionsRevisionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getAdditionsRevisionResponse_Holder"
            self.pyclass = Holder

    class IGuest_getDnDSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getDnDSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getDnDSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getDnDSource")
            kw["aname"] = "_IGuest_getDnDSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getDnDSource_Holder"
            self.pyclass = Holder

    class IGuest_getDnDSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getDnDSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getDnDSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getDnDSourceResponse")
            kw["aname"] = "_IGuest_getDnDSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getDnDSourceResponse_Holder"
            self.pyclass = Holder

    class IGuest_getDnDTarget_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getDnDTarget"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getDnDTarget_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getDnDTarget")
            kw["aname"] = "_IGuest_getDnDTarget"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getDnDTarget_Holder"
            self.pyclass = Holder

    class IGuest_getDnDTargetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getDnDTargetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getDnDTargetResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getDnDTargetResponse")
            kw["aname"] = "_IGuest_getDnDTargetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getDnDTargetResponse_Holder"
            self.pyclass = Holder

    class IGuest_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getEventSource")
            kw["aname"] = "_IGuest_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getEventSource_Holder"
            self.pyclass = Holder

    class IGuest_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getEventSourceResponse")
            kw["aname"] = "_IGuest_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class IGuest_getFacilities_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getFacilities"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getFacilities_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getFacilities")
            kw["aname"] = "_IGuest_getFacilities"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getFacilities_Holder"
            self.pyclass = Holder

    class IGuest_getFacilitiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getFacilitiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getFacilitiesResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IAdditionsFacility",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getFacilitiesResponse")
            kw["aname"] = "_IGuest_getFacilitiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuest_getFacilitiesResponse_Holder"
            self.pyclass = Holder

    class IGuest_getSessions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getSessions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getSessions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getSessions")
            kw["aname"] = "_IGuest_getSessions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getSessions_Holder"
            self.pyclass = Holder

    class IGuest_getSessionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getSessionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getSessionsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getSessionsResponse")
            kw["aname"] = "_IGuest_getSessionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuest_getSessionsResponse_Holder"
            self.pyclass = Holder

    class IGuest_getMemoryBalloonSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getMemoryBalloonSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getMemoryBalloonSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getMemoryBalloonSize")
            kw["aname"] = "_IGuest_getMemoryBalloonSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getMemoryBalloonSize_Holder"
            self.pyclass = Holder

    class IGuest_getMemoryBalloonSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getMemoryBalloonSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getMemoryBalloonSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getMemoryBalloonSizeResponse")
            kw["aname"] = "_IGuest_getMemoryBalloonSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getMemoryBalloonSizeResponse_Holder"
            self.pyclass = Holder

    class IGuest_setMemoryBalloonSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_setMemoryBalloonSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_setMemoryBalloonSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memoryBalloonSize", aname="_memoryBalloonSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_setMemoryBalloonSize")
            kw["aname"] = "_IGuest_setMemoryBalloonSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._memoryBalloonSize = None
                    return
            Holder.__name__ = "IGuest_setMemoryBalloonSize_Holder"
            self.pyclass = Holder

    class IGuest_setMemoryBalloonSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_setMemoryBalloonSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_setMemoryBalloonSizeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_setMemoryBalloonSizeResponse")
            kw["aname"] = "_IGuest_setMemoryBalloonSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuest_setMemoryBalloonSizeResponse_Holder"
            self.pyclass = Holder

    class IGuest_getStatisticsUpdateInterval_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getStatisticsUpdateInterval"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getStatisticsUpdateInterval_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getStatisticsUpdateInterval")
            kw["aname"] = "_IGuest_getStatisticsUpdateInterval"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getStatisticsUpdateInterval_Holder"
            self.pyclass = Holder

    class IGuest_getStatisticsUpdateIntervalResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getStatisticsUpdateIntervalResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getStatisticsUpdateIntervalResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getStatisticsUpdateIntervalResponse")
            kw["aname"] = "_IGuest_getStatisticsUpdateIntervalResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getStatisticsUpdateIntervalResponse_Holder"
            self.pyclass = Holder

    class IGuest_setStatisticsUpdateInterval_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_setStatisticsUpdateInterval"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_setStatisticsUpdateInterval_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="statisticsUpdateInterval", aname="_statisticsUpdateInterval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_setStatisticsUpdateInterval")
            kw["aname"] = "_IGuest_setStatisticsUpdateInterval"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._statisticsUpdateInterval = None
                    return
            Holder.__name__ = "IGuest_setStatisticsUpdateInterval_Holder"
            self.pyclass = Holder

    class IGuest_setStatisticsUpdateIntervalResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_setStatisticsUpdateIntervalResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_setStatisticsUpdateIntervalResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_setStatisticsUpdateIntervalResponse")
            kw["aname"] = "_IGuest_setStatisticsUpdateIntervalResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuest_setStatisticsUpdateIntervalResponse_Holder"
            self.pyclass = Holder

    class IGuest_internalGetStatistics_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_internalGetStatistics"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_internalGetStatistics_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_internalGetStatistics")
            kw["aname"] = "_IGuest_internalGetStatistics"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_internalGetStatistics_Holder"
            self.pyclass = Holder

    class IGuest_internalGetStatisticsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_internalGetStatisticsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_internalGetStatisticsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="cpuUser", aname="_cpuUser", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuKernel", aname="_cpuKernel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuIdle", aname="_cpuIdle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memTotal", aname="_memTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memFree", aname="_memFree", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memBalloon", aname="_memBalloon", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memShared", aname="_memShared", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memCache", aname="_memCache", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="pagedTotal", aname="_pagedTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memAllocTotal", aname="_memAllocTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memFreeTotal", aname="_memFreeTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memBalloonTotal", aname="_memBalloonTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memSharedTotal", aname="_memSharedTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_internalGetStatisticsResponse")
            kw["aname"] = "_IGuest_internalGetStatisticsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cpuUser = None
                    self._cpuKernel = None
                    self._cpuIdle = None
                    self._memTotal = None
                    self._memFree = None
                    self._memBalloon = None
                    self._memShared = None
                    self._memCache = None
                    self._pagedTotal = None
                    self._memAllocTotal = None
                    self._memFreeTotal = None
                    self._memBalloonTotal = None
                    self._memSharedTotal = None
                    return
            Holder.__name__ = "IGuest_internalGetStatisticsResponse_Holder"
            self.pyclass = Holder

    class IGuest_getFacilityStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getFacilityStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getFacilityStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AdditionsFacilityType",lazy=False)(pname="facility", aname="_facility", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getFacilityStatus")
            kw["aname"] = "_IGuest_getFacilityStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._facility = None
                    return
            Holder.__name__ = "IGuest_getFacilityStatus_Holder"
            self.pyclass = Holder

    class IGuest_getFacilityStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getFacilityStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getFacilityStatusResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="timestamp", aname="_timestamp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AdditionsFacilityStatus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getFacilityStatusResponse")
            kw["aname"] = "_IGuest_getFacilityStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._timestamp = None
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getFacilityStatusResponse_Holder"
            self.pyclass = Holder

    class IGuest_getAdditionsStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getAdditionsStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getAdditionsStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AdditionsRunLevelType",lazy=False)(pname="level", aname="_level", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getAdditionsStatus")
            kw["aname"] = "_IGuest_getAdditionsStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._level = None
                    return
            Holder.__name__ = "IGuest_getAdditionsStatus_Holder"
            self.pyclass = Holder

    class IGuest_getAdditionsStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getAdditionsStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getAdditionsStatusResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getAdditionsStatusResponse")
            kw["aname"] = "_IGuest_getAdditionsStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getAdditionsStatusResponse_Holder"
            self.pyclass = Holder

    class IGuest_setCredentials_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_setCredentials"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_setCredentials_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userName", aname="_userName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="allowInteractiveLogon", aname="_allowInteractiveLogon", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_setCredentials")
            kw["aname"] = "_IGuest_setCredentials"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._userName = None
                    self._password = None
                    self._domain = None
                    self._allowInteractiveLogon = None
                    return
            Holder.__name__ = "IGuest_setCredentials_Holder"
            self.pyclass = Holder

    class IGuest_setCredentialsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_setCredentialsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_setCredentialsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_setCredentialsResponse")
            kw["aname"] = "_IGuest_setCredentialsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuest_setCredentialsResponse_Holder"
            self.pyclass = Holder

    class IGuest_createSession_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_createSession"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_createSession_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="user", aname="_user", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessionName", aname="_sessionName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_createSession")
            kw["aname"] = "_IGuest_createSession"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._user = None
                    self._password = None
                    self._domain = None
                    self._sessionName = None
                    return
            Holder.__name__ = "IGuest_createSession_Holder"
            self.pyclass = Holder

    class IGuest_createSessionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_createSessionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_createSessionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_createSessionResponse")
            kw["aname"] = "_IGuest_createSessionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_createSessionResponse_Holder"
            self.pyclass = Holder

    class IGuest_findSession_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_findSession"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_findSession_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessionName", aname="_sessionName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_findSession")
            kw["aname"] = "_IGuest_findSession"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._sessionName = None
                    return
            Holder.__name__ = "IGuest_findSession_Holder"
            self.pyclass = Holder

    class IGuest_findSessionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_findSessionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_findSessionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_findSessionResponse")
            kw["aname"] = "_IGuest_findSessionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuest_findSessionResponse_Holder"
            self.pyclass = Holder

    class IGuest_updateGuestAdditions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_updateGuestAdditions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_updateGuestAdditions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="source", aname="_source", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="arguments", aname="_arguments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AdditionsUpdateFlag",lazy=False)(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_updateGuestAdditions")
            kw["aname"] = "_IGuest_updateGuestAdditions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._source = None
                    self._arguments = []
                    self._flags = []
                    return
            Holder.__name__ = "IGuest_updateGuestAdditions_Holder"
            self.pyclass = Holder

    class IGuest_updateGuestAdditionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_updateGuestAdditionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_updateGuestAdditionsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_updateGuestAdditionsResponse")
            kw["aname"] = "_IGuest_updateGuestAdditionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_updateGuestAdditionsResponse_Holder"
            self.pyclass = Holder

    class IProgress_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getId")
            kw["aname"] = "_IProgress_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getId_Holder"
            self.pyclass = Holder

    class IProgress_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getIdResponse")
            kw["aname"] = "_IProgress_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getIdResponse_Holder"
            self.pyclass = Holder

    class IProgress_getDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getDescription")
            kw["aname"] = "_IProgress_getDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getDescription_Holder"
            self.pyclass = Holder

    class IProgress_getDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getDescriptionResponse")
            kw["aname"] = "_IProgress_getDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getDescriptionResponse_Holder"
            self.pyclass = Holder

    class IProgress_getInitiator_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getInitiator"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getInitiator_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getInitiator")
            kw["aname"] = "_IProgress_getInitiator"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getInitiator_Holder"
            self.pyclass = Holder

    class IProgress_getInitiatorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getInitiatorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getInitiatorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getInitiatorResponse")
            kw["aname"] = "_IProgress_getInitiatorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getInitiatorResponse_Holder"
            self.pyclass = Holder

    class IProgress_getCancelable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getCancelable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getCancelable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getCancelable")
            kw["aname"] = "_IProgress_getCancelable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getCancelable_Holder"
            self.pyclass = Holder

    class IProgress_getCancelableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getCancelableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getCancelableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getCancelableResponse")
            kw["aname"] = "_IProgress_getCancelableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getCancelableResponse_Holder"
            self.pyclass = Holder

    class IProgress_getPercent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getPercent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getPercent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getPercent")
            kw["aname"] = "_IProgress_getPercent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getPercent_Holder"
            self.pyclass = Holder

    class IProgress_getPercentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getPercentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getPercentResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getPercentResponse")
            kw["aname"] = "_IProgress_getPercentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getPercentResponse_Holder"
            self.pyclass = Holder

    class IProgress_getTimeRemaining_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getTimeRemaining"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getTimeRemaining_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getTimeRemaining")
            kw["aname"] = "_IProgress_getTimeRemaining"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getTimeRemaining_Holder"
            self.pyclass = Holder

    class IProgress_getTimeRemainingResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getTimeRemainingResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getTimeRemainingResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getTimeRemainingResponse")
            kw["aname"] = "_IProgress_getTimeRemainingResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getTimeRemainingResponse_Holder"
            self.pyclass = Holder

    class IProgress_getCompleted_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getCompleted"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getCompleted_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getCompleted")
            kw["aname"] = "_IProgress_getCompleted"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getCompleted_Holder"
            self.pyclass = Holder

    class IProgress_getCompletedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getCompletedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getCompletedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getCompletedResponse")
            kw["aname"] = "_IProgress_getCompletedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getCompletedResponse_Holder"
            self.pyclass = Holder

    class IProgress_getCanceled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getCanceled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getCanceled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getCanceled")
            kw["aname"] = "_IProgress_getCanceled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getCanceled_Holder"
            self.pyclass = Holder

    class IProgress_getCanceledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getCanceledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getCanceledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getCanceledResponse")
            kw["aname"] = "_IProgress_getCanceledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getCanceledResponse_Holder"
            self.pyclass = Holder

    class IProgress_getResultCode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getResultCode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getResultCode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getResultCode")
            kw["aname"] = "_IProgress_getResultCode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getResultCode_Holder"
            self.pyclass = Holder

    class IProgress_getResultCodeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getResultCodeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getResultCodeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getResultCodeResponse")
            kw["aname"] = "_IProgress_getResultCodeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getResultCodeResponse_Holder"
            self.pyclass = Holder

    class IProgress_getErrorInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getErrorInfo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getErrorInfo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getErrorInfo")
            kw["aname"] = "_IProgress_getErrorInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getErrorInfo_Holder"
            self.pyclass = Holder

    class IProgress_getErrorInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getErrorInfoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getErrorInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getErrorInfoResponse")
            kw["aname"] = "_IProgress_getErrorInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getErrorInfoResponse_Holder"
            self.pyclass = Holder

    class IProgress_getOperationCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationCount")
            kw["aname"] = "_IProgress_getOperationCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getOperationCount_Holder"
            self.pyclass = Holder

    class IProgress_getOperationCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationCountResponse")
            kw["aname"] = "_IProgress_getOperationCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getOperationCountResponse_Holder"
            self.pyclass = Holder

    class IProgress_getOperation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperation"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperation_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperation")
            kw["aname"] = "_IProgress_getOperation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getOperation_Holder"
            self.pyclass = Holder

    class IProgress_getOperationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationResponse")
            kw["aname"] = "_IProgress_getOperationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getOperationResponse_Holder"
            self.pyclass = Holder

    class IProgress_getOperationDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationDescription")
            kw["aname"] = "_IProgress_getOperationDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getOperationDescription_Holder"
            self.pyclass = Holder

    class IProgress_getOperationDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationDescriptionResponse")
            kw["aname"] = "_IProgress_getOperationDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getOperationDescriptionResponse_Holder"
            self.pyclass = Holder

    class IProgress_getOperationPercent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationPercent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationPercent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationPercent")
            kw["aname"] = "_IProgress_getOperationPercent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getOperationPercent_Holder"
            self.pyclass = Holder

    class IProgress_getOperationPercentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationPercentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationPercentResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationPercentResponse")
            kw["aname"] = "_IProgress_getOperationPercentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getOperationPercentResponse_Holder"
            self.pyclass = Holder

    class IProgress_getOperationWeight_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationWeight"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationWeight_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationWeight")
            kw["aname"] = "_IProgress_getOperationWeight"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getOperationWeight_Holder"
            self.pyclass = Holder

    class IProgress_getOperationWeightResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationWeightResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationWeightResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationWeightResponse")
            kw["aname"] = "_IProgress_getOperationWeightResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getOperationWeightResponse_Holder"
            self.pyclass = Holder

    class IProgress_getTimeout_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getTimeout"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getTimeout_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getTimeout")
            kw["aname"] = "_IProgress_getTimeout"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getTimeout_Holder"
            self.pyclass = Holder

    class IProgress_getTimeoutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getTimeoutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getTimeoutResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getTimeoutResponse")
            kw["aname"] = "_IProgress_getTimeoutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getTimeoutResponse_Holder"
            self.pyclass = Holder

    class IProgress_setTimeout_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_setTimeout"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_setTimeout_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_setTimeout")
            kw["aname"] = "_IProgress_setTimeout"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._timeout = None
                    return
            Holder.__name__ = "IProgress_setTimeout_Holder"
            self.pyclass = Holder

    class IProgress_setTimeoutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_setTimeoutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_setTimeoutResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_setTimeoutResponse")
            kw["aname"] = "_IProgress_setTimeoutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IProgress_setTimeoutResponse_Holder"
            self.pyclass = Holder

    class IProgress_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getEventSource")
            kw["aname"] = "_IProgress_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getEventSource_Holder"
            self.pyclass = Holder

    class IProgress_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getEventSourceResponse")
            kw["aname"] = "_IProgress_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class IProgress_waitForCompletion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_waitForCompletion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_waitForCompletion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="timeout", aname="_timeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_waitForCompletion")
            kw["aname"] = "_IProgress_waitForCompletion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._timeout = None
                    return
            Holder.__name__ = "IProgress_waitForCompletion_Holder"
            self.pyclass = Holder

    class IProgress_waitForCompletionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_waitForCompletionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_waitForCompletionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_waitForCompletionResponse")
            kw["aname"] = "_IProgress_waitForCompletionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IProgress_waitForCompletionResponse_Holder"
            self.pyclass = Holder

    class IProgress_waitForOperationCompletion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_waitForOperationCompletion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_waitForOperationCompletion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="operation", aname="_operation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="timeout", aname="_timeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_waitForOperationCompletion")
            kw["aname"] = "_IProgress_waitForOperationCompletion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._operation = None
                    self._timeout = None
                    return
            Holder.__name__ = "IProgress_waitForOperationCompletion_Holder"
            self.pyclass = Holder

    class IProgress_waitForOperationCompletionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_waitForOperationCompletionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_waitForOperationCompletionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_waitForOperationCompletionResponse")
            kw["aname"] = "_IProgress_waitForOperationCompletionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IProgress_waitForOperationCompletionResponse_Holder"
            self.pyclass = Holder

    class IProgress_cancel_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_cancel"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_cancel_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_cancel")
            kw["aname"] = "_IProgress_cancel"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_cancel_Holder"
            self.pyclass = Holder

    class IProgress_cancelResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_cancelResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_cancelResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_cancelResponse")
            kw["aname"] = "_IProgress_cancelResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IProgress_cancelResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getId")
            kw["aname"] = "_ISnapshot_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getId_Holder"
            self.pyclass = Holder

    class ISnapshot_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getIdResponse")
            kw["aname"] = "_ISnapshot_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getIdResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getName")
            kw["aname"] = "_ISnapshot_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getName_Holder"
            self.pyclass = Holder

    class ISnapshot_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getNameResponse")
            kw["aname"] = "_ISnapshot_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getNameResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_setName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_setName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_setName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_setName")
            kw["aname"] = "_ISnapshot_setName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "ISnapshot_setName_Holder"
            self.pyclass = Holder

    class ISnapshot_setNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_setNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_setNameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_setNameResponse")
            kw["aname"] = "_ISnapshot_setNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISnapshot_setNameResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getDescription")
            kw["aname"] = "_ISnapshot_getDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getDescription_Holder"
            self.pyclass = Holder

    class ISnapshot_getDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getDescriptionResponse")
            kw["aname"] = "_ISnapshot_getDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getDescriptionResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_setDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_setDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_setDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_setDescription")
            kw["aname"] = "_ISnapshot_setDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._description = None
                    return
            Holder.__name__ = "ISnapshot_setDescription_Holder"
            self.pyclass = Holder

    class ISnapshot_setDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_setDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_setDescriptionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_setDescriptionResponse")
            kw["aname"] = "_ISnapshot_setDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISnapshot_setDescriptionResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getTimeStamp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getTimeStamp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getTimeStamp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getTimeStamp")
            kw["aname"] = "_ISnapshot_getTimeStamp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getTimeStamp_Holder"
            self.pyclass = Holder

    class ISnapshot_getTimeStampResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getTimeStampResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getTimeStampResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getTimeStampResponse")
            kw["aname"] = "_ISnapshot_getTimeStampResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getTimeStampResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getOnline_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getOnline"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getOnline_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getOnline")
            kw["aname"] = "_ISnapshot_getOnline"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getOnline_Holder"
            self.pyclass = Holder

    class ISnapshot_getOnlineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getOnlineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getOnlineResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getOnlineResponse")
            kw["aname"] = "_ISnapshot_getOnlineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getOnlineResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getMachine")
            kw["aname"] = "_ISnapshot_getMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getMachine_Holder"
            self.pyclass = Holder

    class ISnapshot_getMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getMachineResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getMachineResponse")
            kw["aname"] = "_ISnapshot_getMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getMachineResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getParent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getParent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getParent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getParent")
            kw["aname"] = "_ISnapshot_getParent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getParent_Holder"
            self.pyclass = Holder

    class ISnapshot_getParentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getParentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getParentResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getParentResponse")
            kw["aname"] = "_ISnapshot_getParentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getParentResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getChildren_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getChildren"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getChildren_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getChildren")
            kw["aname"] = "_ISnapshot_getChildren"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getChildren_Holder"
            self.pyclass = Holder

    class ISnapshot_getChildrenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getChildrenResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getChildrenResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getChildrenResponse")
            kw["aname"] = "_ISnapshot_getChildrenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "ISnapshot_getChildrenResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getChildrenCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getChildrenCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getChildrenCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getChildrenCount")
            kw["aname"] = "_ISnapshot_getChildrenCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getChildrenCount_Holder"
            self.pyclass = Holder

    class ISnapshot_getChildrenCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getChildrenCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getChildrenCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getChildrenCountResponse")
            kw["aname"] = "_ISnapshot_getChildrenCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getChildrenCountResponse_Holder"
            self.pyclass = Holder

    class IMedium_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getId")
            kw["aname"] = "_IMedium_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getId_Holder"
            self.pyclass = Holder

    class IMedium_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getIdResponse")
            kw["aname"] = "_IMedium_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getIdResponse_Holder"
            self.pyclass = Holder

    class IMedium_getDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getDescription")
            kw["aname"] = "_IMedium_getDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getDescription_Holder"
            self.pyclass = Holder

    class IMedium_getDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getDescriptionResponse")
            kw["aname"] = "_IMedium_getDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getDescriptionResponse_Holder"
            self.pyclass = Holder

    class IMedium_setDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setDescription")
            kw["aname"] = "_IMedium_setDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._description = None
                    return
            Holder.__name__ = "IMedium_setDescription_Holder"
            self.pyclass = Holder

    class IMedium_setDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setDescriptionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setDescriptionResponse")
            kw["aname"] = "_IMedium_setDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_setDescriptionResponse_Holder"
            self.pyclass = Holder

    class IMedium_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getState")
            kw["aname"] = "_IMedium_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getState_Holder"
            self.pyclass = Holder

    class IMedium_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MediumState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getStateResponse")
            kw["aname"] = "_IMedium_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getStateResponse_Holder"
            self.pyclass = Holder

    class IMedium_getVariant_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getVariant"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getVariant_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getVariant")
            kw["aname"] = "_IMedium_getVariant"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getVariant_Holder"
            self.pyclass = Holder

    class IMedium_getVariantResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getVariantResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getVariantResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MediumVariant",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getVariantResponse")
            kw["aname"] = "_IMedium_getVariantResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMedium_getVariantResponse_Holder"
            self.pyclass = Holder

    class IMedium_getLocation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getLocation"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getLocation_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getLocation")
            kw["aname"] = "_IMedium_getLocation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getLocation_Holder"
            self.pyclass = Holder

    class IMedium_getLocationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getLocationResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getLocationResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getLocationResponse")
            kw["aname"] = "_IMedium_getLocationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getLocationResponse_Holder"
            self.pyclass = Holder

    class IMedium_setLocation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setLocation"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setLocation_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setLocation")
            kw["aname"] = "_IMedium_setLocation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._location = None
                    return
            Holder.__name__ = "IMedium_setLocation_Holder"
            self.pyclass = Holder

    class IMedium_setLocationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setLocationResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setLocationResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setLocationResponse")
            kw["aname"] = "_IMedium_setLocationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_setLocationResponse_Holder"
            self.pyclass = Holder

    class IMedium_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getName")
            kw["aname"] = "_IMedium_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getName_Holder"
            self.pyclass = Holder

    class IMedium_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getNameResponse")
            kw["aname"] = "_IMedium_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getNameResponse_Holder"
            self.pyclass = Holder

    class IMedium_getDeviceType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getDeviceType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getDeviceType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getDeviceType")
            kw["aname"] = "_IMedium_getDeviceType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getDeviceType_Holder"
            self.pyclass = Holder

    class IMedium_getDeviceTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getDeviceTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getDeviceTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getDeviceTypeResponse")
            kw["aname"] = "_IMedium_getDeviceTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getDeviceTypeResponse_Holder"
            self.pyclass = Holder

    class IMedium_getHostDrive_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getHostDrive"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getHostDrive_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getHostDrive")
            kw["aname"] = "_IMedium_getHostDrive"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getHostDrive_Holder"
            self.pyclass = Holder

    class IMedium_getHostDriveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getHostDriveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getHostDriveResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getHostDriveResponse")
            kw["aname"] = "_IMedium_getHostDriveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getHostDriveResponse_Holder"
            self.pyclass = Holder

    class IMedium_getSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getSize")
            kw["aname"] = "_IMedium_getSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getSize_Holder"
            self.pyclass = Holder

    class IMedium_getSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getSizeResponse")
            kw["aname"] = "_IMedium_getSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getSizeResponse_Holder"
            self.pyclass = Holder

    class IMedium_getFormat_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getFormat"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getFormat_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getFormat")
            kw["aname"] = "_IMedium_getFormat"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getFormat_Holder"
            self.pyclass = Holder

    class IMedium_getFormatResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getFormatResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getFormatResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getFormatResponse")
            kw["aname"] = "_IMedium_getFormatResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getFormatResponse_Holder"
            self.pyclass = Holder

    class IMedium_getMediumFormat_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getMediumFormat"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getMediumFormat_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getMediumFormat")
            kw["aname"] = "_IMedium_getMediumFormat"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getMediumFormat_Holder"
            self.pyclass = Holder

    class IMedium_getMediumFormatResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getMediumFormatResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getMediumFormatResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getMediumFormatResponse")
            kw["aname"] = "_IMedium_getMediumFormatResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getMediumFormatResponse_Holder"
            self.pyclass = Holder

    class IMedium_getType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getType")
            kw["aname"] = "_IMedium_getType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getType_Holder"
            self.pyclass = Holder

    class IMedium_getTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MediumType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getTypeResponse")
            kw["aname"] = "_IMedium_getTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getTypeResponse_Holder"
            self.pyclass = Holder

    class IMedium_setType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","MediumType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setType")
            kw["aname"] = "_IMedium_setType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._type = None
                    return
            Holder.__name__ = "IMedium_setType_Holder"
            self.pyclass = Holder

    class IMedium_setTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setTypeResponse")
            kw["aname"] = "_IMedium_setTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_setTypeResponse_Holder"
            self.pyclass = Holder

    class IMedium_getAllowedTypes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getAllowedTypes"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getAllowedTypes_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getAllowedTypes")
            kw["aname"] = "_IMedium_getAllowedTypes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getAllowedTypes_Holder"
            self.pyclass = Holder

    class IMedium_getAllowedTypesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getAllowedTypesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getAllowedTypesResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MediumType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getAllowedTypesResponse")
            kw["aname"] = "_IMedium_getAllowedTypesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMedium_getAllowedTypesResponse_Holder"
            self.pyclass = Holder

    class IMedium_getParent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getParent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getParent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getParent")
            kw["aname"] = "_IMedium_getParent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getParent_Holder"
            self.pyclass = Holder

    class IMedium_getParentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getParentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getParentResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getParentResponse")
            kw["aname"] = "_IMedium_getParentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getParentResponse_Holder"
            self.pyclass = Holder

    class IMedium_getChildren_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getChildren"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getChildren_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getChildren")
            kw["aname"] = "_IMedium_getChildren"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getChildren_Holder"
            self.pyclass = Holder

    class IMedium_getChildrenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getChildrenResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getChildrenResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getChildrenResponse")
            kw["aname"] = "_IMedium_getChildrenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMedium_getChildrenResponse_Holder"
            self.pyclass = Holder

    class IMedium_getBase_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getBase"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getBase_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getBase")
            kw["aname"] = "_IMedium_getBase"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getBase_Holder"
            self.pyclass = Holder

    class IMedium_getBaseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getBaseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getBaseResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getBaseResponse")
            kw["aname"] = "_IMedium_getBaseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getBaseResponse_Holder"
            self.pyclass = Holder

    class IMedium_getReadOnly_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getReadOnly"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getReadOnly_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getReadOnly")
            kw["aname"] = "_IMedium_getReadOnly"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getReadOnly_Holder"
            self.pyclass = Holder

    class IMedium_getReadOnlyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getReadOnlyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getReadOnlyResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getReadOnlyResponse")
            kw["aname"] = "_IMedium_getReadOnlyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getReadOnlyResponse_Holder"
            self.pyclass = Holder

    class IMedium_getLogicalSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getLogicalSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getLogicalSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getLogicalSize")
            kw["aname"] = "_IMedium_getLogicalSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getLogicalSize_Holder"
            self.pyclass = Holder

    class IMedium_getLogicalSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getLogicalSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getLogicalSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getLogicalSizeResponse")
            kw["aname"] = "_IMedium_getLogicalSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getLogicalSizeResponse_Holder"
            self.pyclass = Holder

    class IMedium_getAutoReset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getAutoReset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getAutoReset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getAutoReset")
            kw["aname"] = "_IMedium_getAutoReset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getAutoReset_Holder"
            self.pyclass = Holder

    class IMedium_getAutoResetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getAutoResetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getAutoResetResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getAutoResetResponse")
            kw["aname"] = "_IMedium_getAutoResetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getAutoResetResponse_Holder"
            self.pyclass = Holder

    class IMedium_setAutoReset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setAutoReset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setAutoReset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="autoReset", aname="_autoReset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setAutoReset")
            kw["aname"] = "_IMedium_setAutoReset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._autoReset = None
                    return
            Holder.__name__ = "IMedium_setAutoReset_Holder"
            self.pyclass = Holder

    class IMedium_setAutoResetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setAutoResetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setAutoResetResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setAutoResetResponse")
            kw["aname"] = "_IMedium_setAutoResetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_setAutoResetResponse_Holder"
            self.pyclass = Holder

    class IMedium_getLastAccessError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getLastAccessError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getLastAccessError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getLastAccessError")
            kw["aname"] = "_IMedium_getLastAccessError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getLastAccessError_Holder"
            self.pyclass = Holder

    class IMedium_getLastAccessErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getLastAccessErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getLastAccessErrorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getLastAccessErrorResponse")
            kw["aname"] = "_IMedium_getLastAccessErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getLastAccessErrorResponse_Holder"
            self.pyclass = Holder

    class IMedium_getMachineIds_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getMachineIds"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getMachineIds_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getMachineIds")
            kw["aname"] = "_IMedium_getMachineIds"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getMachineIds_Holder"
            self.pyclass = Holder

    class IMedium_getMachineIdsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getMachineIdsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getMachineIdsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getMachineIdsResponse")
            kw["aname"] = "_IMedium_getMachineIdsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMedium_getMachineIdsResponse_Holder"
            self.pyclass = Holder

    class IMedium_setIds_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setIds"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setIds_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="setImageId", aname="_setImageId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="imageId", aname="_imageId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="setParentId", aname="_setParentId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parentId", aname="_parentId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setIds")
            kw["aname"] = "_IMedium_setIds"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._setImageId = None
                    self._imageId = None
                    self._setParentId = None
                    self._parentId = None
                    return
            Holder.__name__ = "IMedium_setIds_Holder"
            self.pyclass = Holder

    class IMedium_setIdsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setIdsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setIdsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setIdsResponse")
            kw["aname"] = "_IMedium_setIdsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_setIdsResponse_Holder"
            self.pyclass = Holder

    class IMedium_refreshState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_refreshState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_refreshState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_refreshState")
            kw["aname"] = "_IMedium_refreshState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_refreshState_Holder"
            self.pyclass = Holder

    class IMedium_refreshStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_refreshStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_refreshStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MediumState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_refreshStateResponse")
            kw["aname"] = "_IMedium_refreshStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_refreshStateResponse_Holder"
            self.pyclass = Holder

    class IMedium_getSnapshotIds_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getSnapshotIds"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getSnapshotIds_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="machineId", aname="_machineId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getSnapshotIds")
            kw["aname"] = "_IMedium_getSnapshotIds"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._machineId = None
                    return
            Holder.__name__ = "IMedium_getSnapshotIds_Holder"
            self.pyclass = Holder

    class IMedium_getSnapshotIdsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getSnapshotIdsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getSnapshotIdsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getSnapshotIdsResponse")
            kw["aname"] = "_IMedium_getSnapshotIdsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMedium_getSnapshotIdsResponse_Holder"
            self.pyclass = Holder

    class IMedium_lockRead_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_lockRead"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_lockRead_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_lockRead")
            kw["aname"] = "_IMedium_lockRead"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_lockRead_Holder"
            self.pyclass = Holder

    class IMedium_lockReadResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_lockReadResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_lockReadResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_lockReadResponse")
            kw["aname"] = "_IMedium_lockReadResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_lockReadResponse_Holder"
            self.pyclass = Holder

    class IMedium_lockWrite_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_lockWrite"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_lockWrite_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_lockWrite")
            kw["aname"] = "_IMedium_lockWrite"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_lockWrite_Holder"
            self.pyclass = Holder

    class IMedium_lockWriteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_lockWriteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_lockWriteResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_lockWriteResponse")
            kw["aname"] = "_IMedium_lockWriteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_lockWriteResponse_Holder"
            self.pyclass = Holder

    class IMedium_close_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_close"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_close_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_close")
            kw["aname"] = "_IMedium_close"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_close_Holder"
            self.pyclass = Holder

    class IMedium_closeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_closeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_closeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_closeResponse")
            kw["aname"] = "_IMedium_closeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_closeResponse_Holder"
            self.pyclass = Holder

    class IMedium_getProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getProperty")
            kw["aname"] = "_IMedium_getProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMedium_getProperty_Holder"
            self.pyclass = Holder

    class IMedium_getPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getPropertyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getPropertyResponse")
            kw["aname"] = "_IMedium_getPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getPropertyResponse_Holder"
            self.pyclass = Holder

    class IMedium_setProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setProperty")
            kw["aname"] = "_IMedium_setProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "IMedium_setProperty_Holder"
            self.pyclass = Holder

    class IMedium_setPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setPropertyResponse")
            kw["aname"] = "_IMedium_setPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_setPropertyResponse_Holder"
            self.pyclass = Holder

    class IMedium_getProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="names", aname="_names", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getProperties")
            kw["aname"] = "_IMedium_getProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._names = None
                    return
            Holder.__name__ = "IMedium_getProperties_Holder"
            self.pyclass = Holder

    class IMedium_getPropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getPropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getPropertiesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnNames", aname="_returnNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getPropertiesResponse")
            kw["aname"] = "_IMedium_getPropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnNames = []
                    self._returnval = []
                    return
            Holder.__name__ = "IMedium_getPropertiesResponse_Holder"
            self.pyclass = Holder

    class IMedium_setProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="names", aname="_names", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="values", aname="_values", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setProperties")
            kw["aname"] = "_IMedium_setProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._names = []
                    self._values = []
                    return
            Holder.__name__ = "IMedium_setProperties_Holder"
            self.pyclass = Holder

    class IMedium_setPropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setPropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setPropertiesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setPropertiesResponse")
            kw["aname"] = "_IMedium_setPropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_setPropertiesResponse_Holder"
            self.pyclass = Holder

    class IMedium_createBaseStorage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_createBaseStorage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_createBaseStorage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="logicalSize", aname="_logicalSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","MediumVariant",lazy=False)(pname="variant", aname="_variant", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_createBaseStorage")
            kw["aname"] = "_IMedium_createBaseStorage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logicalSize = None
                    self._variant = []
                    return
            Holder.__name__ = "IMedium_createBaseStorage_Holder"
            self.pyclass = Holder

    class IMedium_createBaseStorageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_createBaseStorageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_createBaseStorageResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_createBaseStorageResponse")
            kw["aname"] = "_IMedium_createBaseStorageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_createBaseStorageResponse_Holder"
            self.pyclass = Holder

    class IMedium_deleteStorage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_deleteStorage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_deleteStorage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_deleteStorage")
            kw["aname"] = "_IMedium_deleteStorage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_deleteStorage_Holder"
            self.pyclass = Holder

    class IMedium_deleteStorageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_deleteStorageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_deleteStorageResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_deleteStorageResponse")
            kw["aname"] = "_IMedium_deleteStorageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_deleteStorageResponse_Holder"
            self.pyclass = Holder

    class IMedium_createDiffStorage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_createDiffStorage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_createDiffStorage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="target", aname="_target", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","MediumVariant",lazy=False)(pname="variant", aname="_variant", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_createDiffStorage")
            kw["aname"] = "_IMedium_createDiffStorage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._target = None
                    self._variant = []
                    return
            Holder.__name__ = "IMedium_createDiffStorage_Holder"
            self.pyclass = Holder

    class IMedium_createDiffStorageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_createDiffStorageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_createDiffStorageResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_createDiffStorageResponse")
            kw["aname"] = "_IMedium_createDiffStorageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_createDiffStorageResponse_Holder"
            self.pyclass = Holder

    class IMedium_mergeTo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_mergeTo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_mergeTo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="target", aname="_target", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_mergeTo")
            kw["aname"] = "_IMedium_mergeTo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._target = None
                    return
            Holder.__name__ = "IMedium_mergeTo_Holder"
            self.pyclass = Holder

    class IMedium_mergeToResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_mergeToResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_mergeToResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_mergeToResponse")
            kw["aname"] = "_IMedium_mergeToResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_mergeToResponse_Holder"
            self.pyclass = Holder

    class IMedium_cloneTo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_cloneTo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_cloneTo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="target", aname="_target", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","MediumVariant",lazy=False)(pname="variant", aname="_variant", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent", aname="_parent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_cloneTo")
            kw["aname"] = "_IMedium_cloneTo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._target = None
                    self._variant = []
                    self._parent = None
                    return
            Holder.__name__ = "IMedium_cloneTo_Holder"
            self.pyclass = Holder

    class IMedium_cloneToResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_cloneToResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_cloneToResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_cloneToResponse")
            kw["aname"] = "_IMedium_cloneToResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_cloneToResponse_Holder"
            self.pyclass = Holder

    class IMedium_cloneToBase_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_cloneToBase"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_cloneToBase_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="target", aname="_target", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","MediumVariant",lazy=False)(pname="variant", aname="_variant", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_cloneToBase")
            kw["aname"] = "_IMedium_cloneToBase"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._target = None
                    self._variant = []
                    return
            Holder.__name__ = "IMedium_cloneToBase_Holder"
            self.pyclass = Holder

    class IMedium_cloneToBaseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_cloneToBaseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_cloneToBaseResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_cloneToBaseResponse")
            kw["aname"] = "_IMedium_cloneToBaseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_cloneToBaseResponse_Holder"
            self.pyclass = Holder

    class IMedium_moveTo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_moveTo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_moveTo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_moveTo")
            kw["aname"] = "_IMedium_moveTo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._location = None
                    return
            Holder.__name__ = "IMedium_moveTo_Holder"
            self.pyclass = Holder

    class IMedium_moveToResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_moveToResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_moveToResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_moveToResponse")
            kw["aname"] = "_IMedium_moveToResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_moveToResponse_Holder"
            self.pyclass = Holder

    class IMedium_compact_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_compact"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_compact_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_compact")
            kw["aname"] = "_IMedium_compact"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_compact_Holder"
            self.pyclass = Holder

    class IMedium_compactResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_compactResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_compactResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_compactResponse")
            kw["aname"] = "_IMedium_compactResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_compactResponse_Holder"
            self.pyclass = Holder

    class IMedium_resize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_resize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_resize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="logicalSize", aname="_logicalSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_resize")
            kw["aname"] = "_IMedium_resize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logicalSize = None
                    return
            Holder.__name__ = "IMedium_resize_Holder"
            self.pyclass = Holder

    class IMedium_resizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_resizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_resizeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_resizeResponse")
            kw["aname"] = "_IMedium_resizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_resizeResponse_Holder"
            self.pyclass = Holder

    class IMedium_reset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_reset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_reset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_reset")
            kw["aname"] = "_IMedium_reset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_reset_Holder"
            self.pyclass = Holder

    class IMedium_resetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_resetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_resetResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_resetResponse")
            kw["aname"] = "_IMedium_resetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_resetResponse_Holder"
            self.pyclass = Holder

    class IMedium_changeEncryption_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_changeEncryption"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_changeEncryption_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="currentPassword", aname="_currentPassword", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cipher", aname="_cipher", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newPassword", aname="_newPassword", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="newPasswordId", aname="_newPasswordId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_changeEncryption")
            kw["aname"] = "_IMedium_changeEncryption"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._currentPassword = None
                    self._cipher = None
                    self._newPassword = None
                    self._newPasswordId = None
                    return
            Holder.__name__ = "IMedium_changeEncryption_Holder"
            self.pyclass = Holder

    class IMedium_changeEncryptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_changeEncryptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_changeEncryptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_changeEncryptionResponse")
            kw["aname"] = "_IMedium_changeEncryptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_changeEncryptionResponse_Holder"
            self.pyclass = Holder

    class IMedium_getEncryptionSettings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getEncryptionSettings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getEncryptionSettings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getEncryptionSettings")
            kw["aname"] = "_IMedium_getEncryptionSettings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getEncryptionSettings_Holder"
            self.pyclass = Holder

    class IMedium_getEncryptionSettingsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getEncryptionSettingsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getEncryptionSettingsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="cipher", aname="_cipher", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getEncryptionSettingsResponse")
            kw["aname"] = "_IMedium_getEncryptionSettingsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cipher = None
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getEncryptionSettingsResponse_Holder"
            self.pyclass = Holder

    class IMedium_checkEncryptionPassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_checkEncryptionPassword"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_checkEncryptionPassword_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_checkEncryptionPassword")
            kw["aname"] = "_IMedium_checkEncryptionPassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._password = None
                    return
            Holder.__name__ = "IMedium_checkEncryptionPassword_Holder"
            self.pyclass = Holder

    class IMedium_checkEncryptionPasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_checkEncryptionPasswordResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_checkEncryptionPasswordResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_checkEncryptionPasswordResponse")
            kw["aname"] = "_IMedium_checkEncryptionPasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_checkEncryptionPasswordResponse_Holder"
            self.pyclass = Holder

    class IMedium_openForIO_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_openForIO"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_openForIO_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="writable", aname="_writable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_openForIO")
            kw["aname"] = "_IMedium_openForIO"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._writable = None
                    self._password = None
                    return
            Holder.__name__ = "IMedium_openForIO_Holder"
            self.pyclass = Holder

    class IMedium_openForIOResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_openForIOResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_openForIOResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_openForIOResponse")
            kw["aname"] = "_IMedium_openForIOResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_openForIOResponse_Holder"
            self.pyclass = Holder

    class IMediumFormat_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_getId")
            kw["aname"] = "_IMediumFormat_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumFormat_getId_Holder"
            self.pyclass = Holder

    class IMediumFormat_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_getIdResponse")
            kw["aname"] = "_IMediumFormat_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumFormat_getIdResponse_Holder"
            self.pyclass = Holder

    class IMediumFormat_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_getName")
            kw["aname"] = "_IMediumFormat_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumFormat_getName_Holder"
            self.pyclass = Holder

    class IMediumFormat_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_getNameResponse")
            kw["aname"] = "_IMediumFormat_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumFormat_getNameResponse_Holder"
            self.pyclass = Holder

    class IMediumFormat_getCapabilities_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_getCapabilities"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_getCapabilities_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_getCapabilities")
            kw["aname"] = "_IMediumFormat_getCapabilities"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumFormat_getCapabilities_Holder"
            self.pyclass = Holder

    class IMediumFormat_getCapabilitiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_getCapabilitiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_getCapabilitiesResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MediumFormatCapabilities",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_getCapabilitiesResponse")
            kw["aname"] = "_IMediumFormat_getCapabilitiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMediumFormat_getCapabilitiesResponse_Holder"
            self.pyclass = Holder

    class IMediumFormat_describeFileExtensions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_describeFileExtensions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_describeFileExtensions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_describeFileExtensions")
            kw["aname"] = "_IMediumFormat_describeFileExtensions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumFormat_describeFileExtensions_Holder"
            self.pyclass = Holder

    class IMediumFormat_describeFileExtensionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_describeFileExtensionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_describeFileExtensionsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="extensions", aname="_extensions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="types", aname="_types", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_describeFileExtensionsResponse")
            kw["aname"] = "_IMediumFormat_describeFileExtensionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._extensions = []
                    self._types = []
                    return
            Holder.__name__ = "IMediumFormat_describeFileExtensionsResponse_Holder"
            self.pyclass = Holder

    class IMediumFormat_describeProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_describeProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_describeProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_describeProperties")
            kw["aname"] = "_IMediumFormat_describeProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumFormat_describeProperties_Holder"
            self.pyclass = Holder

    class IMediumFormat_describePropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_describePropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_describePropertiesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="names", aname="_names", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="descriptions", aname="_descriptions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DataType",lazy=False)(pname="types", aname="_types", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaults", aname="_defaults", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_describePropertiesResponse")
            kw["aname"] = "_IMediumFormat_describePropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._names = []
                    self._descriptions = []
                    self._types = []
                    self._flags = []
                    self._defaults = []
                    return
            Holder.__name__ = "IMediumFormat_describePropertiesResponse_Holder"
            self.pyclass = Holder

    class IDataStream_getReadSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDataStream_getReadSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDataStream_getReadSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDataStream_getReadSize")
            kw["aname"] = "_IDataStream_getReadSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDataStream_getReadSize_Holder"
            self.pyclass = Holder

    class IDataStream_getReadSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDataStream_getReadSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDataStream_getReadSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDataStream_getReadSizeResponse")
            kw["aname"] = "_IDataStream_getReadSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDataStream_getReadSizeResponse_Holder"
            self.pyclass = Holder

    class IDataStream_read_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDataStream_read"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDataStream_read_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDataStream_read")
            kw["aname"] = "_IDataStream_read"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._size = None
                    self._timeoutMS = None
                    return
            Holder.__name__ = "IDataStream_read_Holder"
            self.pyclass = Holder

    class IDataStream_readResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDataStream_readResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDataStream_readResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDataStream_readResponse")
            kw["aname"] = "_IDataStream_readResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDataStream_readResponse_Holder"
            self.pyclass = Holder

    class IMediumIO_getMedium_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_getMedium"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_getMedium_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_getMedium")
            kw["aname"] = "_IMediumIO_getMedium"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumIO_getMedium_Holder"
            self.pyclass = Holder

    class IMediumIO_getMediumResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_getMediumResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_getMediumResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_getMediumResponse")
            kw["aname"] = "_IMediumIO_getMediumResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumIO_getMediumResponse_Holder"
            self.pyclass = Holder

    class IMediumIO_getWritable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_getWritable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_getWritable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_getWritable")
            kw["aname"] = "_IMediumIO_getWritable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumIO_getWritable_Holder"
            self.pyclass = Holder

    class IMediumIO_getWritableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_getWritableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_getWritableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_getWritableResponse")
            kw["aname"] = "_IMediumIO_getWritableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumIO_getWritableResponse_Holder"
            self.pyclass = Holder

    class IMediumIO_getExplorer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_getExplorer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_getExplorer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_getExplorer")
            kw["aname"] = "_IMediumIO_getExplorer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumIO_getExplorer_Holder"
            self.pyclass = Holder

    class IMediumIO_getExplorerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_getExplorerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_getExplorerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_getExplorerResponse")
            kw["aname"] = "_IMediumIO_getExplorerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumIO_getExplorerResponse_Holder"
            self.pyclass = Holder

    class IMediumIO_read_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_read"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_read_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="offset", aname="_offset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_read")
            kw["aname"] = "_IMediumIO_read"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._offset = None
                    self._size = None
                    return
            Holder.__name__ = "IMediumIO_read_Holder"
            self.pyclass = Holder

    class IMediumIO_readResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_readResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_readResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_readResponse")
            kw["aname"] = "_IMediumIO_readResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumIO_readResponse_Holder"
            self.pyclass = Holder

    class IMediumIO_write_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_write"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_write_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="offset", aname="_offset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="data", aname="_data", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_write")
            kw["aname"] = "_IMediumIO_write"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._offset = None
                    self._data = None
                    return
            Holder.__name__ = "IMediumIO_write_Holder"
            self.pyclass = Holder

    class IMediumIO_writeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_writeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_writeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_writeResponse")
            kw["aname"] = "_IMediumIO_writeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumIO_writeResponse_Holder"
            self.pyclass = Holder

    class IMediumIO_formatFAT_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_formatFAT"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_formatFAT_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="quick", aname="_quick", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_formatFAT")
            kw["aname"] = "_IMediumIO_formatFAT"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._quick = None
                    return
            Holder.__name__ = "IMediumIO_formatFAT_Holder"
            self.pyclass = Holder

    class IMediumIO_formatFATResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_formatFATResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_formatFATResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_formatFATResponse")
            kw["aname"] = "_IMediumIO_formatFATResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMediumIO_formatFATResponse_Holder"
            self.pyclass = Holder

    class IMediumIO_initializePartitionTable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_initializePartitionTable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_initializePartitionTable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","PartitionTableType",lazy=False)(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="wholeDiskInOneEntry", aname="_wholeDiskInOneEntry", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_initializePartitionTable")
            kw["aname"] = "_IMediumIO_initializePartitionTable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._format = None
                    self._wholeDiskInOneEntry = None
                    return
            Holder.__name__ = "IMediumIO_initializePartitionTable_Holder"
            self.pyclass = Holder

    class IMediumIO_initializePartitionTableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_initializePartitionTableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_initializePartitionTableResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_initializePartitionTableResponse")
            kw["aname"] = "_IMediumIO_initializePartitionTableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMediumIO_initializePartitionTableResponse_Holder"
            self.pyclass = Holder

    class IMediumIO_convertToStream_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_convertToStream"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_convertToStream_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","MediumVariant",lazy=False)(pname="variant", aname="_variant", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bufferSize", aname="_bufferSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_convertToStream")
            kw["aname"] = "_IMediumIO_convertToStream"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._format = None
                    self._variant = []
                    self._bufferSize = None
                    return
            Holder.__name__ = "IMediumIO_convertToStream_Holder"
            self.pyclass = Holder

    class IMediumIO_convertToStreamResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_convertToStreamResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_convertToStreamResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="stream", aname="_stream", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_convertToStreamResponse")
            kw["aname"] = "_IMediumIO_convertToStreamResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._stream = None
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumIO_convertToStreamResponse_Holder"
            self.pyclass = Holder

    class IMediumIO_close_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_close"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_close_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_close")
            kw["aname"] = "_IMediumIO_close"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumIO_close_Holder"
            self.pyclass = Holder

    class IMediumIO_closeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumIO_closeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumIO_closeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMediumIO_closeResponse")
            kw["aname"] = "_IMediumIO_closeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMediumIO_closeResponse_Holder"
            self.pyclass = Holder

    class IToken_abandon_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IToken_abandon"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IToken_abandon_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IToken_abandon")
            kw["aname"] = "_IToken_abandon"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IToken_abandon_Holder"
            self.pyclass = Holder

    class IToken_abandonResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IToken_abandonResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IToken_abandonResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IToken_abandonResponse")
            kw["aname"] = "_IToken_abandonResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IToken_abandonResponse_Holder"
            self.pyclass = Holder

    class IToken_dummy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IToken_dummy"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IToken_dummy_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IToken_dummy")
            kw["aname"] = "_IToken_dummy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IToken_dummy_Holder"
            self.pyclass = Holder

    class IToken_dummyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IToken_dummyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IToken_dummyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IToken_dummyResponse")
            kw["aname"] = "_IToken_dummyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IToken_dummyResponse_Holder"
            self.pyclass = Holder

    class IKeyboard_getKeyboardLEDs_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_getKeyboardLEDs"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_getKeyboardLEDs_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_getKeyboardLEDs")
            kw["aname"] = "_IKeyboard_getKeyboardLEDs"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IKeyboard_getKeyboardLEDs_Holder"
            self.pyclass = Holder

    class IKeyboard_getKeyboardLEDsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_getKeyboardLEDsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_getKeyboardLEDsResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","KeyboardLED",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_getKeyboardLEDsResponse")
            kw["aname"] = "_IKeyboard_getKeyboardLEDsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IKeyboard_getKeyboardLEDsResponse_Holder"
            self.pyclass = Holder

    class IKeyboard_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_getEventSource")
            kw["aname"] = "_IKeyboard_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IKeyboard_getEventSource_Holder"
            self.pyclass = Holder

    class IKeyboard_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_getEventSourceResponse")
            kw["aname"] = "_IKeyboard_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IKeyboard_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class IKeyboard_putScancode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_putScancode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_putScancode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="scancode", aname="_scancode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_putScancode")
            kw["aname"] = "_IKeyboard_putScancode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._scancode = None
                    return
            Holder.__name__ = "IKeyboard_putScancode_Holder"
            self.pyclass = Holder

    class IKeyboard_putScancodeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_putScancodeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_putScancodeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_putScancodeResponse")
            kw["aname"] = "_IKeyboard_putScancodeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IKeyboard_putScancodeResponse_Holder"
            self.pyclass = Holder

    class IKeyboard_putScancodes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_putScancodes"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_putScancodes_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="scancodes", aname="_scancodes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_putScancodes")
            kw["aname"] = "_IKeyboard_putScancodes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._scancodes = []
                    return
            Holder.__name__ = "IKeyboard_putScancodes_Holder"
            self.pyclass = Holder

    class IKeyboard_putScancodesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_putScancodesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_putScancodesResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_putScancodesResponse")
            kw["aname"] = "_IKeyboard_putScancodesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IKeyboard_putScancodesResponse_Holder"
            self.pyclass = Holder

    class IKeyboard_putCAD_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_putCAD"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_putCAD_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_putCAD")
            kw["aname"] = "_IKeyboard_putCAD"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IKeyboard_putCAD_Holder"
            self.pyclass = Holder

    class IKeyboard_putCADResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_putCADResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_putCADResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_putCADResponse")
            kw["aname"] = "_IKeyboard_putCADResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IKeyboard_putCADResponse_Holder"
            self.pyclass = Holder

    class IKeyboard_releaseKeys_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_releaseKeys"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_releaseKeys_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_releaseKeys")
            kw["aname"] = "_IKeyboard_releaseKeys"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IKeyboard_releaseKeys_Holder"
            self.pyclass = Holder

    class IKeyboard_releaseKeysResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_releaseKeysResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_releaseKeysResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_releaseKeysResponse")
            kw["aname"] = "_IKeyboard_releaseKeysResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IKeyboard_releaseKeysResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShape_getVisible_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShape_getVisible"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShape_getVisible_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShape_getVisible")
            kw["aname"] = "_IMousePointerShape_getVisible"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShape_getVisible_Holder"
            self.pyclass = Holder

    class IMousePointerShape_getVisibleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShape_getVisibleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShape_getVisibleResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShape_getVisibleResponse")
            kw["aname"] = "_IMousePointerShape_getVisibleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShape_getVisibleResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShape_getAlpha_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShape_getAlpha"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShape_getAlpha_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShape_getAlpha")
            kw["aname"] = "_IMousePointerShape_getAlpha"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShape_getAlpha_Holder"
            self.pyclass = Holder

    class IMousePointerShape_getAlphaResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShape_getAlphaResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShape_getAlphaResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShape_getAlphaResponse")
            kw["aname"] = "_IMousePointerShape_getAlphaResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShape_getAlphaResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShape_getHotX_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShape_getHotX"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShape_getHotX_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShape_getHotX")
            kw["aname"] = "_IMousePointerShape_getHotX"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShape_getHotX_Holder"
            self.pyclass = Holder

    class IMousePointerShape_getHotXResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShape_getHotXResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShape_getHotXResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShape_getHotXResponse")
            kw["aname"] = "_IMousePointerShape_getHotXResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShape_getHotXResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShape_getHotY_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShape_getHotY"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShape_getHotY_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShape_getHotY")
            kw["aname"] = "_IMousePointerShape_getHotY"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShape_getHotY_Holder"
            self.pyclass = Holder

    class IMousePointerShape_getHotYResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShape_getHotYResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShape_getHotYResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShape_getHotYResponse")
            kw["aname"] = "_IMousePointerShape_getHotYResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShape_getHotYResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShape_getWidth_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShape_getWidth"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShape_getWidth_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShape_getWidth")
            kw["aname"] = "_IMousePointerShape_getWidth"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShape_getWidth_Holder"
            self.pyclass = Holder

    class IMousePointerShape_getWidthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShape_getWidthResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShape_getWidthResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShape_getWidthResponse")
            kw["aname"] = "_IMousePointerShape_getWidthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShape_getWidthResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShape_getHeight_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShape_getHeight"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShape_getHeight_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShape_getHeight")
            kw["aname"] = "_IMousePointerShape_getHeight"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShape_getHeight_Holder"
            self.pyclass = Holder

    class IMousePointerShape_getHeightResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShape_getHeightResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShape_getHeightResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShape_getHeightResponse")
            kw["aname"] = "_IMousePointerShape_getHeightResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShape_getHeightResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShape_getShape_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShape_getShape"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShape_getShape_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShape_getShape")
            kw["aname"] = "_IMousePointerShape_getShape"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShape_getShape_Holder"
            self.pyclass = Holder

    class IMousePointerShape_getShapeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShape_getShapeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShape_getShapeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShape_getShapeResponse")
            kw["aname"] = "_IMousePointerShape_getShapeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShape_getShapeResponse_Holder"
            self.pyclass = Holder

    class IMouse_getAbsoluteSupported_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getAbsoluteSupported"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getAbsoluteSupported_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getAbsoluteSupported")
            kw["aname"] = "_IMouse_getAbsoluteSupported"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouse_getAbsoluteSupported_Holder"
            self.pyclass = Holder

    class IMouse_getAbsoluteSupportedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getAbsoluteSupportedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getAbsoluteSupportedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getAbsoluteSupportedResponse")
            kw["aname"] = "_IMouse_getAbsoluteSupportedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouse_getAbsoluteSupportedResponse_Holder"
            self.pyclass = Holder

    class IMouse_getRelativeSupported_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getRelativeSupported"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getRelativeSupported_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getRelativeSupported")
            kw["aname"] = "_IMouse_getRelativeSupported"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouse_getRelativeSupported_Holder"
            self.pyclass = Holder

    class IMouse_getRelativeSupportedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getRelativeSupportedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getRelativeSupportedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getRelativeSupportedResponse")
            kw["aname"] = "_IMouse_getRelativeSupportedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouse_getRelativeSupportedResponse_Holder"
            self.pyclass = Holder

    class IMouse_getMultiTouchSupported_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getMultiTouchSupported"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getMultiTouchSupported_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getMultiTouchSupported")
            kw["aname"] = "_IMouse_getMultiTouchSupported"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouse_getMultiTouchSupported_Holder"
            self.pyclass = Holder

    class IMouse_getMultiTouchSupportedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getMultiTouchSupportedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getMultiTouchSupportedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getMultiTouchSupportedResponse")
            kw["aname"] = "_IMouse_getMultiTouchSupportedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouse_getMultiTouchSupportedResponse_Holder"
            self.pyclass = Holder

    class IMouse_getNeedsHostCursor_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getNeedsHostCursor"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getNeedsHostCursor_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getNeedsHostCursor")
            kw["aname"] = "_IMouse_getNeedsHostCursor"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouse_getNeedsHostCursor_Holder"
            self.pyclass = Holder

    class IMouse_getNeedsHostCursorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getNeedsHostCursorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getNeedsHostCursorResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getNeedsHostCursorResponse")
            kw["aname"] = "_IMouse_getNeedsHostCursorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouse_getNeedsHostCursorResponse_Holder"
            self.pyclass = Holder

    class IMouse_getPointerShape_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getPointerShape"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getPointerShape_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getPointerShape")
            kw["aname"] = "_IMouse_getPointerShape"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouse_getPointerShape_Holder"
            self.pyclass = Holder

    class IMouse_getPointerShapeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getPointerShapeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getPointerShapeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getPointerShapeResponse")
            kw["aname"] = "_IMouse_getPointerShapeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouse_getPointerShapeResponse_Holder"
            self.pyclass = Holder

    class IMouse_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getEventSource")
            kw["aname"] = "_IMouse_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouse_getEventSource_Holder"
            self.pyclass = Holder

    class IMouse_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getEventSourceResponse")
            kw["aname"] = "_IMouse_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouse_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class IMouse_putMouseEvent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_putMouseEvent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_putMouseEvent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dx", aname="_dx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dy", aname="_dy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dz", aname="_dz", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dw", aname="_dw", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="buttonState", aname="_buttonState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_putMouseEvent")
            kw["aname"] = "_IMouse_putMouseEvent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._dx = None
                    self._dy = None
                    self._dz = None
                    self._dw = None
                    self._buttonState = None
                    return
            Holder.__name__ = "IMouse_putMouseEvent_Holder"
            self.pyclass = Holder

    class IMouse_putMouseEventResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_putMouseEventResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_putMouseEventResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_putMouseEventResponse")
            kw["aname"] = "_IMouse_putMouseEventResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMouse_putMouseEventResponse_Holder"
            self.pyclass = Holder

    class IMouse_putMouseEventAbsolute_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_putMouseEventAbsolute"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_putMouseEventAbsolute_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="x", aname="_x", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="y", aname="_y", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dz", aname="_dz", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dw", aname="_dw", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="buttonState", aname="_buttonState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_putMouseEventAbsolute")
            kw["aname"] = "_IMouse_putMouseEventAbsolute"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._x = None
                    self._y = None
                    self._dz = None
                    self._dw = None
                    self._buttonState = None
                    return
            Holder.__name__ = "IMouse_putMouseEventAbsolute_Holder"
            self.pyclass = Holder

    class IMouse_putMouseEventAbsoluteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_putMouseEventAbsoluteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_putMouseEventAbsoluteResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_putMouseEventAbsoluteResponse")
            kw["aname"] = "_IMouse_putMouseEventAbsoluteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMouse_putMouseEventAbsoluteResponse_Holder"
            self.pyclass = Holder

    class IMouse_putEventMultiTouch_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_putEventMultiTouch"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_putEventMultiTouch_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="count", aname="_count", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="contacts", aname="_contacts", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="scanTime", aname="_scanTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_putEventMultiTouch")
            kw["aname"] = "_IMouse_putEventMultiTouch"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._count = None
                    self._contacts = []
                    self._scanTime = None
                    return
            Holder.__name__ = "IMouse_putEventMultiTouch_Holder"
            self.pyclass = Holder

    class IMouse_putEventMultiTouchResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_putEventMultiTouchResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_putEventMultiTouchResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_putEventMultiTouchResponse")
            kw["aname"] = "_IMouse_putEventMultiTouchResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMouse_putEventMultiTouchResponse_Holder"
            self.pyclass = Holder

    class IMouse_putEventMultiTouchString_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_putEventMultiTouchString"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_putEventMultiTouchString_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="count", aname="_count", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="contacts", aname="_contacts", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="scanTime", aname="_scanTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_putEventMultiTouchString")
            kw["aname"] = "_IMouse_putEventMultiTouchString"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._count = None
                    self._contacts = None
                    self._scanTime = None
                    return
            Holder.__name__ = "IMouse_putEventMultiTouchString_Holder"
            self.pyclass = Holder

    class IMouse_putEventMultiTouchStringResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_putEventMultiTouchStringResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_putEventMultiTouchStringResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_putEventMultiTouchStringResponse")
            kw["aname"] = "_IMouse_putEventMultiTouchStringResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMouse_putEventMultiTouchStringResponse_Holder"
            self.pyclass = Holder

    class IFramebuffer_getWidth_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getWidth"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getWidth_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getWidth")
            kw["aname"] = "_IFramebuffer_getWidth"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFramebuffer_getWidth_Holder"
            self.pyclass = Holder

    class IFramebuffer_getWidthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getWidthResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getWidthResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getWidthResponse")
            kw["aname"] = "_IFramebuffer_getWidthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFramebuffer_getWidthResponse_Holder"
            self.pyclass = Holder

    class IFramebuffer_getHeight_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getHeight"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getHeight_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getHeight")
            kw["aname"] = "_IFramebuffer_getHeight"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFramebuffer_getHeight_Holder"
            self.pyclass = Holder

    class IFramebuffer_getHeightResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getHeightResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getHeightResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getHeightResponse")
            kw["aname"] = "_IFramebuffer_getHeightResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFramebuffer_getHeightResponse_Holder"
            self.pyclass = Holder

    class IFramebuffer_getBitsPerPixel_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getBitsPerPixel"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getBitsPerPixel_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getBitsPerPixel")
            kw["aname"] = "_IFramebuffer_getBitsPerPixel"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFramebuffer_getBitsPerPixel_Holder"
            self.pyclass = Holder

    class IFramebuffer_getBitsPerPixelResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getBitsPerPixelResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getBitsPerPixelResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getBitsPerPixelResponse")
            kw["aname"] = "_IFramebuffer_getBitsPerPixelResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFramebuffer_getBitsPerPixelResponse_Holder"
            self.pyclass = Holder

    class IFramebuffer_getBytesPerLine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getBytesPerLine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getBytesPerLine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getBytesPerLine")
            kw["aname"] = "_IFramebuffer_getBytesPerLine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFramebuffer_getBytesPerLine_Holder"
            self.pyclass = Holder

    class IFramebuffer_getBytesPerLineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getBytesPerLineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getBytesPerLineResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getBytesPerLineResponse")
            kw["aname"] = "_IFramebuffer_getBytesPerLineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFramebuffer_getBytesPerLineResponse_Holder"
            self.pyclass = Holder

    class IFramebuffer_getPixelFormat_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getPixelFormat"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getPixelFormat_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getPixelFormat")
            kw["aname"] = "_IFramebuffer_getPixelFormat"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFramebuffer_getPixelFormat_Holder"
            self.pyclass = Holder

    class IFramebuffer_getPixelFormatResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getPixelFormatResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getPixelFormatResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","BitmapFormat",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getPixelFormatResponse")
            kw["aname"] = "_IFramebuffer_getPixelFormatResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFramebuffer_getPixelFormatResponse_Holder"
            self.pyclass = Holder

    class IFramebuffer_getHeightReduction_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getHeightReduction"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getHeightReduction_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getHeightReduction")
            kw["aname"] = "_IFramebuffer_getHeightReduction"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFramebuffer_getHeightReduction_Holder"
            self.pyclass = Holder

    class IFramebuffer_getHeightReductionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getHeightReductionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getHeightReductionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getHeightReductionResponse")
            kw["aname"] = "_IFramebuffer_getHeightReductionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFramebuffer_getHeightReductionResponse_Holder"
            self.pyclass = Holder

    class IFramebuffer_getOverlay_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getOverlay"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getOverlay_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getOverlay")
            kw["aname"] = "_IFramebuffer_getOverlay"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFramebuffer_getOverlay_Holder"
            self.pyclass = Holder

    class IFramebuffer_getOverlayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getOverlayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getOverlayResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getOverlayResponse")
            kw["aname"] = "_IFramebuffer_getOverlayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFramebuffer_getOverlayResponse_Holder"
            self.pyclass = Holder

    class IFramebuffer_getCapabilities_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getCapabilities"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getCapabilities_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getCapabilities")
            kw["aname"] = "_IFramebuffer_getCapabilities"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFramebuffer_getCapabilities_Holder"
            self.pyclass = Holder

    class IFramebuffer_getCapabilitiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_getCapabilitiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_getCapabilitiesResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","FramebufferCapabilities",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_getCapabilitiesResponse")
            kw["aname"] = "_IFramebuffer_getCapabilitiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IFramebuffer_getCapabilitiesResponse_Holder"
            self.pyclass = Holder

    class IFramebuffer_notifyUpdate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_notifyUpdate"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_notifyUpdate_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="x", aname="_x", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="y", aname="_y", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_notifyUpdate")
            kw["aname"] = "_IFramebuffer_notifyUpdate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._x = None
                    self._y = None
                    self._width = None
                    self._height = None
                    return
            Holder.__name__ = "IFramebuffer_notifyUpdate_Holder"
            self.pyclass = Holder

    class IFramebuffer_notifyUpdateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_notifyUpdateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_notifyUpdateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_notifyUpdateResponse")
            kw["aname"] = "_IFramebuffer_notifyUpdateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IFramebuffer_notifyUpdateResponse_Holder"
            self.pyclass = Holder

    class IFramebuffer_notifyUpdateImage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_notifyUpdateImage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_notifyUpdateImage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="x", aname="_x", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="y", aname="_y", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="image", aname="_image", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_notifyUpdateImage")
            kw["aname"] = "_IFramebuffer_notifyUpdateImage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._x = None
                    self._y = None
                    self._width = None
                    self._height = None
                    self._image = None
                    return
            Holder.__name__ = "IFramebuffer_notifyUpdateImage_Holder"
            self.pyclass = Holder

    class IFramebuffer_notifyUpdateImageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_notifyUpdateImageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_notifyUpdateImageResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_notifyUpdateImageResponse")
            kw["aname"] = "_IFramebuffer_notifyUpdateImageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IFramebuffer_notifyUpdateImageResponse_Holder"
            self.pyclass = Holder

    class IFramebuffer_notifyChange_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_notifyChange"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_notifyChange_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="xOrigin", aname="_xOrigin", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="yOrigin", aname="_yOrigin", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_notifyChange")
            kw["aname"] = "_IFramebuffer_notifyChange"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._xOrigin = None
                    self._yOrigin = None
                    self._width = None
                    self._height = None
                    return
            Holder.__name__ = "IFramebuffer_notifyChange_Holder"
            self.pyclass = Holder

    class IFramebuffer_notifyChangeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_notifyChangeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_notifyChangeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_notifyChangeResponse")
            kw["aname"] = "_IFramebuffer_notifyChangeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IFramebuffer_notifyChangeResponse_Holder"
            self.pyclass = Holder

    class IFramebuffer_videoModeSupported_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_videoModeSupported"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_videoModeSupported_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bpp", aname="_bpp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_videoModeSupported")
            kw["aname"] = "_IFramebuffer_videoModeSupported"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._width = None
                    self._height = None
                    self._bpp = None
                    return
            Holder.__name__ = "IFramebuffer_videoModeSupported_Holder"
            self.pyclass = Holder

    class IFramebuffer_videoModeSupportedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_videoModeSupportedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_videoModeSupportedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_videoModeSupportedResponse")
            kw["aname"] = "_IFramebuffer_videoModeSupportedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFramebuffer_videoModeSupportedResponse_Holder"
            self.pyclass = Holder

    class IFramebuffer_notify3DEvent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_notify3DEvent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_notify3DEvent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="data", aname="_data", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_notify3DEvent")
            kw["aname"] = "_IFramebuffer_notify3DEvent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._type = None
                    self._data = None
                    return
            Holder.__name__ = "IFramebuffer_notify3DEvent_Holder"
            self.pyclass = Holder

    class IFramebuffer_notify3DEventResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebuffer_notify3DEventResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebuffer_notify3DEventResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IFramebuffer_notify3DEventResponse")
            kw["aname"] = "_IFramebuffer_notify3DEventResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IFramebuffer_notify3DEventResponse_Holder"
            self.pyclass = Holder

    class IFramebufferOverlay_getX_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebufferOverlay_getX"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebufferOverlay_getX_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebufferOverlay_getX")
            kw["aname"] = "_IFramebufferOverlay_getX"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFramebufferOverlay_getX_Holder"
            self.pyclass = Holder

    class IFramebufferOverlay_getXResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebufferOverlay_getXResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebufferOverlay_getXResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebufferOverlay_getXResponse")
            kw["aname"] = "_IFramebufferOverlay_getXResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFramebufferOverlay_getXResponse_Holder"
            self.pyclass = Holder

    class IFramebufferOverlay_getY_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebufferOverlay_getY"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebufferOverlay_getY_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebufferOverlay_getY")
            kw["aname"] = "_IFramebufferOverlay_getY"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFramebufferOverlay_getY_Holder"
            self.pyclass = Holder

    class IFramebufferOverlay_getYResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebufferOverlay_getYResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebufferOverlay_getYResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebufferOverlay_getYResponse")
            kw["aname"] = "_IFramebufferOverlay_getYResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFramebufferOverlay_getYResponse_Holder"
            self.pyclass = Holder

    class IFramebufferOverlay_getVisible_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebufferOverlay_getVisible"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebufferOverlay_getVisible_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebufferOverlay_getVisible")
            kw["aname"] = "_IFramebufferOverlay_getVisible"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFramebufferOverlay_getVisible_Holder"
            self.pyclass = Holder

    class IFramebufferOverlay_getVisibleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebufferOverlay_getVisibleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebufferOverlay_getVisibleResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebufferOverlay_getVisibleResponse")
            kw["aname"] = "_IFramebufferOverlay_getVisibleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFramebufferOverlay_getVisibleResponse_Holder"
            self.pyclass = Holder

    class IFramebufferOverlay_setVisible_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebufferOverlay_setVisible"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebufferOverlay_setVisible_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="visible", aname="_visible", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebufferOverlay_setVisible")
            kw["aname"] = "_IFramebufferOverlay_setVisible"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._visible = None
                    return
            Holder.__name__ = "IFramebufferOverlay_setVisible_Holder"
            self.pyclass = Holder

    class IFramebufferOverlay_setVisibleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebufferOverlay_setVisibleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebufferOverlay_setVisibleResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IFramebufferOverlay_setVisibleResponse")
            kw["aname"] = "_IFramebufferOverlay_setVisibleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IFramebufferOverlay_setVisibleResponse_Holder"
            self.pyclass = Holder

    class IFramebufferOverlay_getAlpha_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebufferOverlay_getAlpha"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebufferOverlay_getAlpha_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebufferOverlay_getAlpha")
            kw["aname"] = "_IFramebufferOverlay_getAlpha"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IFramebufferOverlay_getAlpha_Holder"
            self.pyclass = Holder

    class IFramebufferOverlay_getAlphaResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebufferOverlay_getAlphaResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebufferOverlay_getAlphaResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebufferOverlay_getAlphaResponse")
            kw["aname"] = "_IFramebufferOverlay_getAlphaResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IFramebufferOverlay_getAlphaResponse_Holder"
            self.pyclass = Holder

    class IFramebufferOverlay_setAlpha_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebufferOverlay_setAlpha"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebufferOverlay_setAlpha_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="alpha", aname="_alpha", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebufferOverlay_setAlpha")
            kw["aname"] = "_IFramebufferOverlay_setAlpha"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._alpha = None
                    return
            Holder.__name__ = "IFramebufferOverlay_setAlpha_Holder"
            self.pyclass = Holder

    class IFramebufferOverlay_setAlphaResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebufferOverlay_setAlphaResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebufferOverlay_setAlphaResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IFramebufferOverlay_setAlphaResponse")
            kw["aname"] = "_IFramebufferOverlay_setAlphaResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IFramebufferOverlay_setAlphaResponse_Holder"
            self.pyclass = Holder

    class IFramebufferOverlay_move_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebufferOverlay_move"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebufferOverlay_move_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="x", aname="_x", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="y", aname="_y", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IFramebufferOverlay_move")
            kw["aname"] = "_IFramebufferOverlay_move"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._x = None
                    self._y = None
                    return
            Holder.__name__ = "IFramebufferOverlay_move_Holder"
            self.pyclass = Holder

    class IFramebufferOverlay_moveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IFramebufferOverlay_moveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IFramebufferOverlay_moveResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IFramebufferOverlay_moveResponse")
            kw["aname"] = "_IFramebufferOverlay_moveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IFramebufferOverlay_moveResponse_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getScreenId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getScreenId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getScreenId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getScreenId")
            kw["aname"] = "_IGuestScreenInfo_getScreenId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getScreenId_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getScreenIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getScreenIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getScreenIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getScreenIdResponse")
            kw["aname"] = "_IGuestScreenInfo_getScreenIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getScreenIdResponse_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getGuestMonitorStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getGuestMonitorStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getGuestMonitorStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getGuestMonitorStatus")
            kw["aname"] = "_IGuestScreenInfo_getGuestMonitorStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getGuestMonitorStatus_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getGuestMonitorStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getGuestMonitorStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getGuestMonitorStatusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","GuestMonitorStatus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getGuestMonitorStatusResponse")
            kw["aname"] = "_IGuestScreenInfo_getGuestMonitorStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getGuestMonitorStatusResponse_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getPrimary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getPrimary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getPrimary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getPrimary")
            kw["aname"] = "_IGuestScreenInfo_getPrimary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getPrimary_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getPrimaryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getPrimaryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getPrimaryResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getPrimaryResponse")
            kw["aname"] = "_IGuestScreenInfo_getPrimaryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getPrimaryResponse_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getOrigin_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getOrigin"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getOrigin_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getOrigin")
            kw["aname"] = "_IGuestScreenInfo_getOrigin"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getOrigin_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getOriginResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getOriginResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getOriginResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getOriginResponse")
            kw["aname"] = "_IGuestScreenInfo_getOriginResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getOriginResponse_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getOriginX_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getOriginX"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getOriginX_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getOriginX")
            kw["aname"] = "_IGuestScreenInfo_getOriginX"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getOriginX_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getOriginXResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getOriginXResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getOriginXResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getOriginXResponse")
            kw["aname"] = "_IGuestScreenInfo_getOriginXResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getOriginXResponse_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getOriginY_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getOriginY"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getOriginY_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getOriginY")
            kw["aname"] = "_IGuestScreenInfo_getOriginY"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getOriginY_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getOriginYResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getOriginYResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getOriginYResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getOriginYResponse")
            kw["aname"] = "_IGuestScreenInfo_getOriginYResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getOriginYResponse_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getWidth_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getWidth"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getWidth_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getWidth")
            kw["aname"] = "_IGuestScreenInfo_getWidth"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getWidth_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getWidthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getWidthResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getWidthResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getWidthResponse")
            kw["aname"] = "_IGuestScreenInfo_getWidthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getWidthResponse_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getHeight_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getHeight"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getHeight_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getHeight")
            kw["aname"] = "_IGuestScreenInfo_getHeight"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getHeight_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getHeightResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getHeightResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getHeightResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getHeightResponse")
            kw["aname"] = "_IGuestScreenInfo_getHeightResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getHeightResponse_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getBitsPerPixel_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getBitsPerPixel"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getBitsPerPixel_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getBitsPerPixel")
            kw["aname"] = "_IGuestScreenInfo_getBitsPerPixel"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getBitsPerPixel_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getBitsPerPixelResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getBitsPerPixelResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getBitsPerPixelResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getBitsPerPixelResponse")
            kw["aname"] = "_IGuestScreenInfo_getBitsPerPixelResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getBitsPerPixelResponse_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getExtendedInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getExtendedInfo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getExtendedInfo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getExtendedInfo")
            kw["aname"] = "_IGuestScreenInfo_getExtendedInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getExtendedInfo_Holder"
            self.pyclass = Holder

    class IGuestScreenInfo_getExtendedInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestScreenInfo_getExtendedInfoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestScreenInfo_getExtendedInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestScreenInfo_getExtendedInfoResponse")
            kw["aname"] = "_IGuestScreenInfo_getExtendedInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestScreenInfo_getExtendedInfoResponse_Holder"
            self.pyclass = Holder

    class IDisplay_getGuestScreenLayout_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_getGuestScreenLayout"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_getGuestScreenLayout_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_getGuestScreenLayout")
            kw["aname"] = "_IDisplay_getGuestScreenLayout"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDisplay_getGuestScreenLayout_Holder"
            self.pyclass = Holder

    class IDisplay_getGuestScreenLayoutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_getGuestScreenLayoutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_getGuestScreenLayoutResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_getGuestScreenLayoutResponse")
            kw["aname"] = "_IDisplay_getGuestScreenLayoutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IDisplay_getGuestScreenLayoutResponse_Holder"
            self.pyclass = Holder

    class IDisplay_getScreenResolution_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_getScreenResolution"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_getScreenResolution_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_getScreenResolution")
            kw["aname"] = "_IDisplay_getScreenResolution"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IDisplay_getScreenResolution_Holder"
            self.pyclass = Holder

    class IDisplay_getScreenResolutionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_getScreenResolutionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_getScreenResolutionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bitsPerPixel", aname="_bitsPerPixel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="xOrigin", aname="_xOrigin", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="yOrigin", aname="_yOrigin", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","GuestMonitorStatus",lazy=False)(pname="guestMonitorStatus", aname="_guestMonitorStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_getScreenResolutionResponse")
            kw["aname"] = "_IDisplay_getScreenResolutionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._width = None
                    self._height = None
                    self._bitsPerPixel = None
                    self._xOrigin = None
                    self._yOrigin = None
                    self._guestMonitorStatus = None
                    return
            Holder.__name__ = "IDisplay_getScreenResolutionResponse_Holder"
            self.pyclass = Holder

    class IDisplay_attachFramebuffer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_attachFramebuffer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_attachFramebuffer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="framebuffer", aname="_framebuffer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_attachFramebuffer")
            kw["aname"] = "_IDisplay_attachFramebuffer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._framebuffer = None
                    return
            Holder.__name__ = "IDisplay_attachFramebuffer_Holder"
            self.pyclass = Holder

    class IDisplay_attachFramebufferResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_attachFramebufferResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_attachFramebufferResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_attachFramebufferResponse")
            kw["aname"] = "_IDisplay_attachFramebufferResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDisplay_attachFramebufferResponse_Holder"
            self.pyclass = Holder

    class IDisplay_detachFramebuffer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_detachFramebuffer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_detachFramebuffer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_detachFramebuffer")
            kw["aname"] = "_IDisplay_detachFramebuffer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._id = None
                    return
            Holder.__name__ = "IDisplay_detachFramebuffer_Holder"
            self.pyclass = Holder

    class IDisplay_detachFramebufferResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_detachFramebufferResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_detachFramebufferResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_detachFramebufferResponse")
            kw["aname"] = "_IDisplay_detachFramebufferResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDisplay_detachFramebufferResponse_Holder"
            self.pyclass = Holder

    class IDisplay_queryFramebuffer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_queryFramebuffer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_queryFramebuffer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_queryFramebuffer")
            kw["aname"] = "_IDisplay_queryFramebuffer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IDisplay_queryFramebuffer_Holder"
            self.pyclass = Holder

    class IDisplay_queryFramebufferResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_queryFramebufferResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_queryFramebufferResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_queryFramebufferResponse")
            kw["aname"] = "_IDisplay_queryFramebufferResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDisplay_queryFramebufferResponse_Holder"
            self.pyclass = Holder

    class IDisplay_setVideoModeHint_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_setVideoModeHint"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_setVideoModeHint_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="display", aname="_display", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="changeOrigin", aname="_changeOrigin", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="originX", aname="_originX", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="originY", aname="_originY", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bitsPerPixel", aname="_bitsPerPixel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_setVideoModeHint")
            kw["aname"] = "_IDisplay_setVideoModeHint"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._display = None
                    self._enabled = None
                    self._changeOrigin = None
                    self._originX = None
                    self._originY = None
                    self._width = None
                    self._height = None
                    self._bitsPerPixel = None
                    return
            Holder.__name__ = "IDisplay_setVideoModeHint_Holder"
            self.pyclass = Holder

    class IDisplay_setVideoModeHintResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_setVideoModeHintResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_setVideoModeHintResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_setVideoModeHintResponse")
            kw["aname"] = "_IDisplay_setVideoModeHintResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDisplay_setVideoModeHintResponse_Holder"
            self.pyclass = Holder

    class IDisplay_setSeamlessMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_setSeamlessMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_setSeamlessMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_setSeamlessMode")
            kw["aname"] = "_IDisplay_setSeamlessMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "IDisplay_setSeamlessMode_Holder"
            self.pyclass = Holder

    class IDisplay_setSeamlessModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_setSeamlessModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_setSeamlessModeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_setSeamlessModeResponse")
            kw["aname"] = "_IDisplay_setSeamlessModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDisplay_setSeamlessModeResponse_Holder"
            self.pyclass = Holder

    class IDisplay_takeScreenShotToArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_takeScreenShotToArray"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_takeScreenShotToArray_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","BitmapFormat",lazy=False)(pname="bitmapFormat", aname="_bitmapFormat", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_takeScreenShotToArray")
            kw["aname"] = "_IDisplay_takeScreenShotToArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._width = None
                    self._height = None
                    self._bitmapFormat = None
                    return
            Holder.__name__ = "IDisplay_takeScreenShotToArray_Holder"
            self.pyclass = Holder

    class IDisplay_takeScreenShotToArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_takeScreenShotToArrayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_takeScreenShotToArrayResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_takeScreenShotToArrayResponse")
            kw["aname"] = "_IDisplay_takeScreenShotToArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDisplay_takeScreenShotToArrayResponse_Holder"
            self.pyclass = Holder

    class IDisplay_invalidateAndUpdate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_invalidateAndUpdate"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_invalidateAndUpdate_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_invalidateAndUpdate")
            kw["aname"] = "_IDisplay_invalidateAndUpdate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDisplay_invalidateAndUpdate_Holder"
            self.pyclass = Holder

    class IDisplay_invalidateAndUpdateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_invalidateAndUpdateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_invalidateAndUpdateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_invalidateAndUpdateResponse")
            kw["aname"] = "_IDisplay_invalidateAndUpdateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDisplay_invalidateAndUpdateResponse_Holder"
            self.pyclass = Holder

    class IDisplay_invalidateAndUpdateScreen_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_invalidateAndUpdateScreen"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_invalidateAndUpdateScreen_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_invalidateAndUpdateScreen")
            kw["aname"] = "_IDisplay_invalidateAndUpdateScreen"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IDisplay_invalidateAndUpdateScreen_Holder"
            self.pyclass = Holder

    class IDisplay_invalidateAndUpdateScreenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_invalidateAndUpdateScreenResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_invalidateAndUpdateScreenResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_invalidateAndUpdateScreenResponse")
            kw["aname"] = "_IDisplay_invalidateAndUpdateScreenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDisplay_invalidateAndUpdateScreenResponse_Holder"
            self.pyclass = Holder

    class IDisplay_viewportChanged_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_viewportChanged"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_viewportChanged_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="x", aname="_x", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="y", aname="_y", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_viewportChanged")
            kw["aname"] = "_IDisplay_viewportChanged"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._x = None
                    self._y = None
                    self._width = None
                    self._height = None
                    return
            Holder.__name__ = "IDisplay_viewportChanged_Holder"
            self.pyclass = Holder

    class IDisplay_viewportChangedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_viewportChangedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_viewportChangedResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_viewportChangedResponse")
            kw["aname"] = "_IDisplay_viewportChangedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDisplay_viewportChangedResponse_Holder"
            self.pyclass = Holder

    class IDisplay_notifyScaleFactorChange_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_notifyScaleFactorChange"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_notifyScaleFactorChange_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="u32ScaleFactorWMultiplied", aname="_u32ScaleFactorWMultiplied", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="u32ScaleFactorHMultiplied", aname="_u32ScaleFactorHMultiplied", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_notifyScaleFactorChange")
            kw["aname"] = "_IDisplay_notifyScaleFactorChange"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._u32ScaleFactorWMultiplied = None
                    self._u32ScaleFactorHMultiplied = None
                    return
            Holder.__name__ = "IDisplay_notifyScaleFactorChange_Holder"
            self.pyclass = Holder

    class IDisplay_notifyScaleFactorChangeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_notifyScaleFactorChangeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_notifyScaleFactorChangeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_notifyScaleFactorChangeResponse")
            kw["aname"] = "_IDisplay_notifyScaleFactorChangeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDisplay_notifyScaleFactorChangeResponse_Holder"
            self.pyclass = Holder

    class IDisplay_notifyHiDPIOutputPolicyChange_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_notifyHiDPIOutputPolicyChange"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_notifyHiDPIOutputPolicyChange_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="fUnscaledHiDPI", aname="_fUnscaledHiDPI", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_notifyHiDPIOutputPolicyChange")
            kw["aname"] = "_IDisplay_notifyHiDPIOutputPolicyChange"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._fUnscaledHiDPI = None
                    return
            Holder.__name__ = "IDisplay_notifyHiDPIOutputPolicyChange_Holder"
            self.pyclass = Holder

    class IDisplay_notifyHiDPIOutputPolicyChangeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_notifyHiDPIOutputPolicyChangeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_notifyHiDPIOutputPolicyChangeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_notifyHiDPIOutputPolicyChangeResponse")
            kw["aname"] = "_IDisplay_notifyHiDPIOutputPolicyChangeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDisplay_notifyHiDPIOutputPolicyChangeResponse_Holder"
            self.pyclass = Holder

    class IDisplay_setScreenLayout_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_setScreenLayout"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_setScreenLayout_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ScreenLayoutMode",lazy=False)(pname="screenLayoutMode", aname="_screenLayoutMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="guestScreenInfo", aname="_guestScreenInfo", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_setScreenLayout")
            kw["aname"] = "_IDisplay_setScreenLayout"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenLayoutMode = None
                    self._guestScreenInfo = []
                    return
            Holder.__name__ = "IDisplay_setScreenLayout_Holder"
            self.pyclass = Holder

    class IDisplay_setScreenLayoutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_setScreenLayoutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_setScreenLayoutResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_setScreenLayoutResponse")
            kw["aname"] = "_IDisplay_setScreenLayoutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDisplay_setScreenLayoutResponse_Holder"
            self.pyclass = Holder

    class IDisplay_detachScreens_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_detachScreens"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_detachScreens_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="screenIds", aname="_screenIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_detachScreens")
            kw["aname"] = "_IDisplay_detachScreens"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenIds = []
                    return
            Holder.__name__ = "IDisplay_detachScreens_Holder"
            self.pyclass = Holder

    class IDisplay_detachScreensResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_detachScreensResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_detachScreensResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_detachScreensResponse")
            kw["aname"] = "_IDisplay_detachScreensResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDisplay_detachScreensResponse_Holder"
            self.pyclass = Holder

    class IDisplay_createGuestScreenInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_createGuestScreenInfo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_createGuestScreenInfo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="display", aname="_display", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","GuestMonitorStatus",lazy=False)(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="primary", aname="_primary", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="changeOrigin", aname="_changeOrigin", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="originX", aname="_originX", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="originY", aname="_originY", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bitsPerPixel", aname="_bitsPerPixel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_createGuestScreenInfo")
            kw["aname"] = "_IDisplay_createGuestScreenInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._display = None
                    self._status = None
                    self._primary = None
                    self._changeOrigin = None
                    self._originX = None
                    self._originY = None
                    self._width = None
                    self._height = None
                    self._bitsPerPixel = None
                    return
            Holder.__name__ = "IDisplay_createGuestScreenInfo_Holder"
            self.pyclass = Holder

    class IDisplay_createGuestScreenInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_createGuestScreenInfoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_createGuestScreenInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_createGuestScreenInfoResponse")
            kw["aname"] = "_IDisplay_createGuestScreenInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDisplay_createGuestScreenInfoResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getAdapterType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getAdapterType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getAdapterType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getAdapterType")
            kw["aname"] = "_INetworkAdapter_getAdapterType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getAdapterType_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getAdapterTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getAdapterTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getAdapterTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","NetworkAdapterType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getAdapterTypeResponse")
            kw["aname"] = "_INetworkAdapter_getAdapterTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getAdapterTypeResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setAdapterType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setAdapterType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setAdapterType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","NetworkAdapterType",lazy=False)(pname="adapterType", aname="_adapterType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setAdapterType")
            kw["aname"] = "_INetworkAdapter_setAdapterType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._adapterType = None
                    return
            Holder.__name__ = "INetworkAdapter_setAdapterType_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setAdapterTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setAdapterTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setAdapterTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setAdapterTypeResponse")
            kw["aname"] = "_INetworkAdapter_setAdapterTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setAdapterTypeResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getSlot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getSlot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getSlot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getSlot")
            kw["aname"] = "_INetworkAdapter_getSlot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getSlot_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getSlotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getSlotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getSlotResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getSlotResponse")
            kw["aname"] = "_INetworkAdapter_getSlotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getSlotResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getEnabled")
            kw["aname"] = "_INetworkAdapter_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getEnabled_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getEnabledResponse")
            kw["aname"] = "_INetworkAdapter_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getEnabledResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setEnabled")
            kw["aname"] = "_INetworkAdapter_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "INetworkAdapter_setEnabled_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setEnabledResponse")
            kw["aname"] = "_INetworkAdapter_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setEnabledResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getMACAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getMACAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getMACAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getMACAddress")
            kw["aname"] = "_INetworkAdapter_getMACAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getMACAddress_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getMACAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getMACAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getMACAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getMACAddressResponse")
            kw["aname"] = "_INetworkAdapter_getMACAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getMACAddressResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setMACAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setMACAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setMACAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MACAddress", aname="_MACAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setMACAddress")
            kw["aname"] = "_INetworkAdapter_setMACAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._MACAddress = None
                    return
            Holder.__name__ = "INetworkAdapter_setMACAddress_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setMACAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setMACAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setMACAddressResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setMACAddressResponse")
            kw["aname"] = "_INetworkAdapter_setMACAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setMACAddressResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getAttachmentType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getAttachmentType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getAttachmentType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getAttachmentType")
            kw["aname"] = "_INetworkAdapter_getAttachmentType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getAttachmentType_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getAttachmentTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getAttachmentTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getAttachmentTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","NetworkAttachmentType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getAttachmentTypeResponse")
            kw["aname"] = "_INetworkAdapter_getAttachmentTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getAttachmentTypeResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setAttachmentType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setAttachmentType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setAttachmentType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","NetworkAttachmentType",lazy=False)(pname="attachmentType", aname="_attachmentType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setAttachmentType")
            kw["aname"] = "_INetworkAdapter_setAttachmentType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._attachmentType = None
                    return
            Holder.__name__ = "INetworkAdapter_setAttachmentType_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setAttachmentTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setAttachmentTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setAttachmentTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setAttachmentTypeResponse")
            kw["aname"] = "_INetworkAdapter_setAttachmentTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setAttachmentTypeResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getBridgedInterface_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getBridgedInterface"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getBridgedInterface_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getBridgedInterface")
            kw["aname"] = "_INetworkAdapter_getBridgedInterface"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getBridgedInterface_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getBridgedInterfaceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getBridgedInterfaceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getBridgedInterfaceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getBridgedInterfaceResponse")
            kw["aname"] = "_INetworkAdapter_getBridgedInterfaceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getBridgedInterfaceResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setBridgedInterface_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setBridgedInterface"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setBridgedInterface_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bridgedInterface", aname="_bridgedInterface", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setBridgedInterface")
            kw["aname"] = "_INetworkAdapter_setBridgedInterface"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bridgedInterface = None
                    return
            Holder.__name__ = "INetworkAdapter_setBridgedInterface_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setBridgedInterfaceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setBridgedInterfaceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setBridgedInterfaceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setBridgedInterfaceResponse")
            kw["aname"] = "_INetworkAdapter_setBridgedInterfaceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setBridgedInterfaceResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getHostOnlyInterface_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getHostOnlyInterface"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getHostOnlyInterface_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getHostOnlyInterface")
            kw["aname"] = "_INetworkAdapter_getHostOnlyInterface"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getHostOnlyInterface_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getHostOnlyInterfaceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getHostOnlyInterfaceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getHostOnlyInterfaceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getHostOnlyInterfaceResponse")
            kw["aname"] = "_INetworkAdapter_getHostOnlyInterfaceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getHostOnlyInterfaceResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setHostOnlyInterface_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setHostOnlyInterface"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setHostOnlyInterface_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostOnlyInterface", aname="_hostOnlyInterface", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setHostOnlyInterface")
            kw["aname"] = "_INetworkAdapter_setHostOnlyInterface"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hostOnlyInterface = None
                    return
            Holder.__name__ = "INetworkAdapter_setHostOnlyInterface_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setHostOnlyInterfaceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setHostOnlyInterfaceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setHostOnlyInterfaceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setHostOnlyInterfaceResponse")
            kw["aname"] = "_INetworkAdapter_setHostOnlyInterfaceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setHostOnlyInterfaceResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getInternalNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getInternalNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getInternalNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getInternalNetwork")
            kw["aname"] = "_INetworkAdapter_getInternalNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getInternalNetwork_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getInternalNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getInternalNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getInternalNetworkResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getInternalNetworkResponse")
            kw["aname"] = "_INetworkAdapter_getInternalNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getInternalNetworkResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setInternalNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setInternalNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setInternalNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="internalNetwork", aname="_internalNetwork", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setInternalNetwork")
            kw["aname"] = "_INetworkAdapter_setInternalNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._internalNetwork = None
                    return
            Holder.__name__ = "INetworkAdapter_setInternalNetwork_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setInternalNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setInternalNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setInternalNetworkResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setInternalNetworkResponse")
            kw["aname"] = "_INetworkAdapter_setInternalNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setInternalNetworkResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getNATNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getNATNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getNATNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getNATNetwork")
            kw["aname"] = "_INetworkAdapter_getNATNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getNATNetwork_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getNATNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getNATNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getNATNetworkResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getNATNetworkResponse")
            kw["aname"] = "_INetworkAdapter_getNATNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getNATNetworkResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setNATNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setNATNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setNATNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="NATNetwork", aname="_NATNetwork", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setNATNetwork")
            kw["aname"] = "_INetworkAdapter_setNATNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._NATNetwork = None
                    return
            Holder.__name__ = "INetworkAdapter_setNATNetwork_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setNATNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setNATNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setNATNetworkResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setNATNetworkResponse")
            kw["aname"] = "_INetworkAdapter_setNATNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setNATNetworkResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getGenericDriver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getGenericDriver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getGenericDriver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getGenericDriver")
            kw["aname"] = "_INetworkAdapter_getGenericDriver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getGenericDriver_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getGenericDriverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getGenericDriverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getGenericDriverResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getGenericDriverResponse")
            kw["aname"] = "_INetworkAdapter_getGenericDriverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getGenericDriverResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setGenericDriver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setGenericDriver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setGenericDriver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="genericDriver", aname="_genericDriver", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setGenericDriver")
            kw["aname"] = "_INetworkAdapter_setGenericDriver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._genericDriver = None
                    return
            Holder.__name__ = "INetworkAdapter_setGenericDriver_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setGenericDriverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setGenericDriverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setGenericDriverResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setGenericDriverResponse")
            kw["aname"] = "_INetworkAdapter_setGenericDriverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setGenericDriverResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getCableConnected_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getCableConnected"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getCableConnected_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getCableConnected")
            kw["aname"] = "_INetworkAdapter_getCableConnected"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getCableConnected_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getCableConnectedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getCableConnectedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getCableConnectedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getCableConnectedResponse")
            kw["aname"] = "_INetworkAdapter_getCableConnectedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getCableConnectedResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setCableConnected_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setCableConnected"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setCableConnected_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="cableConnected", aname="_cableConnected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setCableConnected")
            kw["aname"] = "_INetworkAdapter_setCableConnected"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cableConnected = None
                    return
            Holder.__name__ = "INetworkAdapter_setCableConnected_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setCableConnectedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setCableConnectedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setCableConnectedResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setCableConnectedResponse")
            kw["aname"] = "_INetworkAdapter_setCableConnectedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setCableConnectedResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getLineSpeed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getLineSpeed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getLineSpeed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getLineSpeed")
            kw["aname"] = "_INetworkAdapter_getLineSpeed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getLineSpeed_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getLineSpeedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getLineSpeedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getLineSpeedResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getLineSpeedResponse")
            kw["aname"] = "_INetworkAdapter_getLineSpeedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getLineSpeedResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setLineSpeed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setLineSpeed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setLineSpeed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="lineSpeed", aname="_lineSpeed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setLineSpeed")
            kw["aname"] = "_INetworkAdapter_setLineSpeed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._lineSpeed = None
                    return
            Holder.__name__ = "INetworkAdapter_setLineSpeed_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setLineSpeedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setLineSpeedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setLineSpeedResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setLineSpeedResponse")
            kw["aname"] = "_INetworkAdapter_setLineSpeedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setLineSpeedResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getPromiscModePolicy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getPromiscModePolicy"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getPromiscModePolicy_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getPromiscModePolicy")
            kw["aname"] = "_INetworkAdapter_getPromiscModePolicy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getPromiscModePolicy_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getPromiscModePolicyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getPromiscModePolicyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getPromiscModePolicyResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","NetworkAdapterPromiscModePolicy",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getPromiscModePolicyResponse")
            kw["aname"] = "_INetworkAdapter_getPromiscModePolicyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getPromiscModePolicyResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setPromiscModePolicy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setPromiscModePolicy"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setPromiscModePolicy_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","NetworkAdapterPromiscModePolicy",lazy=False)(pname="promiscModePolicy", aname="_promiscModePolicy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setPromiscModePolicy")
            kw["aname"] = "_INetworkAdapter_setPromiscModePolicy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._promiscModePolicy = None
                    return
            Holder.__name__ = "INetworkAdapter_setPromiscModePolicy_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setPromiscModePolicyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setPromiscModePolicyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setPromiscModePolicyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setPromiscModePolicyResponse")
            kw["aname"] = "_INetworkAdapter_setPromiscModePolicyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setPromiscModePolicyResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getTraceEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getTraceEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getTraceEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getTraceEnabled")
            kw["aname"] = "_INetworkAdapter_getTraceEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getTraceEnabled_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getTraceEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getTraceEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getTraceEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getTraceEnabledResponse")
            kw["aname"] = "_INetworkAdapter_getTraceEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getTraceEnabledResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setTraceEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setTraceEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setTraceEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="traceEnabled", aname="_traceEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setTraceEnabled")
            kw["aname"] = "_INetworkAdapter_setTraceEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._traceEnabled = None
                    return
            Holder.__name__ = "INetworkAdapter_setTraceEnabled_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setTraceEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setTraceEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setTraceEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setTraceEnabledResponse")
            kw["aname"] = "_INetworkAdapter_setTraceEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setTraceEnabledResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getTraceFile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getTraceFile"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getTraceFile_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getTraceFile")
            kw["aname"] = "_INetworkAdapter_getTraceFile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getTraceFile_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getTraceFileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getTraceFileResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getTraceFileResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getTraceFileResponse")
            kw["aname"] = "_INetworkAdapter_getTraceFileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getTraceFileResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setTraceFile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setTraceFile"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setTraceFile_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="traceFile", aname="_traceFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setTraceFile")
            kw["aname"] = "_INetworkAdapter_setTraceFile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._traceFile = None
                    return
            Holder.__name__ = "INetworkAdapter_setTraceFile_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setTraceFileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setTraceFileResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setTraceFileResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setTraceFileResponse")
            kw["aname"] = "_INetworkAdapter_setTraceFileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setTraceFileResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getNATEngine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getNATEngine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getNATEngine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getNATEngine")
            kw["aname"] = "_INetworkAdapter_getNATEngine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getNATEngine_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getNATEngineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getNATEngineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getNATEngineResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getNATEngineResponse")
            kw["aname"] = "_INetworkAdapter_getNATEngineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getNATEngineResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getBootPriority_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getBootPriority"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getBootPriority_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getBootPriority")
            kw["aname"] = "_INetworkAdapter_getBootPriority"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getBootPriority_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getBootPriorityResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getBootPriorityResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getBootPriorityResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getBootPriorityResponse")
            kw["aname"] = "_INetworkAdapter_getBootPriorityResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getBootPriorityResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setBootPriority_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setBootPriority"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setBootPriority_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bootPriority", aname="_bootPriority", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setBootPriority")
            kw["aname"] = "_INetworkAdapter_setBootPriority"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bootPriority = None
                    return
            Holder.__name__ = "INetworkAdapter_setBootPriority_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setBootPriorityResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setBootPriorityResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setBootPriorityResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setBootPriorityResponse")
            kw["aname"] = "_INetworkAdapter_setBootPriorityResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setBootPriorityResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getBandwidthGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getBandwidthGroup"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getBandwidthGroup_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getBandwidthGroup")
            kw["aname"] = "_INetworkAdapter_getBandwidthGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getBandwidthGroup_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getBandwidthGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getBandwidthGroupResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getBandwidthGroupResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getBandwidthGroupResponse")
            kw["aname"] = "_INetworkAdapter_getBandwidthGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getBandwidthGroupResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setBandwidthGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setBandwidthGroup"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setBandwidthGroup_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bandwidthGroup", aname="_bandwidthGroup", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setBandwidthGroup")
            kw["aname"] = "_INetworkAdapter_setBandwidthGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bandwidthGroup = None
                    return
            Holder.__name__ = "INetworkAdapter_setBandwidthGroup_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setBandwidthGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setBandwidthGroupResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setBandwidthGroupResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setBandwidthGroupResponse")
            kw["aname"] = "_INetworkAdapter_setBandwidthGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setBandwidthGroupResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getProperty")
            kw["aname"] = "_INetworkAdapter_getProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    return
            Holder.__name__ = "INetworkAdapter_getProperty_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getPropertyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getPropertyResponse")
            kw["aname"] = "_INetworkAdapter_getPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getPropertyResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setProperty")
            kw["aname"] = "_INetworkAdapter_setProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "INetworkAdapter_setProperty_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setPropertyResponse")
            kw["aname"] = "_INetworkAdapter_setPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setPropertyResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="names", aname="_names", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getProperties")
            kw["aname"] = "_INetworkAdapter_getProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._names = None
                    return
            Holder.__name__ = "INetworkAdapter_getProperties_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getPropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getPropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getPropertiesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnNames", aname="_returnNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getPropertiesResponse")
            kw["aname"] = "_INetworkAdapter_getPropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnNames = []
                    self._returnval = []
                    return
            Holder.__name__ = "INetworkAdapter_getPropertiesResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getSlot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getSlot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getSlot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getSlot")
            kw["aname"] = "_ISerialPort_getSlot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getSlot_Holder"
            self.pyclass = Holder

    class ISerialPort_getSlotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getSlotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getSlotResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getSlotResponse")
            kw["aname"] = "_ISerialPort_getSlotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getSlotResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getEnabled")
            kw["aname"] = "_ISerialPort_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getEnabled_Holder"
            self.pyclass = Holder

    class ISerialPort_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getEnabledResponse")
            kw["aname"] = "_ISerialPort_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getEnabledResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setEnabled")
            kw["aname"] = "_ISerialPort_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "ISerialPort_setEnabled_Holder"
            self.pyclass = Holder

    class ISerialPort_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setEnabledResponse")
            kw["aname"] = "_ISerialPort_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISerialPort_setEnabledResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getIOBase_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getIOBase"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getIOBase_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getIOBase")
            kw["aname"] = "_ISerialPort_getIOBase"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getIOBase_Holder"
            self.pyclass = Holder

    class ISerialPort_getIOBaseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getIOBaseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getIOBaseResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getIOBaseResponse")
            kw["aname"] = "_ISerialPort_getIOBaseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getIOBaseResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_setIOBase_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setIOBase"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setIOBase_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="IOBase", aname="_IOBase", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setIOBase")
            kw["aname"] = "_ISerialPort_setIOBase"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IOBase = None
                    return
            Holder.__name__ = "ISerialPort_setIOBase_Holder"
            self.pyclass = Holder

    class ISerialPort_setIOBaseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setIOBaseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setIOBaseResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setIOBaseResponse")
            kw["aname"] = "_ISerialPort_setIOBaseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISerialPort_setIOBaseResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getIRQ_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getIRQ"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getIRQ_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getIRQ")
            kw["aname"] = "_ISerialPort_getIRQ"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getIRQ_Holder"
            self.pyclass = Holder

    class ISerialPort_getIRQResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getIRQResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getIRQResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getIRQResponse")
            kw["aname"] = "_ISerialPort_getIRQResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getIRQResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_setIRQ_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setIRQ"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setIRQ_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="IRQ", aname="_IRQ", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setIRQ")
            kw["aname"] = "_ISerialPort_setIRQ"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IRQ = None
                    return
            Holder.__name__ = "ISerialPort_setIRQ_Holder"
            self.pyclass = Holder

    class ISerialPort_setIRQResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setIRQResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setIRQResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setIRQResponse")
            kw["aname"] = "_ISerialPort_setIRQResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISerialPort_setIRQResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getHostMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getHostMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getHostMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getHostMode")
            kw["aname"] = "_ISerialPort_getHostMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getHostMode_Holder"
            self.pyclass = Holder

    class ISerialPort_getHostModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getHostModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getHostModeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","PortMode",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getHostModeResponse")
            kw["aname"] = "_ISerialPort_getHostModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getHostModeResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_setHostMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setHostMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setHostMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","PortMode",lazy=False)(pname="hostMode", aname="_hostMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setHostMode")
            kw["aname"] = "_ISerialPort_setHostMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hostMode = None
                    return
            Holder.__name__ = "ISerialPort_setHostMode_Holder"
            self.pyclass = Holder

    class ISerialPort_setHostModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setHostModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setHostModeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setHostModeResponse")
            kw["aname"] = "_ISerialPort_setHostModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISerialPort_setHostModeResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getServer")
            kw["aname"] = "_ISerialPort_getServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getServer_Holder"
            self.pyclass = Holder

    class ISerialPort_getServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getServerResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getServerResponse")
            kw["aname"] = "_ISerialPort_getServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getServerResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_setServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="server", aname="_server", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setServer")
            kw["aname"] = "_ISerialPort_setServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._server = None
                    return
            Holder.__name__ = "ISerialPort_setServer_Holder"
            self.pyclass = Holder

    class ISerialPort_setServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setServerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setServerResponse")
            kw["aname"] = "_ISerialPort_setServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISerialPort_setServerResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getPath")
            kw["aname"] = "_ISerialPort_getPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getPath_Holder"
            self.pyclass = Holder

    class ISerialPort_getPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getPathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getPathResponse")
            kw["aname"] = "_ISerialPort_getPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getPathResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_setPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setPath")
            kw["aname"] = "_ISerialPort_setPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    return
            Holder.__name__ = "ISerialPort_setPath_Holder"
            self.pyclass = Holder

    class ISerialPort_setPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setPathResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setPathResponse")
            kw["aname"] = "_ISerialPort_setPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISerialPort_setPathResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getUartType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getUartType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getUartType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getUartType")
            kw["aname"] = "_ISerialPort_getUartType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getUartType_Holder"
            self.pyclass = Holder

    class ISerialPort_getUartTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getUartTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getUartTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","UartType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getUartTypeResponse")
            kw["aname"] = "_ISerialPort_getUartTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getUartTypeResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_setUartType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setUartType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setUartType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","UartType",lazy=False)(pname="uartType", aname="_uartType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setUartType")
            kw["aname"] = "_ISerialPort_setUartType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._uartType = None
                    return
            Holder.__name__ = "ISerialPort_setUartType_Holder"
            self.pyclass = Holder

    class ISerialPort_setUartTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setUartTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setUartTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setUartTypeResponse")
            kw["aname"] = "_ISerialPort_setUartTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISerialPort_setUartTypeResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_getSlot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getSlot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getSlot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getSlot")
            kw["aname"] = "_IParallelPort_getSlot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IParallelPort_getSlot_Holder"
            self.pyclass = Holder

    class IParallelPort_getSlotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getSlotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getSlotResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getSlotResponse")
            kw["aname"] = "_IParallelPort_getSlotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IParallelPort_getSlotResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getEnabled")
            kw["aname"] = "_IParallelPort_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IParallelPort_getEnabled_Holder"
            self.pyclass = Holder

    class IParallelPort_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getEnabledResponse")
            kw["aname"] = "_IParallelPort_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IParallelPort_getEnabledResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setEnabled")
            kw["aname"] = "_IParallelPort_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "IParallelPort_setEnabled_Holder"
            self.pyclass = Holder

    class IParallelPort_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setEnabledResponse")
            kw["aname"] = "_IParallelPort_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IParallelPort_setEnabledResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_getIOBase_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getIOBase"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getIOBase_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getIOBase")
            kw["aname"] = "_IParallelPort_getIOBase"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IParallelPort_getIOBase_Holder"
            self.pyclass = Holder

    class IParallelPort_getIOBaseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getIOBaseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getIOBaseResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getIOBaseResponse")
            kw["aname"] = "_IParallelPort_getIOBaseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IParallelPort_getIOBaseResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_setIOBase_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setIOBase"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setIOBase_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="IOBase", aname="_IOBase", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setIOBase")
            kw["aname"] = "_IParallelPort_setIOBase"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IOBase = None
                    return
            Holder.__name__ = "IParallelPort_setIOBase_Holder"
            self.pyclass = Holder

    class IParallelPort_setIOBaseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setIOBaseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setIOBaseResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setIOBaseResponse")
            kw["aname"] = "_IParallelPort_setIOBaseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IParallelPort_setIOBaseResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_getIRQ_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getIRQ"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getIRQ_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getIRQ")
            kw["aname"] = "_IParallelPort_getIRQ"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IParallelPort_getIRQ_Holder"
            self.pyclass = Holder

    class IParallelPort_getIRQResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getIRQResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getIRQResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getIRQResponse")
            kw["aname"] = "_IParallelPort_getIRQResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IParallelPort_getIRQResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_setIRQ_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setIRQ"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setIRQ_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="IRQ", aname="_IRQ", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setIRQ")
            kw["aname"] = "_IParallelPort_setIRQ"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IRQ = None
                    return
            Holder.__name__ = "IParallelPort_setIRQ_Holder"
            self.pyclass = Holder

    class IParallelPort_setIRQResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setIRQResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setIRQResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setIRQResponse")
            kw["aname"] = "_IParallelPort_setIRQResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IParallelPort_setIRQResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_getPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getPath")
            kw["aname"] = "_IParallelPort_getPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IParallelPort_getPath_Holder"
            self.pyclass = Holder

    class IParallelPort_getPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getPathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getPathResponse")
            kw["aname"] = "_IParallelPort_getPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IParallelPort_getPathResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_setPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setPath")
            kw["aname"] = "_IParallelPort_setPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    return
            Holder.__name__ = "IParallelPort_setPath_Holder"
            self.pyclass = Holder

    class IParallelPort_setPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setPathResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setPathResponse")
            kw["aname"] = "_IParallelPort_setPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IParallelPort_setPathResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getSingleStep_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getSingleStep"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getSingleStep_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getSingleStep")
            kw["aname"] = "_IMachineDebugger_getSingleStep"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getSingleStep_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getSingleStepResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getSingleStepResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getSingleStepResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getSingleStepResponse")
            kw["aname"] = "_IMachineDebugger_getSingleStepResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getSingleStepResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setSingleStep_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setSingleStep"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setSingleStep_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="singleStep", aname="_singleStep", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setSingleStep")
            kw["aname"] = "_IMachineDebugger_setSingleStep"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._singleStep = None
                    return
            Holder.__name__ = "IMachineDebugger_setSingleStep_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setSingleStepResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setSingleStepResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setSingleStepResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setSingleStepResponse")
            kw["aname"] = "_IMachineDebugger_setSingleStepResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_setSingleStepResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getRecompileUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getRecompileUser"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getRecompileUser_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getRecompileUser")
            kw["aname"] = "_IMachineDebugger_getRecompileUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getRecompileUser_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getRecompileUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getRecompileUserResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getRecompileUserResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getRecompileUserResponse")
            kw["aname"] = "_IMachineDebugger_getRecompileUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getRecompileUserResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setRecompileUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setRecompileUser"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setRecompileUser_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recompileUser", aname="_recompileUser", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setRecompileUser")
            kw["aname"] = "_IMachineDebugger_setRecompileUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._recompileUser = None
                    return
            Holder.__name__ = "IMachineDebugger_setRecompileUser_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setRecompileUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setRecompileUserResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setRecompileUserResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setRecompileUserResponse")
            kw["aname"] = "_IMachineDebugger_setRecompileUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_setRecompileUserResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getRecompileSupervisor_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getRecompileSupervisor"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getRecompileSupervisor_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getRecompileSupervisor")
            kw["aname"] = "_IMachineDebugger_getRecompileSupervisor"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getRecompileSupervisor_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getRecompileSupervisorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getRecompileSupervisorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getRecompileSupervisorResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getRecompileSupervisorResponse")
            kw["aname"] = "_IMachineDebugger_getRecompileSupervisorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getRecompileSupervisorResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setRecompileSupervisor_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setRecompileSupervisor"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setRecompileSupervisor_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recompileSupervisor", aname="_recompileSupervisor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setRecompileSupervisor")
            kw["aname"] = "_IMachineDebugger_setRecompileSupervisor"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._recompileSupervisor = None
                    return
            Holder.__name__ = "IMachineDebugger_setRecompileSupervisor_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setRecompileSupervisorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setRecompileSupervisorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setRecompileSupervisorResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setRecompileSupervisorResponse")
            kw["aname"] = "_IMachineDebugger_setRecompileSupervisorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_setRecompileSupervisorResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getExecuteAllInIEM_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getExecuteAllInIEM"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getExecuteAllInIEM_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getExecuteAllInIEM")
            kw["aname"] = "_IMachineDebugger_getExecuteAllInIEM"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getExecuteAllInIEM_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getExecuteAllInIEMResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getExecuteAllInIEMResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getExecuteAllInIEMResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getExecuteAllInIEMResponse")
            kw["aname"] = "_IMachineDebugger_getExecuteAllInIEMResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getExecuteAllInIEMResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setExecuteAllInIEM_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setExecuteAllInIEM"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setExecuteAllInIEM_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="executeAllInIEM", aname="_executeAllInIEM", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setExecuteAllInIEM")
            kw["aname"] = "_IMachineDebugger_setExecuteAllInIEM"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._executeAllInIEM = None
                    return
            Holder.__name__ = "IMachineDebugger_setExecuteAllInIEM_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setExecuteAllInIEMResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setExecuteAllInIEMResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setExecuteAllInIEMResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setExecuteAllInIEMResponse")
            kw["aname"] = "_IMachineDebugger_setExecuteAllInIEMResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_setExecuteAllInIEMResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getPATMEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getPATMEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getPATMEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getPATMEnabled")
            kw["aname"] = "_IMachineDebugger_getPATMEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getPATMEnabled_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getPATMEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getPATMEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getPATMEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getPATMEnabledResponse")
            kw["aname"] = "_IMachineDebugger_getPATMEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getPATMEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setPATMEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setPATMEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setPATMEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="PATMEnabled", aname="_PATMEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setPATMEnabled")
            kw["aname"] = "_IMachineDebugger_setPATMEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._PATMEnabled = None
                    return
            Holder.__name__ = "IMachineDebugger_setPATMEnabled_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setPATMEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setPATMEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setPATMEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setPATMEnabledResponse")
            kw["aname"] = "_IMachineDebugger_setPATMEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_setPATMEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getCSAMEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getCSAMEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getCSAMEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getCSAMEnabled")
            kw["aname"] = "_IMachineDebugger_getCSAMEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getCSAMEnabled_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getCSAMEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getCSAMEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getCSAMEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getCSAMEnabledResponse")
            kw["aname"] = "_IMachineDebugger_getCSAMEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getCSAMEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setCSAMEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setCSAMEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setCSAMEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="CSAMEnabled", aname="_CSAMEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setCSAMEnabled")
            kw["aname"] = "_IMachineDebugger_setCSAMEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._CSAMEnabled = None
                    return
            Holder.__name__ = "IMachineDebugger_setCSAMEnabled_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setCSAMEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setCSAMEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setCSAMEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setCSAMEnabledResponse")
            kw["aname"] = "_IMachineDebugger_setCSAMEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_setCSAMEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getLogEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getLogEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getLogEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getLogEnabled")
            kw["aname"] = "_IMachineDebugger_getLogEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getLogEnabled_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getLogEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getLogEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getLogEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getLogEnabledResponse")
            kw["aname"] = "_IMachineDebugger_getLogEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getLogEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setLogEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setLogEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setLogEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="logEnabled", aname="_logEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setLogEnabled")
            kw["aname"] = "_IMachineDebugger_setLogEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logEnabled = None
                    return
            Holder.__name__ = "IMachineDebugger_setLogEnabled_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setLogEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setLogEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setLogEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setLogEnabledResponse")
            kw["aname"] = "_IMachineDebugger_setLogEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_setLogEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getLogDbgFlags_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getLogDbgFlags"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getLogDbgFlags_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getLogDbgFlags")
            kw["aname"] = "_IMachineDebugger_getLogDbgFlags"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getLogDbgFlags_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getLogDbgFlagsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getLogDbgFlagsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getLogDbgFlagsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getLogDbgFlagsResponse")
            kw["aname"] = "_IMachineDebugger_getLogDbgFlagsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getLogDbgFlagsResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getLogDbgGroups_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getLogDbgGroups"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getLogDbgGroups_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getLogDbgGroups")
            kw["aname"] = "_IMachineDebugger_getLogDbgGroups"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getLogDbgGroups_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getLogDbgGroupsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getLogDbgGroupsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getLogDbgGroupsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getLogDbgGroupsResponse")
            kw["aname"] = "_IMachineDebugger_getLogDbgGroupsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getLogDbgGroupsResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getLogDbgDestinations_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getLogDbgDestinations"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getLogDbgDestinations_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getLogDbgDestinations")
            kw["aname"] = "_IMachineDebugger_getLogDbgDestinations"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getLogDbgDestinations_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getLogDbgDestinationsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getLogDbgDestinationsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getLogDbgDestinationsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getLogDbgDestinationsResponse")
            kw["aname"] = "_IMachineDebugger_getLogDbgDestinationsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getLogDbgDestinationsResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getLogRelFlags_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getLogRelFlags"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getLogRelFlags_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getLogRelFlags")
            kw["aname"] = "_IMachineDebugger_getLogRelFlags"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getLogRelFlags_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getLogRelFlagsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getLogRelFlagsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getLogRelFlagsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getLogRelFlagsResponse")
            kw["aname"] = "_IMachineDebugger_getLogRelFlagsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getLogRelFlagsResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getLogRelGroups_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getLogRelGroups"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getLogRelGroups_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getLogRelGroups")
            kw["aname"] = "_IMachineDebugger_getLogRelGroups"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getLogRelGroups_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getLogRelGroupsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getLogRelGroupsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getLogRelGroupsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getLogRelGroupsResponse")
            kw["aname"] = "_IMachineDebugger_getLogRelGroupsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getLogRelGroupsResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getLogRelDestinations_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getLogRelDestinations"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getLogRelDestinations_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getLogRelDestinations")
            kw["aname"] = "_IMachineDebugger_getLogRelDestinations"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getLogRelDestinations_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getLogRelDestinationsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getLogRelDestinationsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getLogRelDestinationsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getLogRelDestinationsResponse")
            kw["aname"] = "_IMachineDebugger_getLogRelDestinationsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getLogRelDestinationsResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getExecutionEngine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getExecutionEngine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getExecutionEngine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getExecutionEngine")
            kw["aname"] = "_IMachineDebugger_getExecutionEngine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getExecutionEngine_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getExecutionEngineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getExecutionEngineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getExecutionEngineResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","VMExecutionEngine",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getExecutionEngineResponse")
            kw["aname"] = "_IMachineDebugger_getExecutionEngineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getExecutionEngineResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getHWVirtExEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getHWVirtExEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getHWVirtExEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getHWVirtExEnabled")
            kw["aname"] = "_IMachineDebugger_getHWVirtExEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getHWVirtExEnabled_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getHWVirtExEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getHWVirtExEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getHWVirtExEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getHWVirtExEnabledResponse")
            kw["aname"] = "_IMachineDebugger_getHWVirtExEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getHWVirtExEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getHWVirtExNestedPagingEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getHWVirtExNestedPagingEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getHWVirtExNestedPagingEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getHWVirtExNestedPagingEnabled")
            kw["aname"] = "_IMachineDebugger_getHWVirtExNestedPagingEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getHWVirtExNestedPagingEnabled_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getHWVirtExNestedPagingEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getHWVirtExNestedPagingEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getHWVirtExNestedPagingEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getHWVirtExNestedPagingEnabledResponse")
            kw["aname"] = "_IMachineDebugger_getHWVirtExNestedPagingEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getHWVirtExNestedPagingEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getHWVirtExVPIDEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getHWVirtExVPIDEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getHWVirtExVPIDEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getHWVirtExVPIDEnabled")
            kw["aname"] = "_IMachineDebugger_getHWVirtExVPIDEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getHWVirtExVPIDEnabled_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getHWVirtExVPIDEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getHWVirtExVPIDEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getHWVirtExVPIDEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getHWVirtExVPIDEnabledResponse")
            kw["aname"] = "_IMachineDebugger_getHWVirtExVPIDEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getHWVirtExVPIDEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getHWVirtExUXEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getHWVirtExUXEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getHWVirtExUXEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getHWVirtExUXEnabled")
            kw["aname"] = "_IMachineDebugger_getHWVirtExUXEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getHWVirtExUXEnabled_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getHWVirtExUXEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getHWVirtExUXEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getHWVirtExUXEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getHWVirtExUXEnabledResponse")
            kw["aname"] = "_IMachineDebugger_getHWVirtExUXEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getHWVirtExUXEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getOSName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getOSName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getOSName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getOSName")
            kw["aname"] = "_IMachineDebugger_getOSName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getOSName_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getOSNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getOSNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getOSNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getOSNameResponse")
            kw["aname"] = "_IMachineDebugger_getOSNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getOSNameResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getOSVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getOSVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getOSVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getOSVersion")
            kw["aname"] = "_IMachineDebugger_getOSVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getOSVersion_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getOSVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getOSVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getOSVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getOSVersionResponse")
            kw["aname"] = "_IMachineDebugger_getOSVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getOSVersionResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getPAEEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getPAEEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getPAEEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getPAEEnabled")
            kw["aname"] = "_IMachineDebugger_getPAEEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getPAEEnabled_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getPAEEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getPAEEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getPAEEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getPAEEnabledResponse")
            kw["aname"] = "_IMachineDebugger_getPAEEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getPAEEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getVirtualTimeRate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getVirtualTimeRate"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getVirtualTimeRate_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getVirtualTimeRate")
            kw["aname"] = "_IMachineDebugger_getVirtualTimeRate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getVirtualTimeRate_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getVirtualTimeRateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getVirtualTimeRateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getVirtualTimeRateResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getVirtualTimeRateResponse")
            kw["aname"] = "_IMachineDebugger_getVirtualTimeRateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getVirtualTimeRateResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setVirtualTimeRate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setVirtualTimeRate"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setVirtualTimeRate_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="virtualTimeRate", aname="_virtualTimeRate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setVirtualTimeRate")
            kw["aname"] = "_IMachineDebugger_setVirtualTimeRate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._virtualTimeRate = None
                    return
            Holder.__name__ = "IMachineDebugger_setVirtualTimeRate_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setVirtualTimeRateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setVirtualTimeRateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setVirtualTimeRateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setVirtualTimeRateResponse")
            kw["aname"] = "_IMachineDebugger_setVirtualTimeRateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_setVirtualTimeRateResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getUptime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getUptime"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getUptime_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getUptime")
            kw["aname"] = "_IMachineDebugger_getUptime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_getUptime_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getUptimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getUptimeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getUptimeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getUptimeResponse")
            kw["aname"] = "_IMachineDebugger_getUptimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getUptimeResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_dumpGuestCore_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_dumpGuestCore"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_dumpGuestCore_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filename", aname="_filename", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="compression", aname="_compression", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_dumpGuestCore")
            kw["aname"] = "_IMachineDebugger_dumpGuestCore"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._filename = None
                    self._compression = None
                    return
            Holder.__name__ = "IMachineDebugger_dumpGuestCore_Holder"
            self.pyclass = Holder

    class IMachineDebugger_dumpGuestCoreResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_dumpGuestCoreResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_dumpGuestCoreResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_dumpGuestCoreResponse")
            kw["aname"] = "_IMachineDebugger_dumpGuestCoreResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_dumpGuestCoreResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_dumpHostProcessCore_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_dumpHostProcessCore"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_dumpHostProcessCore_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filename", aname="_filename", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="compression", aname="_compression", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_dumpHostProcessCore")
            kw["aname"] = "_IMachineDebugger_dumpHostProcessCore"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._filename = None
                    self._compression = None
                    return
            Holder.__name__ = "IMachineDebugger_dumpHostProcessCore_Holder"
            self.pyclass = Holder

    class IMachineDebugger_dumpHostProcessCoreResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_dumpHostProcessCoreResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_dumpHostProcessCoreResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_dumpHostProcessCoreResponse")
            kw["aname"] = "_IMachineDebugger_dumpHostProcessCoreResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_dumpHostProcessCoreResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_info_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_info"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_info_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="args", aname="_args", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_info")
            kw["aname"] = "_IMachineDebugger_info"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._args = None
                    return
            Holder.__name__ = "IMachineDebugger_info_Holder"
            self.pyclass = Holder

    class IMachineDebugger_infoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_infoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_infoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_infoResponse")
            kw["aname"] = "_IMachineDebugger_infoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_infoResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_injectNMI_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_injectNMI"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_injectNMI_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_injectNMI")
            kw["aname"] = "_IMachineDebugger_injectNMI"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_injectNMI_Holder"
            self.pyclass = Holder

    class IMachineDebugger_injectNMIResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_injectNMIResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_injectNMIResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_injectNMIResponse")
            kw["aname"] = "_IMachineDebugger_injectNMIResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_injectNMIResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_modifyLogGroups_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_modifyLogGroups"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_modifyLogGroups_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="settings", aname="_settings", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_modifyLogGroups")
            kw["aname"] = "_IMachineDebugger_modifyLogGroups"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._settings = None
                    return
            Holder.__name__ = "IMachineDebugger_modifyLogGroups_Holder"
            self.pyclass = Holder

    class IMachineDebugger_modifyLogGroupsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_modifyLogGroupsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_modifyLogGroupsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_modifyLogGroupsResponse")
            kw["aname"] = "_IMachineDebugger_modifyLogGroupsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_modifyLogGroupsResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_modifyLogFlags_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_modifyLogFlags"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_modifyLogFlags_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="settings", aname="_settings", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_modifyLogFlags")
            kw["aname"] = "_IMachineDebugger_modifyLogFlags"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._settings = None
                    return
            Holder.__name__ = "IMachineDebugger_modifyLogFlags_Holder"
            self.pyclass = Holder

    class IMachineDebugger_modifyLogFlagsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_modifyLogFlagsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_modifyLogFlagsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_modifyLogFlagsResponse")
            kw["aname"] = "_IMachineDebugger_modifyLogFlagsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_modifyLogFlagsResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_modifyLogDestinations_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_modifyLogDestinations"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_modifyLogDestinations_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="settings", aname="_settings", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_modifyLogDestinations")
            kw["aname"] = "_IMachineDebugger_modifyLogDestinations"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._settings = None
                    return
            Holder.__name__ = "IMachineDebugger_modifyLogDestinations_Holder"
            self.pyclass = Holder

    class IMachineDebugger_modifyLogDestinationsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_modifyLogDestinationsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_modifyLogDestinationsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_modifyLogDestinationsResponse")
            kw["aname"] = "_IMachineDebugger_modifyLogDestinationsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_modifyLogDestinationsResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_readPhysicalMemory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_readPhysicalMemory"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_readPhysicalMemory_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="address", aname="_address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_readPhysicalMemory")
            kw["aname"] = "_IMachineDebugger_readPhysicalMemory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._address = None
                    self._size = None
                    return
            Holder.__name__ = "IMachineDebugger_readPhysicalMemory_Holder"
            self.pyclass = Holder

    class IMachineDebugger_readPhysicalMemoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_readPhysicalMemoryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_readPhysicalMemoryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_readPhysicalMemoryResponse")
            kw["aname"] = "_IMachineDebugger_readPhysicalMemoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_readPhysicalMemoryResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_writePhysicalMemory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_writePhysicalMemory"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_writePhysicalMemory_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="address", aname="_address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bytes", aname="_bytes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_writePhysicalMemory")
            kw["aname"] = "_IMachineDebugger_writePhysicalMemory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._address = None
                    self._size = None
                    self._bytes = None
                    return
            Holder.__name__ = "IMachineDebugger_writePhysicalMemory_Holder"
            self.pyclass = Holder

    class IMachineDebugger_writePhysicalMemoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_writePhysicalMemoryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_writePhysicalMemoryResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_writePhysicalMemoryResponse")
            kw["aname"] = "_IMachineDebugger_writePhysicalMemoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_writePhysicalMemoryResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_readVirtualMemory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_readVirtualMemory"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_readVirtualMemory_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuId", aname="_cpuId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="address", aname="_address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_readVirtualMemory")
            kw["aname"] = "_IMachineDebugger_readVirtualMemory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpuId = None
                    self._address = None
                    self._size = None
                    return
            Holder.__name__ = "IMachineDebugger_readVirtualMemory_Holder"
            self.pyclass = Holder

    class IMachineDebugger_readVirtualMemoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_readVirtualMemoryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_readVirtualMemoryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_readVirtualMemoryResponse")
            kw["aname"] = "_IMachineDebugger_readVirtualMemoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_readVirtualMemoryResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_writeVirtualMemory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_writeVirtualMemory"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_writeVirtualMemory_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuId", aname="_cpuId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="address", aname="_address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bytes", aname="_bytes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_writeVirtualMemory")
            kw["aname"] = "_IMachineDebugger_writeVirtualMemory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpuId = None
                    self._address = None
                    self._size = None
                    self._bytes = None
                    return
            Holder.__name__ = "IMachineDebugger_writeVirtualMemory_Holder"
            self.pyclass = Holder

    class IMachineDebugger_writeVirtualMemoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_writeVirtualMemoryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_writeVirtualMemoryResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_writeVirtualMemoryResponse")
            kw["aname"] = "_IMachineDebugger_writeVirtualMemoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_writeVirtualMemoryResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_loadPlugIn_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_loadPlugIn"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_loadPlugIn_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_loadPlugIn")
            kw["aname"] = "_IMachineDebugger_loadPlugIn"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachineDebugger_loadPlugIn_Holder"
            self.pyclass = Holder

    class IMachineDebugger_loadPlugInResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_loadPlugInResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_loadPlugInResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_loadPlugInResponse")
            kw["aname"] = "_IMachineDebugger_loadPlugInResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_loadPlugInResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_unloadPlugIn_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_unloadPlugIn"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_unloadPlugIn_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_unloadPlugIn")
            kw["aname"] = "_IMachineDebugger_unloadPlugIn"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachineDebugger_unloadPlugIn_Holder"
            self.pyclass = Holder

    class IMachineDebugger_unloadPlugInResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_unloadPlugInResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_unloadPlugInResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_unloadPlugInResponse")
            kw["aname"] = "_IMachineDebugger_unloadPlugInResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_unloadPlugInResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_detectOS_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_detectOS"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_detectOS_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_detectOS")
            kw["aname"] = "_IMachineDebugger_detectOS"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDebugger_detectOS_Holder"
            self.pyclass = Holder

    class IMachineDebugger_detectOSResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_detectOSResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_detectOSResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_detectOSResponse")
            kw["aname"] = "_IMachineDebugger_detectOSResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_detectOSResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_queryOSKernelLog_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_queryOSKernelLog"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_queryOSKernelLog_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxMessages", aname="_maxMessages", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_queryOSKernelLog")
            kw["aname"] = "_IMachineDebugger_queryOSKernelLog"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._maxMessages = None
                    return
            Holder.__name__ = "IMachineDebugger_queryOSKernelLog_Holder"
            self.pyclass = Holder

    class IMachineDebugger_queryOSKernelLogResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_queryOSKernelLogResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_queryOSKernelLogResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_queryOSKernelLogResponse")
            kw["aname"] = "_IMachineDebugger_queryOSKernelLogResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_queryOSKernelLogResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getRegister_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getRegister"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getRegister_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuId", aname="_cpuId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getRegister")
            kw["aname"] = "_IMachineDebugger_getRegister"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpuId = None
                    self._name = None
                    return
            Holder.__name__ = "IMachineDebugger_getRegister_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getRegisterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getRegisterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getRegisterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getRegisterResponse")
            kw["aname"] = "_IMachineDebugger_getRegisterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getRegisterResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getRegisters_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getRegisters"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getRegisters_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuId", aname="_cpuId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getRegisters")
            kw["aname"] = "_IMachineDebugger_getRegisters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpuId = None
                    return
            Holder.__name__ = "IMachineDebugger_getRegisters_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getRegistersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getRegistersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getRegistersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="names", aname="_names", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="values", aname="_values", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getRegistersResponse")
            kw["aname"] = "_IMachineDebugger_getRegistersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._names = []
                    self._values = []
                    return
            Holder.__name__ = "IMachineDebugger_getRegistersResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setRegister_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setRegister"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setRegister_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuId", aname="_cpuId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setRegister")
            kw["aname"] = "_IMachineDebugger_setRegister"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpuId = None
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "IMachineDebugger_setRegister_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setRegisterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setRegisterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setRegisterResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setRegisterResponse")
            kw["aname"] = "_IMachineDebugger_setRegisterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_setRegisterResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setRegisters_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setRegisters"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setRegisters_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuId", aname="_cpuId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="names", aname="_names", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="values", aname="_values", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setRegisters")
            kw["aname"] = "_IMachineDebugger_setRegisters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpuId = None
                    self._names = []
                    self._values = []
                    return
            Holder.__name__ = "IMachineDebugger_setRegisters_Holder"
            self.pyclass = Holder

    class IMachineDebugger_setRegistersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_setRegistersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_setRegistersResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_setRegistersResponse")
            kw["aname"] = "_IMachineDebugger_setRegistersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_setRegistersResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_dumpGuestStack_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_dumpGuestStack"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_dumpGuestStack_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuId", aname="_cpuId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_dumpGuestStack")
            kw["aname"] = "_IMachineDebugger_dumpGuestStack"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpuId = None
                    return
            Holder.__name__ = "IMachineDebugger_dumpGuestStack_Holder"
            self.pyclass = Holder

    class IMachineDebugger_dumpGuestStackResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_dumpGuestStackResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_dumpGuestStackResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_dumpGuestStackResponse")
            kw["aname"] = "_IMachineDebugger_dumpGuestStackResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_dumpGuestStackResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_resetStats_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_resetStats"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_resetStats_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pattern", aname="_pattern", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_resetStats")
            kw["aname"] = "_IMachineDebugger_resetStats"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._pattern = None
                    return
            Holder.__name__ = "IMachineDebugger_resetStats_Holder"
            self.pyclass = Holder

    class IMachineDebugger_resetStatsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_resetStatsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_resetStatsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_resetStatsResponse")
            kw["aname"] = "_IMachineDebugger_resetStatsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_resetStatsResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_dumpStats_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_dumpStats"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_dumpStats_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pattern", aname="_pattern", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_dumpStats")
            kw["aname"] = "_IMachineDebugger_dumpStats"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._pattern = None
                    return
            Holder.__name__ = "IMachineDebugger_dumpStats_Holder"
            self.pyclass = Holder

    class IMachineDebugger_dumpStatsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_dumpStatsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_dumpStatsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_dumpStatsResponse")
            kw["aname"] = "_IMachineDebugger_dumpStatsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachineDebugger_dumpStatsResponse_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getStats_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getStats"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getStats_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pattern", aname="_pattern", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="withDescriptions", aname="_withDescriptions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getStats")
            kw["aname"] = "_IMachineDebugger_getStats"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._pattern = None
                    self._withDescriptions = None
                    return
            Holder.__name__ = "IMachineDebugger_getStats_Holder"
            self.pyclass = Holder

    class IMachineDebugger_getStatsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDebugger_getStatsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDebugger_getStatsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDebugger_getStatsResponse")
            kw["aname"] = "_IMachineDebugger_getStatsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDebugger_getStatsResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilters_getDeviceFilters_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilters_getDeviceFilters"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilters_getDeviceFilters_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilters_getDeviceFilters")
            kw["aname"] = "_IUSBDeviceFilters_getDeviceFilters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilters_getDeviceFilters_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilters_getDeviceFiltersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilters_getDeviceFiltersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilters_getDeviceFiltersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilters_getDeviceFiltersResponse")
            kw["aname"] = "_IUSBDeviceFilters_getDeviceFiltersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IUSBDeviceFilters_getDeviceFiltersResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilters_createDeviceFilter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilters_createDeviceFilter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilters_createDeviceFilter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilters_createDeviceFilter")
            kw["aname"] = "_IUSBDeviceFilters_createDeviceFilter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IUSBDeviceFilters_createDeviceFilter_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilters_createDeviceFilterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilters_createDeviceFilterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilters_createDeviceFilterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilters_createDeviceFilterResponse")
            kw["aname"] = "_IUSBDeviceFilters_createDeviceFilterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilters_createDeviceFilterResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilters_insertDeviceFilter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilters_insertDeviceFilter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilters_insertDeviceFilter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filter", aname="_filter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilters_insertDeviceFilter")
            kw["aname"] = "_IUSBDeviceFilters_insertDeviceFilter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._position = None
                    self._filter = None
                    return
            Holder.__name__ = "IUSBDeviceFilters_insertDeviceFilter_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilters_insertDeviceFilterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilters_insertDeviceFilterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilters_insertDeviceFilterResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilters_insertDeviceFilterResponse")
            kw["aname"] = "_IUSBDeviceFilters_insertDeviceFilterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilters_insertDeviceFilterResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilters_removeDeviceFilter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilters_removeDeviceFilter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilters_removeDeviceFilter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilters_removeDeviceFilter")
            kw["aname"] = "_IUSBDeviceFilters_removeDeviceFilter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._position = None
                    return
            Holder.__name__ = "IUSBDeviceFilters_removeDeviceFilter_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilters_removeDeviceFilterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilters_removeDeviceFilterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilters_removeDeviceFilterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilters_removeDeviceFilterResponse")
            kw["aname"] = "_IUSBDeviceFilters_removeDeviceFilterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilters_removeDeviceFilterResponse_Holder"
            self.pyclass = Holder

    class IUSBController_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getName")
            kw["aname"] = "_IUSBController_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBController_getName_Holder"
            self.pyclass = Holder

    class IUSBController_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getNameResponse")
            kw["aname"] = "_IUSBController_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBController_getNameResponse_Holder"
            self.pyclass = Holder

    class IUSBController_setName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_setName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_setName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_setName")
            kw["aname"] = "_IUSBController_setName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IUSBController_setName_Holder"
            self.pyclass = Holder

    class IUSBController_setNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_setNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_setNameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_setNameResponse")
            kw["aname"] = "_IUSBController_setNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBController_setNameResponse_Holder"
            self.pyclass = Holder

    class IUSBController_getType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getType")
            kw["aname"] = "_IUSBController_getType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBController_getType_Holder"
            self.pyclass = Holder

    class IUSBController_getTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","USBControllerType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getTypeResponse")
            kw["aname"] = "_IUSBController_getTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBController_getTypeResponse_Holder"
            self.pyclass = Holder

    class IUSBController_setType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_setType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_setType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","USBControllerType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_setType")
            kw["aname"] = "_IUSBController_setType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._type = None
                    return
            Holder.__name__ = "IUSBController_setType_Holder"
            self.pyclass = Holder

    class IUSBController_setTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_setTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_setTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_setTypeResponse")
            kw["aname"] = "_IUSBController_setTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBController_setTypeResponse_Holder"
            self.pyclass = Holder

    class IUSBController_getUSBStandard_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getUSBStandard"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getUSBStandard_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getUSBStandard")
            kw["aname"] = "_IUSBController_getUSBStandard"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBController_getUSBStandard_Holder"
            self.pyclass = Holder

    class IUSBController_getUSBStandardResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getUSBStandardResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getUSBStandardResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getUSBStandardResponse")
            kw["aname"] = "_IUSBController_getUSBStandardResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBController_getUSBStandardResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getId")
            kw["aname"] = "_IUSBDevice_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getId_Holder"
            self.pyclass = Holder

    class IUSBDevice_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getIdResponse")
            kw["aname"] = "_IUSBDevice_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getIdResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getVendorId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getVendorId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getVendorId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getVendorId")
            kw["aname"] = "_IUSBDevice_getVendorId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getVendorId_Holder"
            self.pyclass = Holder

    class IUSBDevice_getVendorIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getVendorIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getVendorIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getVendorIdResponse")
            kw["aname"] = "_IUSBDevice_getVendorIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getVendorIdResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getProductId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getProductId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getProductId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getProductId")
            kw["aname"] = "_IUSBDevice_getProductId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getProductId_Holder"
            self.pyclass = Holder

    class IUSBDevice_getProductIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getProductIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getProductIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getProductIdResponse")
            kw["aname"] = "_IUSBDevice_getProductIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getProductIdResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getRevision_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getRevision"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getRevision_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getRevision")
            kw["aname"] = "_IUSBDevice_getRevision"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getRevision_Holder"
            self.pyclass = Holder

    class IUSBDevice_getRevisionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getRevisionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getRevisionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getRevisionResponse")
            kw["aname"] = "_IUSBDevice_getRevisionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getRevisionResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getManufacturer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getManufacturer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getManufacturer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getManufacturer")
            kw["aname"] = "_IUSBDevice_getManufacturer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getManufacturer_Holder"
            self.pyclass = Holder

    class IUSBDevice_getManufacturerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getManufacturerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getManufacturerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getManufacturerResponse")
            kw["aname"] = "_IUSBDevice_getManufacturerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getManufacturerResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getProduct_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getProduct"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getProduct_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getProduct")
            kw["aname"] = "_IUSBDevice_getProduct"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getProduct_Holder"
            self.pyclass = Holder

    class IUSBDevice_getProductResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getProductResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getProductResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getProductResponse")
            kw["aname"] = "_IUSBDevice_getProductResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getProductResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getSerialNumber_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getSerialNumber"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getSerialNumber_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getSerialNumber")
            kw["aname"] = "_IUSBDevice_getSerialNumber"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getSerialNumber_Holder"
            self.pyclass = Holder

    class IUSBDevice_getSerialNumberResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getSerialNumberResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getSerialNumberResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getSerialNumberResponse")
            kw["aname"] = "_IUSBDevice_getSerialNumberResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getSerialNumberResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getAddress")
            kw["aname"] = "_IUSBDevice_getAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getAddress_Holder"
            self.pyclass = Holder

    class IUSBDevice_getAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getAddressResponse")
            kw["aname"] = "_IUSBDevice_getAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getAddressResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getPort")
            kw["aname"] = "_IUSBDevice_getPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getPort_Holder"
            self.pyclass = Holder

    class IUSBDevice_getPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getPortResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getPortResponse")
            kw["aname"] = "_IUSBDevice_getPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getPortResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getVersion")
            kw["aname"] = "_IUSBDevice_getVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getVersion_Holder"
            self.pyclass = Holder

    class IUSBDevice_getVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getVersionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getVersionResponse")
            kw["aname"] = "_IUSBDevice_getVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getVersionResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getPortVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getPortVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getPortVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getPortVersion")
            kw["aname"] = "_IUSBDevice_getPortVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getPortVersion_Holder"
            self.pyclass = Holder

    class IUSBDevice_getPortVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getPortVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getPortVersionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getPortVersionResponse")
            kw["aname"] = "_IUSBDevice_getPortVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getPortVersionResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getSpeed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getSpeed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getSpeed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getSpeed")
            kw["aname"] = "_IUSBDevice_getSpeed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getSpeed_Holder"
            self.pyclass = Holder

    class IUSBDevice_getSpeedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getSpeedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getSpeedResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","USBConnectionSpeed",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getSpeedResponse")
            kw["aname"] = "_IUSBDevice_getSpeedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getSpeedResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getRemote_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getRemote"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getRemote_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getRemote")
            kw["aname"] = "_IUSBDevice_getRemote"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getRemote_Holder"
            self.pyclass = Holder

    class IUSBDevice_getRemoteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getRemoteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getRemoteResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getRemoteResponse")
            kw["aname"] = "_IUSBDevice_getRemoteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getRemoteResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getDeviceInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getDeviceInfo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getDeviceInfo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getDeviceInfo")
            kw["aname"] = "_IUSBDevice_getDeviceInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getDeviceInfo_Holder"
            self.pyclass = Holder

    class IUSBDevice_getDeviceInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getDeviceInfoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getDeviceInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getDeviceInfoResponse")
            kw["aname"] = "_IUSBDevice_getDeviceInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IUSBDevice_getDeviceInfoResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getBackend_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getBackend"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getBackend_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getBackend")
            kw["aname"] = "_IUSBDevice_getBackend"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getBackend_Holder"
            self.pyclass = Holder

    class IUSBDevice_getBackendResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getBackendResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getBackendResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getBackendResponse")
            kw["aname"] = "_IUSBDevice_getBackendResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getBackendResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getName")
            kw["aname"] = "_IUSBDeviceFilter_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getName_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getNameResponse")
            kw["aname"] = "_IUSBDeviceFilter_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getNameResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setName")
            kw["aname"] = "_IUSBDeviceFilter_setName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setName_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setNameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setNameResponse")
            kw["aname"] = "_IUSBDeviceFilter_setNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setNameResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getActive_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getActive"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getActive_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getActive")
            kw["aname"] = "_IUSBDeviceFilter_getActive"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getActive_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getActiveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getActiveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getActiveResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getActiveResponse")
            kw["aname"] = "_IUSBDeviceFilter_getActiveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getActiveResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setActive_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setActive"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setActive_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="active", aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setActive")
            kw["aname"] = "_IUSBDeviceFilter_setActive"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._active = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setActive_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setActiveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setActiveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setActiveResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setActiveResponse")
            kw["aname"] = "_IUSBDeviceFilter_setActiveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setActiveResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getVendorId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getVendorId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getVendorId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getVendorId")
            kw["aname"] = "_IUSBDeviceFilter_getVendorId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getVendorId_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getVendorIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getVendorIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getVendorIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getVendorIdResponse")
            kw["aname"] = "_IUSBDeviceFilter_getVendorIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getVendorIdResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setVendorId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setVendorId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setVendorId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vendorId", aname="_vendorId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setVendorId")
            kw["aname"] = "_IUSBDeviceFilter_setVendorId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._vendorId = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setVendorId_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setVendorIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setVendorIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setVendorIdResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setVendorIdResponse")
            kw["aname"] = "_IUSBDeviceFilter_setVendorIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setVendorIdResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getProductId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getProductId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getProductId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getProductId")
            kw["aname"] = "_IUSBDeviceFilter_getProductId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getProductId_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getProductIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getProductIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getProductIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getProductIdResponse")
            kw["aname"] = "_IUSBDeviceFilter_getProductIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getProductIdResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setProductId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setProductId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setProductId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="productId", aname="_productId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setProductId")
            kw["aname"] = "_IUSBDeviceFilter_setProductId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._productId = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setProductId_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setProductIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setProductIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setProductIdResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setProductIdResponse")
            kw["aname"] = "_IUSBDeviceFilter_setProductIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setProductIdResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getRevision_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getRevision"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getRevision_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getRevision")
            kw["aname"] = "_IUSBDeviceFilter_getRevision"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getRevision_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getRevisionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getRevisionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getRevisionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getRevisionResponse")
            kw["aname"] = "_IUSBDeviceFilter_getRevisionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getRevisionResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setRevision_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setRevision"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setRevision_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="revision", aname="_revision", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setRevision")
            kw["aname"] = "_IUSBDeviceFilter_setRevision"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._revision = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setRevision_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setRevisionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setRevisionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setRevisionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setRevisionResponse")
            kw["aname"] = "_IUSBDeviceFilter_setRevisionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setRevisionResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getManufacturer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getManufacturer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getManufacturer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getManufacturer")
            kw["aname"] = "_IUSBDeviceFilter_getManufacturer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getManufacturer_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getManufacturerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getManufacturerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getManufacturerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getManufacturerResponse")
            kw["aname"] = "_IUSBDeviceFilter_getManufacturerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getManufacturerResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setManufacturer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setManufacturer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setManufacturer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="manufacturer", aname="_manufacturer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setManufacturer")
            kw["aname"] = "_IUSBDeviceFilter_setManufacturer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._manufacturer = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setManufacturer_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setManufacturerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setManufacturerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setManufacturerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setManufacturerResponse")
            kw["aname"] = "_IUSBDeviceFilter_setManufacturerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setManufacturerResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getProduct_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getProduct"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getProduct_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getProduct")
            kw["aname"] = "_IUSBDeviceFilter_getProduct"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getProduct_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getProductResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getProductResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getProductResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getProductResponse")
            kw["aname"] = "_IUSBDeviceFilter_getProductResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getProductResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setProduct_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setProduct"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setProduct_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="product", aname="_product", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setProduct")
            kw["aname"] = "_IUSBDeviceFilter_setProduct"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._product = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setProduct_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setProductResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setProductResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setProductResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setProductResponse")
            kw["aname"] = "_IUSBDeviceFilter_setProductResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setProductResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getSerialNumber_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getSerialNumber"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getSerialNumber_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getSerialNumber")
            kw["aname"] = "_IUSBDeviceFilter_getSerialNumber"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getSerialNumber_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getSerialNumberResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getSerialNumberResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getSerialNumberResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getSerialNumberResponse")
            kw["aname"] = "_IUSBDeviceFilter_getSerialNumberResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getSerialNumberResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setSerialNumber_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setSerialNumber"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setSerialNumber_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serialNumber", aname="_serialNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setSerialNumber")
            kw["aname"] = "_IUSBDeviceFilter_setSerialNumber"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._serialNumber = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setSerialNumber_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setSerialNumberResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setSerialNumberResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setSerialNumberResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setSerialNumberResponse")
            kw["aname"] = "_IUSBDeviceFilter_setSerialNumberResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setSerialNumberResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getPort")
            kw["aname"] = "_IUSBDeviceFilter_getPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getPort_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getPortResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getPortResponse")
            kw["aname"] = "_IUSBDeviceFilter_getPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getPortResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="port", aname="_port", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setPort")
            kw["aname"] = "_IUSBDeviceFilter_setPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._port = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setPort_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setPortResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setPortResponse")
            kw["aname"] = "_IUSBDeviceFilter_setPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setPortResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getRemote_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getRemote"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getRemote_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getRemote")
            kw["aname"] = "_IUSBDeviceFilter_getRemote"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getRemote_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getRemoteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getRemoteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getRemoteResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getRemoteResponse")
            kw["aname"] = "_IUSBDeviceFilter_getRemoteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getRemoteResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setRemote_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setRemote"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setRemote_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="remote", aname="_remote", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setRemote")
            kw["aname"] = "_IUSBDeviceFilter_setRemote"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._remote = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setRemote_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setRemoteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setRemoteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setRemoteResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setRemoteResponse")
            kw["aname"] = "_IUSBDeviceFilter_setRemoteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setRemoteResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getMaskedInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getMaskedInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getMaskedInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getMaskedInterfaces")
            kw["aname"] = "_IUSBDeviceFilter_getMaskedInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getMaskedInterfaces_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getMaskedInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getMaskedInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getMaskedInterfacesResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getMaskedInterfacesResponse")
            kw["aname"] = "_IUSBDeviceFilter_getMaskedInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getMaskedInterfacesResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setMaskedInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setMaskedInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setMaskedInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maskedInterfaces", aname="_maskedInterfaces", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setMaskedInterfaces")
            kw["aname"] = "_IUSBDeviceFilter_setMaskedInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._maskedInterfaces = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setMaskedInterfaces_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setMaskedInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setMaskedInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setMaskedInterfacesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setMaskedInterfacesResponse")
            kw["aname"] = "_IUSBDeviceFilter_setMaskedInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setMaskedInterfacesResponse_Holder"
            self.pyclass = Holder

    class IHostUSBDevice_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostUSBDevice_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostUSBDevice_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostUSBDevice_getState")
            kw["aname"] = "_IHostUSBDevice_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostUSBDevice_getState_Holder"
            self.pyclass = Holder

    class IHostUSBDevice_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostUSBDevice_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostUSBDevice_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","USBDeviceState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostUSBDevice_getStateResponse")
            kw["aname"] = "_IHostUSBDevice_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostUSBDevice_getStateResponse_Holder"
            self.pyclass = Holder

    class IHostUSBDeviceFilter_getAction_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostUSBDeviceFilter_getAction"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostUSBDeviceFilter_getAction_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostUSBDeviceFilter_getAction")
            kw["aname"] = "_IHostUSBDeviceFilter_getAction"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostUSBDeviceFilter_getAction_Holder"
            self.pyclass = Holder

    class IHostUSBDeviceFilter_getActionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostUSBDeviceFilter_getActionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostUSBDeviceFilter_getActionResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","USBDeviceFilterAction",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostUSBDeviceFilter_getActionResponse")
            kw["aname"] = "_IHostUSBDeviceFilter_getActionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostUSBDeviceFilter_getActionResponse_Holder"
            self.pyclass = Holder

    class IHostUSBDeviceFilter_setAction_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostUSBDeviceFilter_setAction"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostUSBDeviceFilter_setAction_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","USBDeviceFilterAction",lazy=False)(pname="action", aname="_action", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostUSBDeviceFilter_setAction")
            kw["aname"] = "_IHostUSBDeviceFilter_setAction"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._action = None
                    return
            Holder.__name__ = "IHostUSBDeviceFilter_setAction_Holder"
            self.pyclass = Holder

    class IHostUSBDeviceFilter_setActionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostUSBDeviceFilter_setActionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostUSBDeviceFilter_setActionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHostUSBDeviceFilter_setActionResponse")
            kw["aname"] = "_IHostUSBDeviceFilter_setActionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHostUSBDeviceFilter_setActionResponse_Holder"
            self.pyclass = Holder

    class IUSBProxyBackend_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBProxyBackend_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBProxyBackend_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBProxyBackend_getName")
            kw["aname"] = "_IUSBProxyBackend_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBProxyBackend_getName_Holder"
            self.pyclass = Holder

    class IUSBProxyBackend_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBProxyBackend_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBProxyBackend_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBProxyBackend_getNameResponse")
            kw["aname"] = "_IUSBProxyBackend_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBProxyBackend_getNameResponse_Holder"
            self.pyclass = Holder

    class IUSBProxyBackend_getType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBProxyBackend_getType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBProxyBackend_getType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBProxyBackend_getType")
            kw["aname"] = "_IUSBProxyBackend_getType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBProxyBackend_getType_Holder"
            self.pyclass = Holder

    class IUSBProxyBackend_getTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBProxyBackend_getTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBProxyBackend_getTypeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBProxyBackend_getTypeResponse")
            kw["aname"] = "_IUSBProxyBackend_getTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBProxyBackend_getTypeResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getEnabled")
            kw["aname"] = "_IAudioAdapter_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAudioAdapter_getEnabled_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getEnabledResponse")
            kw["aname"] = "_IAudioAdapter_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAudioAdapter_getEnabledResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setEnabled")
            kw["aname"] = "_IAudioAdapter_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "IAudioAdapter_setEnabled_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setEnabledResponse")
            kw["aname"] = "_IAudioAdapter_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IAudioAdapter_setEnabledResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getEnabledIn_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getEnabledIn"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getEnabledIn_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getEnabledIn")
            kw["aname"] = "_IAudioAdapter_getEnabledIn"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAudioAdapter_getEnabledIn_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getEnabledInResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getEnabledInResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getEnabledInResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getEnabledInResponse")
            kw["aname"] = "_IAudioAdapter_getEnabledInResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAudioAdapter_getEnabledInResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setEnabledIn_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setEnabledIn"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setEnabledIn_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabledIn", aname="_enabledIn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setEnabledIn")
            kw["aname"] = "_IAudioAdapter_setEnabledIn"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabledIn = None
                    return
            Holder.__name__ = "IAudioAdapter_setEnabledIn_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setEnabledInResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setEnabledInResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setEnabledInResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setEnabledInResponse")
            kw["aname"] = "_IAudioAdapter_setEnabledInResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IAudioAdapter_setEnabledInResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getEnabledOut_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getEnabledOut"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getEnabledOut_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getEnabledOut")
            kw["aname"] = "_IAudioAdapter_getEnabledOut"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAudioAdapter_getEnabledOut_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getEnabledOutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getEnabledOutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getEnabledOutResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getEnabledOutResponse")
            kw["aname"] = "_IAudioAdapter_getEnabledOutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAudioAdapter_getEnabledOutResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setEnabledOut_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setEnabledOut"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setEnabledOut_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabledOut", aname="_enabledOut", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setEnabledOut")
            kw["aname"] = "_IAudioAdapter_setEnabledOut"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabledOut = None
                    return
            Holder.__name__ = "IAudioAdapter_setEnabledOut_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setEnabledOutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setEnabledOutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setEnabledOutResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setEnabledOutResponse")
            kw["aname"] = "_IAudioAdapter_setEnabledOutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IAudioAdapter_setEnabledOutResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getAudioController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getAudioController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getAudioController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getAudioController")
            kw["aname"] = "_IAudioAdapter_getAudioController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAudioAdapter_getAudioController_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getAudioControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getAudioControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getAudioControllerResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AudioControllerType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getAudioControllerResponse")
            kw["aname"] = "_IAudioAdapter_getAudioControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAudioAdapter_getAudioControllerResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setAudioController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setAudioController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setAudioController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AudioControllerType",lazy=False)(pname="audioController", aname="_audioController", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setAudioController")
            kw["aname"] = "_IAudioAdapter_setAudioController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._audioController = None
                    return
            Holder.__name__ = "IAudioAdapter_setAudioController_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setAudioControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setAudioControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setAudioControllerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setAudioControllerResponse")
            kw["aname"] = "_IAudioAdapter_setAudioControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IAudioAdapter_setAudioControllerResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getAudioCodec_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getAudioCodec"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getAudioCodec_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getAudioCodec")
            kw["aname"] = "_IAudioAdapter_getAudioCodec"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAudioAdapter_getAudioCodec_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getAudioCodecResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getAudioCodecResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getAudioCodecResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AudioCodecType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getAudioCodecResponse")
            kw["aname"] = "_IAudioAdapter_getAudioCodecResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAudioAdapter_getAudioCodecResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setAudioCodec_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setAudioCodec"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setAudioCodec_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AudioCodecType",lazy=False)(pname="audioCodec", aname="_audioCodec", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setAudioCodec")
            kw["aname"] = "_IAudioAdapter_setAudioCodec"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._audioCodec = None
                    return
            Holder.__name__ = "IAudioAdapter_setAudioCodec_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setAudioCodecResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setAudioCodecResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setAudioCodecResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setAudioCodecResponse")
            kw["aname"] = "_IAudioAdapter_setAudioCodecResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IAudioAdapter_setAudioCodecResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getAudioDriver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getAudioDriver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getAudioDriver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getAudioDriver")
            kw["aname"] = "_IAudioAdapter_getAudioDriver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAudioAdapter_getAudioDriver_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getAudioDriverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getAudioDriverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getAudioDriverResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AudioDriverType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getAudioDriverResponse")
            kw["aname"] = "_IAudioAdapter_getAudioDriverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAudioAdapter_getAudioDriverResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setAudioDriver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setAudioDriver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setAudioDriver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AudioDriverType",lazy=False)(pname="audioDriver", aname="_audioDriver", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setAudioDriver")
            kw["aname"] = "_IAudioAdapter_setAudioDriver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._audioDriver = None
                    return
            Holder.__name__ = "IAudioAdapter_setAudioDriver_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setAudioDriverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setAudioDriverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setAudioDriverResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setAudioDriverResponse")
            kw["aname"] = "_IAudioAdapter_setAudioDriverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IAudioAdapter_setAudioDriverResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getPropertiesList_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getPropertiesList"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getPropertiesList_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getPropertiesList")
            kw["aname"] = "_IAudioAdapter_getPropertiesList"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAudioAdapter_getPropertiesList_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getPropertiesListResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getPropertiesListResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getPropertiesListResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getPropertiesListResponse")
            kw["aname"] = "_IAudioAdapter_getPropertiesListResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IAudioAdapter_getPropertiesListResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setProperty")
            kw["aname"] = "_IAudioAdapter_setProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "IAudioAdapter_setProperty_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setPropertyResponse")
            kw["aname"] = "_IAudioAdapter_setPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IAudioAdapter_setPropertyResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getProperty")
            kw["aname"] = "_IAudioAdapter_getProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    return
            Holder.__name__ = "IAudioAdapter_getProperty_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getPropertyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getPropertyResponse")
            kw["aname"] = "_IAudioAdapter_getPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAudioAdapter_getPropertyResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getEnabled")
            kw["aname"] = "_IVRDEServer_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getEnabled_Holder"
            self.pyclass = Holder

    class IVRDEServer_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getEnabledResponse")
            kw["aname"] = "_IVRDEServer_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getEnabledResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setEnabled")
            kw["aname"] = "_IVRDEServer_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "IVRDEServer_setEnabled_Holder"
            self.pyclass = Holder

    class IVRDEServer_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setEnabledResponse")
            kw["aname"] = "_IVRDEServer_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setEnabledResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAuthType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAuthType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAuthType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAuthType")
            kw["aname"] = "_IVRDEServer_getAuthType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getAuthType_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAuthTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAuthTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAuthTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AuthType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAuthTypeResponse")
            kw["aname"] = "_IVRDEServer_getAuthTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getAuthTypeResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAuthType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAuthType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAuthType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AuthType",lazy=False)(pname="authType", aname="_authType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAuthType")
            kw["aname"] = "_IVRDEServer_setAuthType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._authType = None
                    return
            Holder.__name__ = "IVRDEServer_setAuthType_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAuthTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAuthTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAuthTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAuthTypeResponse")
            kw["aname"] = "_IVRDEServer_setAuthTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setAuthTypeResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAuthTimeout_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAuthTimeout"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAuthTimeout_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAuthTimeout")
            kw["aname"] = "_IVRDEServer_getAuthTimeout"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getAuthTimeout_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAuthTimeoutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAuthTimeoutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAuthTimeoutResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAuthTimeoutResponse")
            kw["aname"] = "_IVRDEServer_getAuthTimeoutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getAuthTimeoutResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAuthTimeout_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAuthTimeout"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAuthTimeout_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="authTimeout", aname="_authTimeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAuthTimeout")
            kw["aname"] = "_IVRDEServer_setAuthTimeout"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._authTimeout = None
                    return
            Holder.__name__ = "IVRDEServer_setAuthTimeout_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAuthTimeoutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAuthTimeoutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAuthTimeoutResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAuthTimeoutResponse")
            kw["aname"] = "_IVRDEServer_setAuthTimeoutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setAuthTimeoutResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAllowMultiConnection_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAllowMultiConnection"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAllowMultiConnection_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAllowMultiConnection")
            kw["aname"] = "_IVRDEServer_getAllowMultiConnection"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getAllowMultiConnection_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAllowMultiConnectionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAllowMultiConnectionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAllowMultiConnectionResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAllowMultiConnectionResponse")
            kw["aname"] = "_IVRDEServer_getAllowMultiConnectionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getAllowMultiConnectionResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAllowMultiConnection_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAllowMultiConnection"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAllowMultiConnection_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="allowMultiConnection", aname="_allowMultiConnection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAllowMultiConnection")
            kw["aname"] = "_IVRDEServer_setAllowMultiConnection"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._allowMultiConnection = None
                    return
            Holder.__name__ = "IVRDEServer_setAllowMultiConnection_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAllowMultiConnectionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAllowMultiConnectionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAllowMultiConnectionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAllowMultiConnectionResponse")
            kw["aname"] = "_IVRDEServer_setAllowMultiConnectionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setAllowMultiConnectionResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getReuseSingleConnection_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getReuseSingleConnection"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getReuseSingleConnection_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getReuseSingleConnection")
            kw["aname"] = "_IVRDEServer_getReuseSingleConnection"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getReuseSingleConnection_Holder"
            self.pyclass = Holder

    class IVRDEServer_getReuseSingleConnectionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getReuseSingleConnectionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getReuseSingleConnectionResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getReuseSingleConnectionResponse")
            kw["aname"] = "_IVRDEServer_getReuseSingleConnectionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getReuseSingleConnectionResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setReuseSingleConnection_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setReuseSingleConnection"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setReuseSingleConnection_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="reuseSingleConnection", aname="_reuseSingleConnection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setReuseSingleConnection")
            kw["aname"] = "_IVRDEServer_setReuseSingleConnection"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._reuseSingleConnection = None
                    return
            Holder.__name__ = "IVRDEServer_setReuseSingleConnection_Holder"
            self.pyclass = Holder

    class IVRDEServer_setReuseSingleConnectionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setReuseSingleConnectionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setReuseSingleConnectionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setReuseSingleConnectionResponse")
            kw["aname"] = "_IVRDEServer_setReuseSingleConnectionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setReuseSingleConnectionResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getVRDEExtPack_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getVRDEExtPack"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getVRDEExtPack_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getVRDEExtPack")
            kw["aname"] = "_IVRDEServer_getVRDEExtPack"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getVRDEExtPack_Holder"
            self.pyclass = Holder

    class IVRDEServer_getVRDEExtPackResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getVRDEExtPackResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getVRDEExtPackResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getVRDEExtPackResponse")
            kw["aname"] = "_IVRDEServer_getVRDEExtPackResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getVRDEExtPackResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setVRDEExtPack_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setVRDEExtPack"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setVRDEExtPack_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="VRDEExtPack", aname="_VRDEExtPack", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setVRDEExtPack")
            kw["aname"] = "_IVRDEServer_setVRDEExtPack"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._VRDEExtPack = None
                    return
            Holder.__name__ = "IVRDEServer_setVRDEExtPack_Holder"
            self.pyclass = Holder

    class IVRDEServer_setVRDEExtPackResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setVRDEExtPackResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setVRDEExtPackResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setVRDEExtPackResponse")
            kw["aname"] = "_IVRDEServer_setVRDEExtPackResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setVRDEExtPackResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAuthLibrary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAuthLibrary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAuthLibrary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAuthLibrary")
            kw["aname"] = "_IVRDEServer_getAuthLibrary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getAuthLibrary_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAuthLibraryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAuthLibraryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAuthLibraryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAuthLibraryResponse")
            kw["aname"] = "_IVRDEServer_getAuthLibraryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getAuthLibraryResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAuthLibrary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAuthLibrary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAuthLibrary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authLibrary", aname="_authLibrary", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAuthLibrary")
            kw["aname"] = "_IVRDEServer_setAuthLibrary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._authLibrary = None
                    return
            Holder.__name__ = "IVRDEServer_setAuthLibrary_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAuthLibraryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAuthLibraryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAuthLibraryResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAuthLibraryResponse")
            kw["aname"] = "_IVRDEServer_setAuthLibraryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setAuthLibraryResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getVRDEProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getVRDEProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getVRDEProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getVRDEProperties")
            kw["aname"] = "_IVRDEServer_getVRDEProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getVRDEProperties_Holder"
            self.pyclass = Holder

    class IVRDEServer_getVRDEPropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getVRDEPropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getVRDEPropertiesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getVRDEPropertiesResponse")
            kw["aname"] = "_IVRDEServer_getVRDEPropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVRDEServer_getVRDEPropertiesResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setVRDEProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setVRDEProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setVRDEProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setVRDEProperty")
            kw["aname"] = "_IVRDEServer_setVRDEProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "IVRDEServer_setVRDEProperty_Holder"
            self.pyclass = Holder

    class IVRDEServer_setVRDEPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setVRDEPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setVRDEPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setVRDEPropertyResponse")
            kw["aname"] = "_IVRDEServer_setVRDEPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setVRDEPropertyResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getVRDEProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getVRDEProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getVRDEProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getVRDEProperty")
            kw["aname"] = "_IVRDEServer_getVRDEProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    return
            Holder.__name__ = "IVRDEServer_getVRDEProperty_Holder"
            self.pyclass = Holder

    class IVRDEServer_getVRDEPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getVRDEPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getVRDEPropertyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getVRDEPropertyResponse")
            kw["aname"] = "_IVRDEServer_getVRDEPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getVRDEPropertyResponse_Holder"
            self.pyclass = Holder

    class ISharedFolder_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_getName")
            kw["aname"] = "_ISharedFolder_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISharedFolder_getName_Holder"
            self.pyclass = Holder

    class ISharedFolder_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_getNameResponse")
            kw["aname"] = "_ISharedFolder_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISharedFolder_getNameResponse_Holder"
            self.pyclass = Holder

    class ISharedFolder_getHostPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_getHostPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_getHostPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_getHostPath")
            kw["aname"] = "_ISharedFolder_getHostPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISharedFolder_getHostPath_Holder"
            self.pyclass = Holder

    class ISharedFolder_getHostPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_getHostPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_getHostPathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_getHostPathResponse")
            kw["aname"] = "_ISharedFolder_getHostPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISharedFolder_getHostPathResponse_Holder"
            self.pyclass = Holder

    class ISharedFolder_getAccessible_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_getAccessible"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_getAccessible_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_getAccessible")
            kw["aname"] = "_ISharedFolder_getAccessible"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISharedFolder_getAccessible_Holder"
            self.pyclass = Holder

    class ISharedFolder_getAccessibleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_getAccessibleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_getAccessibleResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_getAccessibleResponse")
            kw["aname"] = "_ISharedFolder_getAccessibleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISharedFolder_getAccessibleResponse_Holder"
            self.pyclass = Holder

    class ISharedFolder_getWritable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_getWritable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_getWritable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_getWritable")
            kw["aname"] = "_ISharedFolder_getWritable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISharedFolder_getWritable_Holder"
            self.pyclass = Holder

    class ISharedFolder_getWritableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_getWritableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_getWritableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_getWritableResponse")
            kw["aname"] = "_ISharedFolder_getWritableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISharedFolder_getWritableResponse_Holder"
            self.pyclass = Holder

    class ISharedFolder_setWritable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_setWritable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_setWritable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="writable", aname="_writable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_setWritable")
            kw["aname"] = "_ISharedFolder_setWritable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._writable = None
                    return
            Holder.__name__ = "ISharedFolder_setWritable_Holder"
            self.pyclass = Holder

    class ISharedFolder_setWritableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_setWritableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_setWritableResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_setWritableResponse")
            kw["aname"] = "_ISharedFolder_setWritableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISharedFolder_setWritableResponse_Holder"
            self.pyclass = Holder

    class ISharedFolder_getAutoMount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_getAutoMount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_getAutoMount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_getAutoMount")
            kw["aname"] = "_ISharedFolder_getAutoMount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISharedFolder_getAutoMount_Holder"
            self.pyclass = Holder

    class ISharedFolder_getAutoMountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_getAutoMountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_getAutoMountResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_getAutoMountResponse")
            kw["aname"] = "_ISharedFolder_getAutoMountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISharedFolder_getAutoMountResponse_Holder"
            self.pyclass = Holder

    class ISharedFolder_setAutoMount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_setAutoMount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_setAutoMount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="autoMount", aname="_autoMount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_setAutoMount")
            kw["aname"] = "_ISharedFolder_setAutoMount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._autoMount = None
                    return
            Holder.__name__ = "ISharedFolder_setAutoMount_Holder"
            self.pyclass = Holder

    class ISharedFolder_setAutoMountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_setAutoMountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_setAutoMountResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_setAutoMountResponse")
            kw["aname"] = "_ISharedFolder_setAutoMountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISharedFolder_setAutoMountResponse_Holder"
            self.pyclass = Holder

    class ISharedFolder_getAutoMountPoint_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_getAutoMountPoint"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_getAutoMountPoint_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_getAutoMountPoint")
            kw["aname"] = "_ISharedFolder_getAutoMountPoint"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISharedFolder_getAutoMountPoint_Holder"
            self.pyclass = Holder

    class ISharedFolder_getAutoMountPointResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_getAutoMountPointResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_getAutoMountPointResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_getAutoMountPointResponse")
            kw["aname"] = "_ISharedFolder_getAutoMountPointResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISharedFolder_getAutoMountPointResponse_Holder"
            self.pyclass = Holder

    class ISharedFolder_setAutoMountPoint_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_setAutoMountPoint"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_setAutoMountPoint_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="autoMountPoint", aname="_autoMountPoint", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_setAutoMountPoint")
            kw["aname"] = "_ISharedFolder_setAutoMountPoint"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._autoMountPoint = None
                    return
            Holder.__name__ = "ISharedFolder_setAutoMountPoint_Holder"
            self.pyclass = Holder

    class ISharedFolder_setAutoMountPointResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_setAutoMountPointResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_setAutoMountPointResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_setAutoMountPointResponse")
            kw["aname"] = "_ISharedFolder_setAutoMountPointResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISharedFolder_setAutoMountPointResponse_Holder"
            self.pyclass = Holder

    class ISharedFolder_getLastAccessError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_getLastAccessError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_getLastAccessError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_getLastAccessError")
            kw["aname"] = "_ISharedFolder_getLastAccessError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISharedFolder_getLastAccessError_Holder"
            self.pyclass = Holder

    class ISharedFolder_getLastAccessErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolder_getLastAccessErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolder_getLastAccessErrorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolder_getLastAccessErrorResponse")
            kw["aname"] = "_ISharedFolder_getLastAccessErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISharedFolder_getLastAccessErrorResponse_Holder"
            self.pyclass = Holder

    class ISession_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getState")
            kw["aname"] = "_ISession_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISession_getState_Holder"
            self.pyclass = Holder

    class ISession_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","SessionState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getStateResponse")
            kw["aname"] = "_ISession_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISession_getStateResponse_Holder"
            self.pyclass = Holder

    class ISession_getType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getType")
            kw["aname"] = "_ISession_getType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISession_getType_Holder"
            self.pyclass = Holder

    class ISession_getTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","SessionType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getTypeResponse")
            kw["aname"] = "_ISession_getTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISession_getTypeResponse_Holder"
            self.pyclass = Holder

    class ISession_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getName")
            kw["aname"] = "_ISession_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISession_getName_Holder"
            self.pyclass = Holder

    class ISession_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getNameResponse")
            kw["aname"] = "_ISession_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISession_getNameResponse_Holder"
            self.pyclass = Holder

    class ISession_setName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_setName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_setName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_setName")
            kw["aname"] = "_ISession_setName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "ISession_setName_Holder"
            self.pyclass = Holder

    class ISession_setNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_setNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_setNameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISession_setNameResponse")
            kw["aname"] = "_ISession_setNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISession_setNameResponse_Holder"
            self.pyclass = Holder

    class ISession_getMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getMachine")
            kw["aname"] = "_ISession_getMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISession_getMachine_Holder"
            self.pyclass = Holder

    class ISession_getMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getMachineResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getMachineResponse")
            kw["aname"] = "_ISession_getMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISession_getMachineResponse_Holder"
            self.pyclass = Holder

    class ISession_getConsole_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getConsole"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getConsole_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getConsole")
            kw["aname"] = "_ISession_getConsole"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISession_getConsole_Holder"
            self.pyclass = Holder

    class ISession_getConsoleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getConsoleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getConsoleResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getConsoleResponse")
            kw["aname"] = "_ISession_getConsoleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISession_getConsoleResponse_Holder"
            self.pyclass = Holder

    class ISession_unlockMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_unlockMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_unlockMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_unlockMachine")
            kw["aname"] = "_ISession_unlockMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISession_unlockMachine_Holder"
            self.pyclass = Holder

    class ISession_unlockMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_unlockMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_unlockMachineResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISession_unlockMachineResponse")
            kw["aname"] = "_ISession_unlockMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISession_unlockMachineResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getName")
            kw["aname"] = "_IStorageController_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getName_Holder"
            self.pyclass = Holder

    class IStorageController_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getNameResponse")
            kw["aname"] = "_IStorageController_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getNameResponse_Holder"
            self.pyclass = Holder

    class IStorageController_setName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setName")
            kw["aname"] = "_IStorageController_setName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IStorageController_setName_Holder"
            self.pyclass = Holder

    class IStorageController_setNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setNameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setNameResponse")
            kw["aname"] = "_IStorageController_setNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IStorageController_setNameResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getMaxDevicesPerPortCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getMaxDevicesPerPortCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getMaxDevicesPerPortCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getMaxDevicesPerPortCount")
            kw["aname"] = "_IStorageController_getMaxDevicesPerPortCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getMaxDevicesPerPortCount_Holder"
            self.pyclass = Holder

    class IStorageController_getMaxDevicesPerPortCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getMaxDevicesPerPortCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getMaxDevicesPerPortCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getMaxDevicesPerPortCountResponse")
            kw["aname"] = "_IStorageController_getMaxDevicesPerPortCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getMaxDevicesPerPortCountResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getMinPortCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getMinPortCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getMinPortCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getMinPortCount")
            kw["aname"] = "_IStorageController_getMinPortCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getMinPortCount_Holder"
            self.pyclass = Holder

    class IStorageController_getMinPortCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getMinPortCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getMinPortCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getMinPortCountResponse")
            kw["aname"] = "_IStorageController_getMinPortCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getMinPortCountResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getMaxPortCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getMaxPortCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getMaxPortCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getMaxPortCount")
            kw["aname"] = "_IStorageController_getMaxPortCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getMaxPortCount_Holder"
            self.pyclass = Holder

    class IStorageController_getMaxPortCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getMaxPortCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getMaxPortCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getMaxPortCountResponse")
            kw["aname"] = "_IStorageController_getMaxPortCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getMaxPortCountResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getInstance_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getInstance"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getInstance_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getInstance")
            kw["aname"] = "_IStorageController_getInstance"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getInstance_Holder"
            self.pyclass = Holder

    class IStorageController_getInstanceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getInstanceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getInstanceResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getInstanceResponse")
            kw["aname"] = "_IStorageController_getInstanceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getInstanceResponse_Holder"
            self.pyclass = Holder

    class IStorageController_setInstance_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setInstance"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setInstance_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="instance", aname="_instance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setInstance")
            kw["aname"] = "_IStorageController_setInstance"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._instance = None
                    return
            Holder.__name__ = "IStorageController_setInstance_Holder"
            self.pyclass = Holder

    class IStorageController_setInstanceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setInstanceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setInstanceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setInstanceResponse")
            kw["aname"] = "_IStorageController_setInstanceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IStorageController_setInstanceResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getPortCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getPortCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getPortCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getPortCount")
            kw["aname"] = "_IStorageController_getPortCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getPortCount_Holder"
            self.pyclass = Holder

    class IStorageController_getPortCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getPortCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getPortCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getPortCountResponse")
            kw["aname"] = "_IStorageController_getPortCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getPortCountResponse_Holder"
            self.pyclass = Holder

    class IStorageController_setPortCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setPortCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setPortCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="portCount", aname="_portCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setPortCount")
            kw["aname"] = "_IStorageController_setPortCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._portCount = None
                    return
            Holder.__name__ = "IStorageController_setPortCount_Holder"
            self.pyclass = Holder

    class IStorageController_setPortCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setPortCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setPortCountResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setPortCountResponse")
            kw["aname"] = "_IStorageController_setPortCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IStorageController_setPortCountResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getBus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getBus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getBus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getBus")
            kw["aname"] = "_IStorageController_getBus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getBus_Holder"
            self.pyclass = Holder

    class IStorageController_getBusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getBusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getBusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getBusResponse")
            kw["aname"] = "_IStorageController_getBusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getBusResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getControllerType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getControllerType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getControllerType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getControllerType")
            kw["aname"] = "_IStorageController_getControllerType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getControllerType_Holder"
            self.pyclass = Holder

    class IStorageController_getControllerTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getControllerTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getControllerTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","StorageControllerType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getControllerTypeResponse")
            kw["aname"] = "_IStorageController_getControllerTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getControllerTypeResponse_Holder"
            self.pyclass = Holder

    class IStorageController_setControllerType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setControllerType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setControllerType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageControllerType",lazy=False)(pname="controllerType", aname="_controllerType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setControllerType")
            kw["aname"] = "_IStorageController_setControllerType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._controllerType = None
                    return
            Holder.__name__ = "IStorageController_setControllerType_Holder"
            self.pyclass = Holder

    class IStorageController_setControllerTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setControllerTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setControllerTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setControllerTypeResponse")
            kw["aname"] = "_IStorageController_setControllerTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IStorageController_setControllerTypeResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getUseHostIOCache_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getUseHostIOCache"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getUseHostIOCache_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getUseHostIOCache")
            kw["aname"] = "_IStorageController_getUseHostIOCache"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getUseHostIOCache_Holder"
            self.pyclass = Holder

    class IStorageController_getUseHostIOCacheResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getUseHostIOCacheResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getUseHostIOCacheResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getUseHostIOCacheResponse")
            kw["aname"] = "_IStorageController_getUseHostIOCacheResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getUseHostIOCacheResponse_Holder"
            self.pyclass = Holder

    class IStorageController_setUseHostIOCache_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setUseHostIOCache"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setUseHostIOCache_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="useHostIOCache", aname="_useHostIOCache", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setUseHostIOCache")
            kw["aname"] = "_IStorageController_setUseHostIOCache"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._useHostIOCache = None
                    return
            Holder.__name__ = "IStorageController_setUseHostIOCache_Holder"
            self.pyclass = Holder

    class IStorageController_setUseHostIOCacheResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setUseHostIOCacheResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setUseHostIOCacheResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setUseHostIOCacheResponse")
            kw["aname"] = "_IStorageController_setUseHostIOCacheResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IStorageController_setUseHostIOCacheResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getBootable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getBootable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getBootable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getBootable")
            kw["aname"] = "_IStorageController_getBootable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getBootable_Holder"
            self.pyclass = Holder

    class IStorageController_getBootableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getBootableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getBootableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getBootableResponse")
            kw["aname"] = "_IStorageController_getBootableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getBootableResponse_Holder"
            self.pyclass = Holder

    class IManagedObjectRef_getInterfaceName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IManagedObjectRef_getInterfaceName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IManagedObjectRef_getInterfaceName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IManagedObjectRef_getInterfaceName")
            kw["aname"] = "_IManagedObjectRef_getInterfaceName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IManagedObjectRef_getInterfaceName_Holder"
            self.pyclass = Holder

    class IManagedObjectRef_getInterfaceNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IManagedObjectRef_getInterfaceNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IManagedObjectRef_getInterfaceNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IManagedObjectRef_getInterfaceNameResponse")
            kw["aname"] = "_IManagedObjectRef_getInterfaceNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IManagedObjectRef_getInterfaceNameResponse_Holder"
            self.pyclass = Holder

    class IManagedObjectRef_release_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IManagedObjectRef_release"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IManagedObjectRef_release_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IManagedObjectRef_release")
            kw["aname"] = "_IManagedObjectRef_release"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IManagedObjectRef_release_Holder"
            self.pyclass = Holder

    class IManagedObjectRef_releaseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IManagedObjectRef_releaseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IManagedObjectRef_releaseResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IManagedObjectRef_releaseResponse")
            kw["aname"] = "_IManagedObjectRef_releaseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IManagedObjectRef_releaseResponse_Holder"
            self.pyclass = Holder

    class IWebsessionManager_logon_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IWebsessionManager_logon"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IWebsessionManager_logon_Dec.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IWebsessionManager_logon")
            kw["aname"] = "_IWebsessionManager_logon"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "IWebsessionManager_logon_Holder"
            self.pyclass = Holder

    class IWebsessionManager_logonResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IWebsessionManager_logonResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IWebsessionManager_logonResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IWebsessionManager_logonResponse")
            kw["aname"] = "_IWebsessionManager_logonResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IWebsessionManager_logonResponse_Holder"
            self.pyclass = Holder

    class IWebsessionManager_getSessionObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IWebsessionManager_getSessionObject"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IWebsessionManager_getSessionObject_Dec.schema
            TClist = [ZSI.TC.String(pname="refIVirtualBox", aname="_refIVirtualBox", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IWebsessionManager_getSessionObject")
            kw["aname"] = "_IWebsessionManager_getSessionObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._refIVirtualBox = None
                    return
            Holder.__name__ = "IWebsessionManager_getSessionObject_Holder"
            self.pyclass = Holder

    class IWebsessionManager_getSessionObjectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IWebsessionManager_getSessionObjectResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IWebsessionManager_getSessionObjectResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IWebsessionManager_getSessionObjectResponse")
            kw["aname"] = "_IWebsessionManager_getSessionObjectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IWebsessionManager_getSessionObjectResponse_Holder"
            self.pyclass = Holder

    class IWebsessionManager_logoff_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IWebsessionManager_logoff"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IWebsessionManager_logoff_Dec.schema
            TClist = [ZSI.TC.String(pname="refIVirtualBox", aname="_refIVirtualBox", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IWebsessionManager_logoff")
            kw["aname"] = "_IWebsessionManager_logoff"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._refIVirtualBox = None
                    return
            Holder.__name__ = "IWebsessionManager_logoff_Holder"
            self.pyclass = Holder

    class IWebsessionManager_logoffResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IWebsessionManager_logoffResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IWebsessionManager_logoffResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IWebsessionManager_logoffResponse")
            kw["aname"] = "_IWebsessionManager_logoffResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IWebsessionManager_logoffResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getMetricName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getMetricName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getMetricName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getMetricName")
            kw["aname"] = "_IPerformanceMetric_getMetricName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getMetricName_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getMetricNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getMetricNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getMetricNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getMetricNameResponse")
            kw["aname"] = "_IPerformanceMetric_getMetricNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getMetricNameResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getObject"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getObject_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getObject")
            kw["aname"] = "_IPerformanceMetric_getObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getObject_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getObjectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getObjectResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getObjectResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getObjectResponse")
            kw["aname"] = "_IPerformanceMetric_getObjectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getObjectResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getDescription")
            kw["aname"] = "_IPerformanceMetric_getDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getDescription_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getDescriptionResponse")
            kw["aname"] = "_IPerformanceMetric_getDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getDescriptionResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getPeriod_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getPeriod"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getPeriod_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getPeriod")
            kw["aname"] = "_IPerformanceMetric_getPeriod"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getPeriod_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getPeriodResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getPeriodResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getPeriodResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getPeriodResponse")
            kw["aname"] = "_IPerformanceMetric_getPeriodResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getPeriodResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getCount")
            kw["aname"] = "_IPerformanceMetric_getCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getCount_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getCountResponse")
            kw["aname"] = "_IPerformanceMetric_getCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getCountResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getUnit_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getUnit"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getUnit_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getUnit")
            kw["aname"] = "_IPerformanceMetric_getUnit"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getUnit_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getUnitResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getUnitResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getUnitResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getUnitResponse")
            kw["aname"] = "_IPerformanceMetric_getUnitResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getUnitResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getMinimumValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getMinimumValue"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getMinimumValue_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getMinimumValue")
            kw["aname"] = "_IPerformanceMetric_getMinimumValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getMinimumValue_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getMinimumValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getMinimumValueResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getMinimumValueResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getMinimumValueResponse")
            kw["aname"] = "_IPerformanceMetric_getMinimumValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getMinimumValueResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getMaximumValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getMaximumValue"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getMaximumValue_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getMaximumValue")
            kw["aname"] = "_IPerformanceMetric_getMaximumValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getMaximumValue_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getMaximumValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getMaximumValueResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getMaximumValueResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getMaximumValueResponse")
            kw["aname"] = "_IPerformanceMetric_getMaximumValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getMaximumValueResponse_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_getMetricNames_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_getMetricNames"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_getMetricNames_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_getMetricNames")
            kw["aname"] = "_IPerformanceCollector_getMetricNames"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceCollector_getMetricNames_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_getMetricNamesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_getMetricNamesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_getMetricNamesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_getMetricNamesResponse")
            kw["aname"] = "_IPerformanceCollector_getMetricNamesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IPerformanceCollector_getMetricNamesResponse_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_getMetrics_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_getMetrics"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_getMetrics_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="metricNames", aname="_metricNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objects", aname="_objects", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_getMetrics")
            kw["aname"] = "_IPerformanceCollector_getMetrics"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._metricNames = []
                    self._objects = []
                    return
            Holder.__name__ = "IPerformanceCollector_getMetrics_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_getMetricsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_getMetricsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_getMetricsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_getMetricsResponse")
            kw["aname"] = "_IPerformanceCollector_getMetricsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IPerformanceCollector_getMetricsResponse_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_setupMetrics_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_setupMetrics"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_setupMetrics_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="metricNames", aname="_metricNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objects", aname="_objects", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="period", aname="_period", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="count", aname="_count", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_setupMetrics")
            kw["aname"] = "_IPerformanceCollector_setupMetrics"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._metricNames = []
                    self._objects = []
                    self._period = None
                    self._count = None
                    return
            Holder.__name__ = "IPerformanceCollector_setupMetrics_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_setupMetricsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_setupMetricsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_setupMetricsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_setupMetricsResponse")
            kw["aname"] = "_IPerformanceCollector_setupMetricsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IPerformanceCollector_setupMetricsResponse_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_enableMetrics_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_enableMetrics"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_enableMetrics_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="metricNames", aname="_metricNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objects", aname="_objects", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_enableMetrics")
            kw["aname"] = "_IPerformanceCollector_enableMetrics"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._metricNames = []
                    self._objects = []
                    return
            Holder.__name__ = "IPerformanceCollector_enableMetrics_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_enableMetricsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_enableMetricsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_enableMetricsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_enableMetricsResponse")
            kw["aname"] = "_IPerformanceCollector_enableMetricsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IPerformanceCollector_enableMetricsResponse_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_disableMetrics_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_disableMetrics"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_disableMetrics_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="metricNames", aname="_metricNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objects", aname="_objects", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_disableMetrics")
            kw["aname"] = "_IPerformanceCollector_disableMetrics"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._metricNames = []
                    self._objects = []
                    return
            Holder.__name__ = "IPerformanceCollector_disableMetrics_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_disableMetricsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_disableMetricsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_disableMetricsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_disableMetricsResponse")
            kw["aname"] = "_IPerformanceCollector_disableMetricsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IPerformanceCollector_disableMetricsResponse_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_queryMetricsData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_queryMetricsData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_queryMetricsData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="metricNames", aname="_metricNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objects", aname="_objects", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_queryMetricsData")
            kw["aname"] = "_IPerformanceCollector_queryMetricsData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._metricNames = []
                    self._objects = []
                    return
            Holder.__name__ = "IPerformanceCollector_queryMetricsData_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_queryMetricsDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_queryMetricsDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_queryMetricsDataResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnMetricNames", aname="_returnMetricNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnObjects", aname="_returnObjects", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnUnits", aname="_returnUnits", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="returnScales", aname="_returnScales", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="returnSequenceNumbers", aname="_returnSequenceNumbers", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="returnDataIndices", aname="_returnDataIndices", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="returnDataLengths", aname="_returnDataLengths", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_queryMetricsDataResponse")
            kw["aname"] = "_IPerformanceCollector_queryMetricsDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnMetricNames = []
                    self._returnObjects = []
                    self._returnUnits = []
                    self._returnScales = []
                    self._returnSequenceNumbers = []
                    self._returnDataIndices = []
                    self._returnDataLengths = []
                    self._returnval = []
                    return
            Holder.__name__ = "IPerformanceCollector_queryMetricsDataResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getNetwork")
            kw["aname"] = "_INATEngine_getNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getNetwork_Holder"
            self.pyclass = Holder

    class INATEngine_getNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getNetworkResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getNetworkResponse")
            kw["aname"] = "_INATEngine_getNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getNetworkResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="network", aname="_network", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setNetwork")
            kw["aname"] = "_INATEngine_setNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._network = None
                    return
            Holder.__name__ = "INATEngine_setNetwork_Holder"
            self.pyclass = Holder

    class INATEngine_setNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setNetworkResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setNetworkResponse")
            kw["aname"] = "_INATEngine_setNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setNetworkResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getHostIP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getHostIP"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getHostIP_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getHostIP")
            kw["aname"] = "_INATEngine_getHostIP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getHostIP_Holder"
            self.pyclass = Holder

    class INATEngine_getHostIPResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getHostIPResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getHostIPResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getHostIPResponse")
            kw["aname"] = "_INATEngine_getHostIPResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getHostIPResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setHostIP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setHostIP"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setHostIP_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostIP", aname="_hostIP", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setHostIP")
            kw["aname"] = "_INATEngine_setHostIP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hostIP = None
                    return
            Holder.__name__ = "INATEngine_setHostIP_Holder"
            self.pyclass = Holder

    class INATEngine_setHostIPResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setHostIPResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setHostIPResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setHostIPResponse")
            kw["aname"] = "_INATEngine_setHostIPResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setHostIPResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getTFTPPrefix_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getTFTPPrefix"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getTFTPPrefix_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getTFTPPrefix")
            kw["aname"] = "_INATEngine_getTFTPPrefix"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getTFTPPrefix_Holder"
            self.pyclass = Holder

    class INATEngine_getTFTPPrefixResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getTFTPPrefixResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getTFTPPrefixResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getTFTPPrefixResponse")
            kw["aname"] = "_INATEngine_getTFTPPrefixResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getTFTPPrefixResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setTFTPPrefix_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setTFTPPrefix"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setTFTPPrefix_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="TFTPPrefix", aname="_TFTPPrefix", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setTFTPPrefix")
            kw["aname"] = "_INATEngine_setTFTPPrefix"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._TFTPPrefix = None
                    return
            Holder.__name__ = "INATEngine_setTFTPPrefix_Holder"
            self.pyclass = Holder

    class INATEngine_setTFTPPrefixResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setTFTPPrefixResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setTFTPPrefixResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setTFTPPrefixResponse")
            kw["aname"] = "_INATEngine_setTFTPPrefixResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setTFTPPrefixResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getTFTPBootFile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getTFTPBootFile"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getTFTPBootFile_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getTFTPBootFile")
            kw["aname"] = "_INATEngine_getTFTPBootFile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getTFTPBootFile_Holder"
            self.pyclass = Holder

    class INATEngine_getTFTPBootFileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getTFTPBootFileResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getTFTPBootFileResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getTFTPBootFileResponse")
            kw["aname"] = "_INATEngine_getTFTPBootFileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getTFTPBootFileResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setTFTPBootFile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setTFTPBootFile"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setTFTPBootFile_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="TFTPBootFile", aname="_TFTPBootFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setTFTPBootFile")
            kw["aname"] = "_INATEngine_setTFTPBootFile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._TFTPBootFile = None
                    return
            Holder.__name__ = "INATEngine_setTFTPBootFile_Holder"
            self.pyclass = Holder

    class INATEngine_setTFTPBootFileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setTFTPBootFileResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setTFTPBootFileResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setTFTPBootFileResponse")
            kw["aname"] = "_INATEngine_setTFTPBootFileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setTFTPBootFileResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getTFTPNextServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getTFTPNextServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getTFTPNextServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getTFTPNextServer")
            kw["aname"] = "_INATEngine_getTFTPNextServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getTFTPNextServer_Holder"
            self.pyclass = Holder

    class INATEngine_getTFTPNextServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getTFTPNextServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getTFTPNextServerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getTFTPNextServerResponse")
            kw["aname"] = "_INATEngine_getTFTPNextServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getTFTPNextServerResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setTFTPNextServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setTFTPNextServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setTFTPNextServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="TFTPNextServer", aname="_TFTPNextServer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setTFTPNextServer")
            kw["aname"] = "_INATEngine_setTFTPNextServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._TFTPNextServer = None
                    return
            Holder.__name__ = "INATEngine_setTFTPNextServer_Holder"
            self.pyclass = Holder

    class INATEngine_setTFTPNextServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setTFTPNextServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setTFTPNextServerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setTFTPNextServerResponse")
            kw["aname"] = "_INATEngine_setTFTPNextServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setTFTPNextServerResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getAliasMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getAliasMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getAliasMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getAliasMode")
            kw["aname"] = "_INATEngine_getAliasMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getAliasMode_Holder"
            self.pyclass = Holder

    class INATEngine_getAliasModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getAliasModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getAliasModeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getAliasModeResponse")
            kw["aname"] = "_INATEngine_getAliasModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getAliasModeResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setAliasMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setAliasMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setAliasMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="aliasMode", aname="_aliasMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setAliasMode")
            kw["aname"] = "_INATEngine_setAliasMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._aliasMode = None
                    return
            Holder.__name__ = "INATEngine_setAliasMode_Holder"
            self.pyclass = Holder

    class INATEngine_setAliasModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setAliasModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setAliasModeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setAliasModeResponse")
            kw["aname"] = "_INATEngine_setAliasModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setAliasModeResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getDNSPassDomain_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getDNSPassDomain"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getDNSPassDomain_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getDNSPassDomain")
            kw["aname"] = "_INATEngine_getDNSPassDomain"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getDNSPassDomain_Holder"
            self.pyclass = Holder

    class INATEngine_getDNSPassDomainResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getDNSPassDomainResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getDNSPassDomainResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getDNSPassDomainResponse")
            kw["aname"] = "_INATEngine_getDNSPassDomainResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getDNSPassDomainResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setDNSPassDomain_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setDNSPassDomain"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setDNSPassDomain_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="DNSPassDomain", aname="_DNSPassDomain", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setDNSPassDomain")
            kw["aname"] = "_INATEngine_setDNSPassDomain"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._DNSPassDomain = None
                    return
            Holder.__name__ = "INATEngine_setDNSPassDomain_Holder"
            self.pyclass = Holder

    class INATEngine_setDNSPassDomainResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setDNSPassDomainResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setDNSPassDomainResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setDNSPassDomainResponse")
            kw["aname"] = "_INATEngine_setDNSPassDomainResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setDNSPassDomainResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getDNSProxy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getDNSProxy"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getDNSProxy_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getDNSProxy")
            kw["aname"] = "_INATEngine_getDNSProxy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getDNSProxy_Holder"
            self.pyclass = Holder

    class INATEngine_getDNSProxyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getDNSProxyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getDNSProxyResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getDNSProxyResponse")
            kw["aname"] = "_INATEngine_getDNSProxyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getDNSProxyResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setDNSProxy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setDNSProxy"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setDNSProxy_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="DNSProxy", aname="_DNSProxy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setDNSProxy")
            kw["aname"] = "_INATEngine_setDNSProxy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._DNSProxy = None
                    return
            Holder.__name__ = "INATEngine_setDNSProxy_Holder"
            self.pyclass = Holder

    class INATEngine_setDNSProxyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setDNSProxyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setDNSProxyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setDNSProxyResponse")
            kw["aname"] = "_INATEngine_setDNSProxyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setDNSProxyResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getDNSUseHostResolver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getDNSUseHostResolver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getDNSUseHostResolver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getDNSUseHostResolver")
            kw["aname"] = "_INATEngine_getDNSUseHostResolver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getDNSUseHostResolver_Holder"
            self.pyclass = Holder

    class INATEngine_getDNSUseHostResolverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getDNSUseHostResolverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getDNSUseHostResolverResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getDNSUseHostResolverResponse")
            kw["aname"] = "_INATEngine_getDNSUseHostResolverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getDNSUseHostResolverResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setDNSUseHostResolver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setDNSUseHostResolver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setDNSUseHostResolver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="DNSUseHostResolver", aname="_DNSUseHostResolver", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setDNSUseHostResolver")
            kw["aname"] = "_INATEngine_setDNSUseHostResolver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._DNSUseHostResolver = None
                    return
            Holder.__name__ = "INATEngine_setDNSUseHostResolver_Holder"
            self.pyclass = Holder

    class INATEngine_setDNSUseHostResolverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setDNSUseHostResolverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setDNSUseHostResolverResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setDNSUseHostResolverResponse")
            kw["aname"] = "_INATEngine_setDNSUseHostResolverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setDNSUseHostResolverResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getRedirects_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getRedirects"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getRedirects_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getRedirects")
            kw["aname"] = "_INATEngine_getRedirects"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getRedirects_Holder"
            self.pyclass = Holder

    class INATEngine_getRedirectsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getRedirectsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getRedirectsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getRedirectsResponse")
            kw["aname"] = "_INATEngine_getRedirectsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "INATEngine_getRedirectsResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setNetworkSettings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setNetworkSettings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setNetworkSettings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="mtu", aname="_mtu", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sockSnd", aname="_sockSnd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sockRcv", aname="_sockRcv", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="TcpWndSnd", aname="_TcpWndSnd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="TcpWndRcv", aname="_TcpWndRcv", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setNetworkSettings")
            kw["aname"] = "_INATEngine_setNetworkSettings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._mtu = None
                    self._sockSnd = None
                    self._sockRcv = None
                    self._TcpWndSnd = None
                    self._TcpWndRcv = None
                    return
            Holder.__name__ = "INATEngine_setNetworkSettings_Holder"
            self.pyclass = Holder

    class INATEngine_setNetworkSettingsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setNetworkSettingsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setNetworkSettingsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setNetworkSettingsResponse")
            kw["aname"] = "_INATEngine_setNetworkSettingsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setNetworkSettingsResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getNetworkSettings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getNetworkSettings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getNetworkSettings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getNetworkSettings")
            kw["aname"] = "_INATEngine_getNetworkSettings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getNetworkSettings_Holder"
            self.pyclass = Holder

    class INATEngine_getNetworkSettingsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getNetworkSettingsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getNetworkSettingsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="mtu", aname="_mtu", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sockSnd", aname="_sockSnd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sockRcv", aname="_sockRcv", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="TcpWndSnd", aname="_TcpWndSnd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="TcpWndRcv", aname="_TcpWndRcv", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getNetworkSettingsResponse")
            kw["aname"] = "_INATEngine_getNetworkSettingsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._mtu = None
                    self._sockSnd = None
                    self._sockRcv = None
                    self._TcpWndSnd = None
                    self._TcpWndRcv = None
                    return
            Holder.__name__ = "INATEngine_getNetworkSettingsResponse_Holder"
            self.pyclass = Holder

    class INATEngine_addRedirect_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_addRedirect"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_addRedirect_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","NATProtocol",lazy=False)(pname="proto", aname="_proto", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostIP", aname="_hostIP", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedShort(pname="hostPort", aname="_hostPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="guestIP", aname="_guestIP", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedShort(pname="guestPort", aname="_guestPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_addRedirect")
            kw["aname"] = "_INATEngine_addRedirect"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._proto = None
                    self._hostIP = None
                    self._hostPort = None
                    self._guestIP = None
                    self._guestPort = None
                    return
            Holder.__name__ = "INATEngine_addRedirect_Holder"
            self.pyclass = Holder

    class INATEngine_addRedirectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_addRedirectResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_addRedirectResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_addRedirectResponse")
            kw["aname"] = "_INATEngine_addRedirectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_addRedirectResponse_Holder"
            self.pyclass = Holder

    class INATEngine_removeRedirect_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_removeRedirect"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_removeRedirect_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_removeRedirect")
            kw["aname"] = "_INATEngine_removeRedirect"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "INATEngine_removeRedirect_Holder"
            self.pyclass = Holder

    class INATEngine_removeRedirectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_removeRedirectResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_removeRedirectResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_removeRedirectResponse")
            kw["aname"] = "_INATEngine_removeRedirectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_removeRedirectResponse_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getName")
            kw["aname"] = "_IBandwidthGroup_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBandwidthGroup_getName_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getNameResponse")
            kw["aname"] = "_IBandwidthGroup_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBandwidthGroup_getNameResponse_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getType")
            kw["aname"] = "_IBandwidthGroup_getType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBandwidthGroup_getType_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","BandwidthGroupType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getTypeResponse")
            kw["aname"] = "_IBandwidthGroup_getTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBandwidthGroup_getTypeResponse_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getReference_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getReference"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getReference_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getReference")
            kw["aname"] = "_IBandwidthGroup_getReference"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBandwidthGroup_getReference_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getReferenceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getReferenceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getReferenceResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getReferenceResponse")
            kw["aname"] = "_IBandwidthGroup_getReferenceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBandwidthGroup_getReferenceResponse_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getMaxBytesPerSec_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getMaxBytesPerSec"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getMaxBytesPerSec_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getMaxBytesPerSec")
            kw["aname"] = "_IBandwidthGroup_getMaxBytesPerSec"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBandwidthGroup_getMaxBytesPerSec_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getMaxBytesPerSecResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getMaxBytesPerSecResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getMaxBytesPerSecResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getMaxBytesPerSecResponse")
            kw["aname"] = "_IBandwidthGroup_getMaxBytesPerSecResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBandwidthGroup_getMaxBytesPerSecResponse_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_setMaxBytesPerSec_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_setMaxBytesPerSec"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_setMaxBytesPerSec_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="maxBytesPerSec", aname="_maxBytesPerSec", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_setMaxBytesPerSec")
            kw["aname"] = "_IBandwidthGroup_setMaxBytesPerSec"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._maxBytesPerSec = None
                    return
            Holder.__name__ = "IBandwidthGroup_setMaxBytesPerSec_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_setMaxBytesPerSecResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_setMaxBytesPerSecResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_setMaxBytesPerSecResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_setMaxBytesPerSecResponse")
            kw["aname"] = "_IBandwidthGroup_setMaxBytesPerSecResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBandwidthGroup_setMaxBytesPerSecResponse_Holder"
            self.pyclass = Holder

    class IBandwidthControl_getNumGroups_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_getNumGroups"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_getNumGroups_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_getNumGroups")
            kw["aname"] = "_IBandwidthControl_getNumGroups"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBandwidthControl_getNumGroups_Holder"
            self.pyclass = Holder

    class IBandwidthControl_getNumGroupsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_getNumGroupsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_getNumGroupsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_getNumGroupsResponse")
            kw["aname"] = "_IBandwidthControl_getNumGroupsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBandwidthControl_getNumGroupsResponse_Holder"
            self.pyclass = Holder

    class IBandwidthControl_createBandwidthGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_createBandwidthGroup"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_createBandwidthGroup_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","BandwidthGroupType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="maxBytesPerSec", aname="_maxBytesPerSec", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_createBandwidthGroup")
            kw["aname"] = "_IBandwidthControl_createBandwidthGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._type = None
                    self._maxBytesPerSec = None
                    return
            Holder.__name__ = "IBandwidthControl_createBandwidthGroup_Holder"
            self.pyclass = Holder

    class IBandwidthControl_createBandwidthGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_createBandwidthGroupResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_createBandwidthGroupResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_createBandwidthGroupResponse")
            kw["aname"] = "_IBandwidthControl_createBandwidthGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBandwidthControl_createBandwidthGroupResponse_Holder"
            self.pyclass = Holder

    class IBandwidthControl_deleteBandwidthGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_deleteBandwidthGroup"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_deleteBandwidthGroup_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_deleteBandwidthGroup")
            kw["aname"] = "_IBandwidthControl_deleteBandwidthGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IBandwidthControl_deleteBandwidthGroup_Holder"
            self.pyclass = Holder

    class IBandwidthControl_deleteBandwidthGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_deleteBandwidthGroupResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_deleteBandwidthGroupResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_deleteBandwidthGroupResponse")
            kw["aname"] = "_IBandwidthControl_deleteBandwidthGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBandwidthControl_deleteBandwidthGroupResponse_Holder"
            self.pyclass = Holder

    class IBandwidthControl_getBandwidthGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_getBandwidthGroup"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_getBandwidthGroup_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_getBandwidthGroup")
            kw["aname"] = "_IBandwidthControl_getBandwidthGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IBandwidthControl_getBandwidthGroup_Holder"
            self.pyclass = Holder

    class IBandwidthControl_getBandwidthGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_getBandwidthGroupResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_getBandwidthGroupResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_getBandwidthGroupResponse")
            kw["aname"] = "_IBandwidthControl_getBandwidthGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBandwidthControl_getBandwidthGroupResponse_Holder"
            self.pyclass = Holder

    class IBandwidthControl_getAllBandwidthGroups_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_getAllBandwidthGroups"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_getAllBandwidthGroups_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_getAllBandwidthGroups")
            kw["aname"] = "_IBandwidthControl_getAllBandwidthGroups"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBandwidthControl_getAllBandwidthGroups_Holder"
            self.pyclass = Holder

    class IBandwidthControl_getAllBandwidthGroupsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_getAllBandwidthGroupsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_getAllBandwidthGroupsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_getAllBandwidthGroupsResponse")
            kw["aname"] = "_IBandwidthControl_getAllBandwidthGroupsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IBandwidthControl_getAllBandwidthGroupsResponse_Holder"
            self.pyclass = Holder

    class IEventSource_createListener_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_createListener"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_createListener_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_createListener")
            kw["aname"] = "_IEventSource_createListener"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEventSource_createListener_Holder"
            self.pyclass = Holder

    class IEventSource_createListenerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_createListenerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_createListenerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_createListenerResponse")
            kw["aname"] = "_IEventSource_createListenerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEventSource_createListenerResponse_Holder"
            self.pyclass = Holder

    class IEventSource_createAggregator_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_createAggregator"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_createAggregator_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subordinates", aname="_subordinates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_createAggregator")
            kw["aname"] = "_IEventSource_createAggregator"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._subordinates = []
                    return
            Holder.__name__ = "IEventSource_createAggregator_Holder"
            self.pyclass = Holder

    class IEventSource_createAggregatorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_createAggregatorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_createAggregatorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_createAggregatorResponse")
            kw["aname"] = "_IEventSource_createAggregatorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEventSource_createAggregatorResponse_Holder"
            self.pyclass = Holder

    class IEventSource_registerListener_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_registerListener"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_registerListener_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="listener", aname="_listener", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","VBoxEventType",lazy=False)(pname="interesting", aname="_interesting", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="active", aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_registerListener")
            kw["aname"] = "_IEventSource_registerListener"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._listener = None
                    self._interesting = []
                    self._active = None
                    return
            Holder.__name__ = "IEventSource_registerListener_Holder"
            self.pyclass = Holder

    class IEventSource_registerListenerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_registerListenerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_registerListenerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_registerListenerResponse")
            kw["aname"] = "_IEventSource_registerListenerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IEventSource_registerListenerResponse_Holder"
            self.pyclass = Holder

    class IEventSource_unregisterListener_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_unregisterListener"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_unregisterListener_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="listener", aname="_listener", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_unregisterListener")
            kw["aname"] = "_IEventSource_unregisterListener"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._listener = None
                    return
            Holder.__name__ = "IEventSource_unregisterListener_Holder"
            self.pyclass = Holder

    class IEventSource_unregisterListenerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_unregisterListenerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_unregisterListenerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_unregisterListenerResponse")
            kw["aname"] = "_IEventSource_unregisterListenerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IEventSource_unregisterListenerResponse_Holder"
            self.pyclass = Holder

    class IEventSource_fireEvent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_fireEvent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_fireEvent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="event", aname="_event", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="timeout", aname="_timeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_fireEvent")
            kw["aname"] = "_IEventSource_fireEvent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._event = None
                    self._timeout = None
                    return
            Holder.__name__ = "IEventSource_fireEvent_Holder"
            self.pyclass = Holder

    class IEventSource_fireEventResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_fireEventResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_fireEventResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_fireEventResponse")
            kw["aname"] = "_IEventSource_fireEventResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEventSource_fireEventResponse_Holder"
            self.pyclass = Holder

    class IEventSource_getEvent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_getEvent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_getEvent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="listener", aname="_listener", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="timeout", aname="_timeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_getEvent")
            kw["aname"] = "_IEventSource_getEvent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._listener = None
                    self._timeout = None
                    return
            Holder.__name__ = "IEventSource_getEvent_Holder"
            self.pyclass = Holder

    class IEventSource_getEventResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_getEventResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_getEventResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_getEventResponse")
            kw["aname"] = "_IEventSource_getEventResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEventSource_getEventResponse_Holder"
            self.pyclass = Holder

    class IEventSource_eventProcessed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_eventProcessed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_eventProcessed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="listener", aname="_listener", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="event", aname="_event", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_eventProcessed")
            kw["aname"] = "_IEventSource_eventProcessed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._listener = None
                    self._event = None
                    return
            Holder.__name__ = "IEventSource_eventProcessed_Holder"
            self.pyclass = Holder

    class IEventSource_eventProcessedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_eventProcessedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_eventProcessedResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_eventProcessedResponse")
            kw["aname"] = "_IEventSource_eventProcessedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IEventSource_eventProcessedResponse_Holder"
            self.pyclass = Holder

    class IEventListener_handleEvent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventListener_handleEvent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventListener_handleEvent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="event", aname="_event", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventListener_handleEvent")
            kw["aname"] = "_IEventListener_handleEvent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._event = None
                    return
            Holder.__name__ = "IEventListener_handleEvent_Holder"
            self.pyclass = Holder

    class IEventListener_handleEventResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventListener_handleEventResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventListener_handleEventResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IEventListener_handleEventResponse")
            kw["aname"] = "_IEventListener_handleEventResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IEventListener_handleEventResponse_Holder"
            self.pyclass = Holder

    class IEvent_getType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_getType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_getType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_getType")
            kw["aname"] = "_IEvent_getType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEvent_getType_Holder"
            self.pyclass = Holder

    class IEvent_getTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_getTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_getTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","VBoxEventType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_getTypeResponse")
            kw["aname"] = "_IEvent_getTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEvent_getTypeResponse_Holder"
            self.pyclass = Holder

    class IEvent_getSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_getSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_getSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_getSource")
            kw["aname"] = "_IEvent_getSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEvent_getSource_Holder"
            self.pyclass = Holder

    class IEvent_getSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_getSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_getSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_getSourceResponse")
            kw["aname"] = "_IEvent_getSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEvent_getSourceResponse_Holder"
            self.pyclass = Holder

    class IEvent_getWaitable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_getWaitable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_getWaitable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_getWaitable")
            kw["aname"] = "_IEvent_getWaitable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEvent_getWaitable_Holder"
            self.pyclass = Holder

    class IEvent_getWaitableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_getWaitableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_getWaitableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_getWaitableResponse")
            kw["aname"] = "_IEvent_getWaitableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEvent_getWaitableResponse_Holder"
            self.pyclass = Holder

    class IEvent_setProcessed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_setProcessed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_setProcessed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_setProcessed")
            kw["aname"] = "_IEvent_setProcessed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEvent_setProcessed_Holder"
            self.pyclass = Holder

    class IEvent_setProcessedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_setProcessedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_setProcessedResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_setProcessedResponse")
            kw["aname"] = "_IEvent_setProcessedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IEvent_setProcessedResponse_Holder"
            self.pyclass = Holder

    class IEvent_waitProcessed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_waitProcessed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_waitProcessed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="timeout", aname="_timeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_waitProcessed")
            kw["aname"] = "_IEvent_waitProcessed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._timeout = None
                    return
            Holder.__name__ = "IEvent_waitProcessed_Holder"
            self.pyclass = Holder

    class IEvent_waitProcessedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_waitProcessedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_waitProcessedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_waitProcessedResponse")
            kw["aname"] = "_IEvent_waitProcessedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEvent_waitProcessedResponse_Holder"
            self.pyclass = Holder

    class IReusableEvent_getGeneration_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IReusableEvent_getGeneration"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IReusableEvent_getGeneration_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IReusableEvent_getGeneration")
            kw["aname"] = "_IReusableEvent_getGeneration"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IReusableEvent_getGeneration_Holder"
            self.pyclass = Holder

    class IReusableEvent_getGenerationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IReusableEvent_getGenerationResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IReusableEvent_getGenerationResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IReusableEvent_getGenerationResponse")
            kw["aname"] = "_IReusableEvent_getGenerationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IReusableEvent_getGenerationResponse_Holder"
            self.pyclass = Holder

    class IReusableEvent_reuse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IReusableEvent_reuse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IReusableEvent_reuse_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IReusableEvent_reuse")
            kw["aname"] = "_IReusableEvent_reuse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IReusableEvent_reuse_Holder"
            self.pyclass = Holder

    class IReusableEvent_reuseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IReusableEvent_reuseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IReusableEvent_reuseResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IReusableEvent_reuseResponse")
            kw["aname"] = "_IReusableEvent_reuseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IReusableEvent_reuseResponse_Holder"
            self.pyclass = Holder

    class IMachineEvent_getMachineId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineEvent_getMachineId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineEvent_getMachineId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineEvent_getMachineId")
            kw["aname"] = "_IMachineEvent_getMachineId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineEvent_getMachineId_Holder"
            self.pyclass = Holder

    class IMachineEvent_getMachineIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineEvent_getMachineIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineEvent_getMachineIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineEvent_getMachineIdResponse")
            kw["aname"] = "_IMachineEvent_getMachineIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineEvent_getMachineIdResponse_Holder"
            self.pyclass = Holder

    class IMachineStateChangedEvent_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineStateChangedEvent_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineStateChangedEvent_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineStateChangedEvent_getState")
            kw["aname"] = "_IMachineStateChangedEvent_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineStateChangedEvent_getState_Holder"
            self.pyclass = Holder

    class IMachineStateChangedEvent_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineStateChangedEvent_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineStateChangedEvent_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MachineState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineStateChangedEvent_getStateResponse")
            kw["aname"] = "_IMachineStateChangedEvent_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineStateChangedEvent_getStateResponse_Holder"
            self.pyclass = Holder

    class IMachineDataChangedEvent_getTemporary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDataChangedEvent_getTemporary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDataChangedEvent_getTemporary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDataChangedEvent_getTemporary")
            kw["aname"] = "_IMachineDataChangedEvent_getTemporary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDataChangedEvent_getTemporary_Holder"
            self.pyclass = Holder

    class IMachineDataChangedEvent_getTemporaryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDataChangedEvent_getTemporaryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDataChangedEvent_getTemporaryResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDataChangedEvent_getTemporaryResponse")
            kw["aname"] = "_IMachineDataChangedEvent_getTemporaryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDataChangedEvent_getTemporaryResponse_Holder"
            self.pyclass = Holder

    class IMediumRegisteredEvent_getMediumId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumRegisteredEvent_getMediumId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumRegisteredEvent_getMediumId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumRegisteredEvent_getMediumId")
            kw["aname"] = "_IMediumRegisteredEvent_getMediumId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumRegisteredEvent_getMediumId_Holder"
            self.pyclass = Holder

    class IMediumRegisteredEvent_getMediumIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumRegisteredEvent_getMediumIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumRegisteredEvent_getMediumIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumRegisteredEvent_getMediumIdResponse")
            kw["aname"] = "_IMediumRegisteredEvent_getMediumIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumRegisteredEvent_getMediumIdResponse_Holder"
            self.pyclass = Holder

    class IMediumRegisteredEvent_getMediumType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumRegisteredEvent_getMediumType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumRegisteredEvent_getMediumType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumRegisteredEvent_getMediumType")
            kw["aname"] = "_IMediumRegisteredEvent_getMediumType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumRegisteredEvent_getMediumType_Holder"
            self.pyclass = Holder

    class IMediumRegisteredEvent_getMediumTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumRegisteredEvent_getMediumTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumRegisteredEvent_getMediumTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumRegisteredEvent_getMediumTypeResponse")
            kw["aname"] = "_IMediumRegisteredEvent_getMediumTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumRegisteredEvent_getMediumTypeResponse_Holder"
            self.pyclass = Holder

    class IMediumRegisteredEvent_getRegistered_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumRegisteredEvent_getRegistered"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumRegisteredEvent_getRegistered_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumRegisteredEvent_getRegistered")
            kw["aname"] = "_IMediumRegisteredEvent_getRegistered"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumRegisteredEvent_getRegistered_Holder"
            self.pyclass = Holder

    class IMediumRegisteredEvent_getRegisteredResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumRegisteredEvent_getRegisteredResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumRegisteredEvent_getRegisteredResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumRegisteredEvent_getRegisteredResponse")
            kw["aname"] = "_IMediumRegisteredEvent_getRegisteredResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumRegisteredEvent_getRegisteredResponse_Holder"
            self.pyclass = Holder

    class IMediumConfigChangedEvent_getMedium_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumConfigChangedEvent_getMedium"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumConfigChangedEvent_getMedium_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumConfigChangedEvent_getMedium")
            kw["aname"] = "_IMediumConfigChangedEvent_getMedium"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumConfigChangedEvent_getMedium_Holder"
            self.pyclass = Holder

    class IMediumConfigChangedEvent_getMediumResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumConfigChangedEvent_getMediumResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumConfigChangedEvent_getMediumResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumConfigChangedEvent_getMediumResponse")
            kw["aname"] = "_IMediumConfigChangedEvent_getMediumResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumConfigChangedEvent_getMediumResponse_Holder"
            self.pyclass = Holder

    class IMachineRegisteredEvent_getRegistered_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineRegisteredEvent_getRegistered"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineRegisteredEvent_getRegistered_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineRegisteredEvent_getRegistered")
            kw["aname"] = "_IMachineRegisteredEvent_getRegistered"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineRegisteredEvent_getRegistered_Holder"
            self.pyclass = Holder

    class IMachineRegisteredEvent_getRegisteredResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineRegisteredEvent_getRegisteredResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineRegisteredEvent_getRegisteredResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineRegisteredEvent_getRegisteredResponse")
            kw["aname"] = "_IMachineRegisteredEvent_getRegisteredResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineRegisteredEvent_getRegisteredResponse_Holder"
            self.pyclass = Holder

    class ISessionStateChangedEvent_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISessionStateChangedEvent_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISessionStateChangedEvent_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISessionStateChangedEvent_getState")
            kw["aname"] = "_ISessionStateChangedEvent_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISessionStateChangedEvent_getState_Holder"
            self.pyclass = Holder

    class ISessionStateChangedEvent_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISessionStateChangedEvent_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISessionStateChangedEvent_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","SessionState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISessionStateChangedEvent_getStateResponse")
            kw["aname"] = "_ISessionStateChangedEvent_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISessionStateChangedEvent_getStateResponse_Holder"
            self.pyclass = Holder

    class IGuestPropertyChangedEvent_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestPropertyChangedEvent_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestPropertyChangedEvent_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestPropertyChangedEvent_getName")
            kw["aname"] = "_IGuestPropertyChangedEvent_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestPropertyChangedEvent_getName_Holder"
            self.pyclass = Holder

    class IGuestPropertyChangedEvent_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestPropertyChangedEvent_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestPropertyChangedEvent_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestPropertyChangedEvent_getNameResponse")
            kw["aname"] = "_IGuestPropertyChangedEvent_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestPropertyChangedEvent_getNameResponse_Holder"
            self.pyclass = Holder

    class IGuestPropertyChangedEvent_getValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestPropertyChangedEvent_getValue"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestPropertyChangedEvent_getValue_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestPropertyChangedEvent_getValue")
            kw["aname"] = "_IGuestPropertyChangedEvent_getValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestPropertyChangedEvent_getValue_Holder"
            self.pyclass = Holder

    class IGuestPropertyChangedEvent_getValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestPropertyChangedEvent_getValueResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestPropertyChangedEvent_getValueResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestPropertyChangedEvent_getValueResponse")
            kw["aname"] = "_IGuestPropertyChangedEvent_getValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestPropertyChangedEvent_getValueResponse_Holder"
            self.pyclass = Holder

    class IGuestPropertyChangedEvent_getFlags_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestPropertyChangedEvent_getFlags"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestPropertyChangedEvent_getFlags_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestPropertyChangedEvent_getFlags")
            kw["aname"] = "_IGuestPropertyChangedEvent_getFlags"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestPropertyChangedEvent_getFlags_Holder"
            self.pyclass = Holder

    class IGuestPropertyChangedEvent_getFlagsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestPropertyChangedEvent_getFlagsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestPropertyChangedEvent_getFlagsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestPropertyChangedEvent_getFlagsResponse")
            kw["aname"] = "_IGuestPropertyChangedEvent_getFlagsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestPropertyChangedEvent_getFlagsResponse_Holder"
            self.pyclass = Holder

    class ISnapshotEvent_getSnapshotId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshotEvent_getSnapshotId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshotEvent_getSnapshotId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshotEvent_getSnapshotId")
            kw["aname"] = "_ISnapshotEvent_getSnapshotId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshotEvent_getSnapshotId_Holder"
            self.pyclass = Holder

    class ISnapshotEvent_getSnapshotIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshotEvent_getSnapshotIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshotEvent_getSnapshotIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshotEvent_getSnapshotIdResponse")
            kw["aname"] = "_ISnapshotEvent_getSnapshotIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshotEvent_getSnapshotIdResponse_Holder"
            self.pyclass = Holder

    class ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getVisible_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getVisible"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getVisible_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getVisible")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getVisible"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getVisible_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getVisibleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getVisibleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getVisibleResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getVisibleResponse")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getVisibleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getVisibleResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getAlpha_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getAlpha"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getAlpha_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getAlpha")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getAlpha"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getAlpha_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getAlphaResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getAlphaResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getAlphaResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getAlphaResponse")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getAlphaResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getAlphaResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getXhot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getXhot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getXhot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getXhot")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getXhot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getXhot_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getXhotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getXhotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getXhotResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getXhotResponse")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getXhotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getXhotResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getYhot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getYhot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getYhot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getYhot")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getYhot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getYhot_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getYhotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getYhotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getYhotResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getYhotResponse")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getYhotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getYhotResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getWidth_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getWidth"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getWidth_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getWidth")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getWidth"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getWidth_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getWidthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getWidthResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getWidthResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getWidthResponse")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getWidthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getWidthResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getHeight_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getHeight"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getHeight_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getHeight")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getHeight"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getHeight_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getHeightResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getHeightResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getHeightResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getHeightResponse")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getHeightResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getHeightResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getShape_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getShape"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getShape_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getShape")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getShape"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getShape_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getShapeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getShapeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getShapeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getShapeResponse")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getShapeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getShapeResponse_Holder"
            self.pyclass = Holder

    class IMouseCapabilityChangedEvent_getSupportsAbsolute_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouseCapabilityChangedEvent_getSupportsAbsolute"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouseCapabilityChangedEvent_getSupportsAbsolute_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouseCapabilityChangedEvent_getSupportsAbsolute")
            kw["aname"] = "_IMouseCapabilityChangedEvent_getSupportsAbsolute"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouseCapabilityChangedEvent_getSupportsAbsolute_Holder"
            self.pyclass = Holder

    class IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse")
            kw["aname"] = "_IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse_Holder"
            self.pyclass = Holder

    class IMouseCapabilityChangedEvent_getSupportsRelative_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouseCapabilityChangedEvent_getSupportsRelative"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouseCapabilityChangedEvent_getSupportsRelative_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouseCapabilityChangedEvent_getSupportsRelative")
            kw["aname"] = "_IMouseCapabilityChangedEvent_getSupportsRelative"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouseCapabilityChangedEvent_getSupportsRelative_Holder"
            self.pyclass = Holder

    class IMouseCapabilityChangedEvent_getSupportsRelativeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouseCapabilityChangedEvent_getSupportsRelativeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouseCapabilityChangedEvent_getSupportsRelativeResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouseCapabilityChangedEvent_getSupportsRelativeResponse")
            kw["aname"] = "_IMouseCapabilityChangedEvent_getSupportsRelativeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouseCapabilityChangedEvent_getSupportsRelativeResponse_Holder"
            self.pyclass = Holder

    class IMouseCapabilityChangedEvent_getSupportsMultiTouch_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouseCapabilityChangedEvent_getSupportsMultiTouch"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouseCapabilityChangedEvent_getSupportsMultiTouch_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouseCapabilityChangedEvent_getSupportsMultiTouch")
            kw["aname"] = "_IMouseCapabilityChangedEvent_getSupportsMultiTouch"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouseCapabilityChangedEvent_getSupportsMultiTouch_Holder"
            self.pyclass = Holder

    class IMouseCapabilityChangedEvent_getSupportsMultiTouchResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouseCapabilityChangedEvent_getSupportsMultiTouchResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouseCapabilityChangedEvent_getSupportsMultiTouchResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouseCapabilityChangedEvent_getSupportsMultiTouchResponse")
            kw["aname"] = "_IMouseCapabilityChangedEvent_getSupportsMultiTouchResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouseCapabilityChangedEvent_getSupportsMultiTouchResponse_Holder"
            self.pyclass = Holder

    class IMouseCapabilityChangedEvent_getNeedsHostCursor_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouseCapabilityChangedEvent_getNeedsHostCursor"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouseCapabilityChangedEvent_getNeedsHostCursor_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouseCapabilityChangedEvent_getNeedsHostCursor")
            kw["aname"] = "_IMouseCapabilityChangedEvent_getNeedsHostCursor"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouseCapabilityChangedEvent_getNeedsHostCursor_Holder"
            self.pyclass = Holder

    class IMouseCapabilityChangedEvent_getNeedsHostCursorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouseCapabilityChangedEvent_getNeedsHostCursorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouseCapabilityChangedEvent_getNeedsHostCursorResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouseCapabilityChangedEvent_getNeedsHostCursorResponse")
            kw["aname"] = "_IMouseCapabilityChangedEvent_getNeedsHostCursorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouseCapabilityChangedEvent_getNeedsHostCursorResponse_Holder"
            self.pyclass = Holder

    class IKeyboardLedsChangedEvent_getNumLock_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboardLedsChangedEvent_getNumLock"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboardLedsChangedEvent_getNumLock_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboardLedsChangedEvent_getNumLock")
            kw["aname"] = "_IKeyboardLedsChangedEvent_getNumLock"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IKeyboardLedsChangedEvent_getNumLock_Holder"
            self.pyclass = Holder

    class IKeyboardLedsChangedEvent_getNumLockResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboardLedsChangedEvent_getNumLockResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboardLedsChangedEvent_getNumLockResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboardLedsChangedEvent_getNumLockResponse")
            kw["aname"] = "_IKeyboardLedsChangedEvent_getNumLockResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IKeyboardLedsChangedEvent_getNumLockResponse_Holder"
            self.pyclass = Holder

    class IKeyboardLedsChangedEvent_getCapsLock_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboardLedsChangedEvent_getCapsLock"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboardLedsChangedEvent_getCapsLock_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboardLedsChangedEvent_getCapsLock")
            kw["aname"] = "_IKeyboardLedsChangedEvent_getCapsLock"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IKeyboardLedsChangedEvent_getCapsLock_Holder"
            self.pyclass = Holder

    class IKeyboardLedsChangedEvent_getCapsLockResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboardLedsChangedEvent_getCapsLockResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboardLedsChangedEvent_getCapsLockResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboardLedsChangedEvent_getCapsLockResponse")
            kw["aname"] = "_IKeyboardLedsChangedEvent_getCapsLockResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IKeyboardLedsChangedEvent_getCapsLockResponse_Holder"
            self.pyclass = Holder

    class IKeyboardLedsChangedEvent_getScrollLock_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboardLedsChangedEvent_getScrollLock"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboardLedsChangedEvent_getScrollLock_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboardLedsChangedEvent_getScrollLock")
            kw["aname"] = "_IKeyboardLedsChangedEvent_getScrollLock"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IKeyboardLedsChangedEvent_getScrollLock_Holder"
            self.pyclass = Holder

    class IKeyboardLedsChangedEvent_getScrollLockResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboardLedsChangedEvent_getScrollLockResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboardLedsChangedEvent_getScrollLockResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboardLedsChangedEvent_getScrollLockResponse")
            kw["aname"] = "_IKeyboardLedsChangedEvent_getScrollLockResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IKeyboardLedsChangedEvent_getScrollLockResponse_Holder"
            self.pyclass = Holder

    class IStateChangedEvent_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStateChangedEvent_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStateChangedEvent_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStateChangedEvent_getState")
            kw["aname"] = "_IStateChangedEvent_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStateChangedEvent_getState_Holder"
            self.pyclass = Holder

    class IStateChangedEvent_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStateChangedEvent_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStateChangedEvent_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MachineState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStateChangedEvent_getStateResponse")
            kw["aname"] = "_IStateChangedEvent_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStateChangedEvent_getStateResponse_Holder"
            self.pyclass = Holder

    class IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapterChangedEvent_getNetworkAdapter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapterChangedEvent_getNetworkAdapter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapterChangedEvent_getNetworkAdapter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapterChangedEvent_getNetworkAdapter")
            kw["aname"] = "_INetworkAdapterChangedEvent_getNetworkAdapter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapterChangedEvent_getNetworkAdapter_Holder"
            self.pyclass = Holder

    class INetworkAdapterChangedEvent_getNetworkAdapterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapterChangedEvent_getNetworkAdapterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapterChangedEvent_getNetworkAdapterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapterChangedEvent_getNetworkAdapterResponse")
            kw["aname"] = "_INetworkAdapterChangedEvent_getNetworkAdapterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapterChangedEvent_getNetworkAdapterResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapterChangedEvent_getAudioAdapter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapterChangedEvent_getAudioAdapter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapterChangedEvent_getAudioAdapter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapterChangedEvent_getAudioAdapter")
            kw["aname"] = "_IAudioAdapterChangedEvent_getAudioAdapter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAudioAdapterChangedEvent_getAudioAdapter_Holder"
            self.pyclass = Holder

    class IAudioAdapterChangedEvent_getAudioAdapterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapterChangedEvent_getAudioAdapterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapterChangedEvent_getAudioAdapterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapterChangedEvent_getAudioAdapterResponse")
            kw["aname"] = "_IAudioAdapterChangedEvent_getAudioAdapterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAudioAdapterChangedEvent_getAudioAdapterResponse_Holder"
            self.pyclass = Holder

    class ISerialPortChangedEvent_getSerialPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPortChangedEvent_getSerialPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPortChangedEvent_getSerialPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPortChangedEvent_getSerialPort")
            kw["aname"] = "_ISerialPortChangedEvent_getSerialPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPortChangedEvent_getSerialPort_Holder"
            self.pyclass = Holder

    class ISerialPortChangedEvent_getSerialPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPortChangedEvent_getSerialPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPortChangedEvent_getSerialPortResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPortChangedEvent_getSerialPortResponse")
            kw["aname"] = "_ISerialPortChangedEvent_getSerialPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPortChangedEvent_getSerialPortResponse_Holder"
            self.pyclass = Holder

    class IParallelPortChangedEvent_getParallelPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPortChangedEvent_getParallelPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPortChangedEvent_getParallelPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPortChangedEvent_getParallelPort")
            kw["aname"] = "_IParallelPortChangedEvent_getParallelPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IParallelPortChangedEvent_getParallelPort_Holder"
            self.pyclass = Holder

    class IParallelPortChangedEvent_getParallelPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPortChangedEvent_getParallelPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPortChangedEvent_getParallelPortResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPortChangedEvent_getParallelPortResponse")
            kw["aname"] = "_IParallelPortChangedEvent_getParallelPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IParallelPortChangedEvent_getParallelPortResponse_Holder"
            self.pyclass = Holder

    class IStorageControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IStorageControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IStorageControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IStorageControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IMediumChangedEvent_getMediumAttachment_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumChangedEvent_getMediumAttachment"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumChangedEvent_getMediumAttachment_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumChangedEvent_getMediumAttachment")
            kw["aname"] = "_IMediumChangedEvent_getMediumAttachment"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumChangedEvent_getMediumAttachment_Holder"
            self.pyclass = Holder

    class IMediumChangedEvent_getMediumAttachmentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumChangedEvent_getMediumAttachmentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumChangedEvent_getMediumAttachmentResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IMediumAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumChangedEvent_getMediumAttachmentResponse")
            kw["aname"] = "_IMediumChangedEvent_getMediumAttachmentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumChangedEvent_getMediumAttachmentResponse_Holder"
            self.pyclass = Holder

    class IClipboardModeChangedEvent_getClipboardMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IClipboardModeChangedEvent_getClipboardMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IClipboardModeChangedEvent_getClipboardMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IClipboardModeChangedEvent_getClipboardMode")
            kw["aname"] = "_IClipboardModeChangedEvent_getClipboardMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IClipboardModeChangedEvent_getClipboardMode_Holder"
            self.pyclass = Holder

    class IClipboardModeChangedEvent_getClipboardModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IClipboardModeChangedEvent_getClipboardModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IClipboardModeChangedEvent_getClipboardModeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ClipboardMode",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IClipboardModeChangedEvent_getClipboardModeResponse")
            kw["aname"] = "_IClipboardModeChangedEvent_getClipboardModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IClipboardModeChangedEvent_getClipboardModeResponse_Holder"
            self.pyclass = Holder

    class IDnDModeChangedEvent_getDndMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDModeChangedEvent_getDndMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDModeChangedEvent_getDndMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDModeChangedEvent_getDndMode")
            kw["aname"] = "_IDnDModeChangedEvent_getDndMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDnDModeChangedEvent_getDndMode_Holder"
            self.pyclass = Holder

    class IDnDModeChangedEvent_getDndModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDnDModeChangedEvent_getDndModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDnDModeChangedEvent_getDndModeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","DnDMode",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDnDModeChangedEvent_getDndModeResponse")
            kw["aname"] = "_IDnDModeChangedEvent_getDndModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDnDModeChangedEvent_getDndModeResponse_Holder"
            self.pyclass = Holder

    class ICPUChangedEvent_getCPU_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICPUChangedEvent_getCPU"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICPUChangedEvent_getCPU_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICPUChangedEvent_getCPU")
            kw["aname"] = "_ICPUChangedEvent_getCPU"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICPUChangedEvent_getCPU_Holder"
            self.pyclass = Holder

    class ICPUChangedEvent_getCPUResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICPUChangedEvent_getCPUResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICPUChangedEvent_getCPUResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICPUChangedEvent_getCPUResponse")
            kw["aname"] = "_ICPUChangedEvent_getCPUResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICPUChangedEvent_getCPUResponse_Holder"
            self.pyclass = Holder

    class ICPUChangedEvent_getAdd_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICPUChangedEvent_getAdd"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICPUChangedEvent_getAdd_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICPUChangedEvent_getAdd")
            kw["aname"] = "_ICPUChangedEvent_getAdd"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICPUChangedEvent_getAdd_Holder"
            self.pyclass = Holder

    class ICPUChangedEvent_getAddResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICPUChangedEvent_getAddResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICPUChangedEvent_getAddResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICPUChangedEvent_getAddResponse")
            kw["aname"] = "_ICPUChangedEvent_getAddResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICPUChangedEvent_getAddResponse_Holder"
            self.pyclass = Holder

    class ICPUExecutionCapChangedEvent_getExecutionCap_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICPUExecutionCapChangedEvent_getExecutionCap"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICPUExecutionCapChangedEvent_getExecutionCap_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICPUExecutionCapChangedEvent_getExecutionCap")
            kw["aname"] = "_ICPUExecutionCapChangedEvent_getExecutionCap"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICPUExecutionCapChangedEvent_getExecutionCap_Holder"
            self.pyclass = Holder

    class ICPUExecutionCapChangedEvent_getExecutionCapResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICPUExecutionCapChangedEvent_getExecutionCapResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICPUExecutionCapChangedEvent_getExecutionCapResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICPUExecutionCapChangedEvent_getExecutionCapResponse")
            kw["aname"] = "_ICPUExecutionCapChangedEvent_getExecutionCapResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICPUExecutionCapChangedEvent_getExecutionCapResponse_Holder"
            self.pyclass = Holder

    class IGuestKeyboardEvent_getScancodes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestKeyboardEvent_getScancodes"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestKeyboardEvent_getScancodes_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestKeyboardEvent_getScancodes")
            kw["aname"] = "_IGuestKeyboardEvent_getScancodes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestKeyboardEvent_getScancodes_Holder"
            self.pyclass = Holder

    class IGuestKeyboardEvent_getScancodesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestKeyboardEvent_getScancodesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestKeyboardEvent_getScancodesResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestKeyboardEvent_getScancodesResponse")
            kw["aname"] = "_IGuestKeyboardEvent_getScancodesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuestKeyboardEvent_getScancodesResponse_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getMode")
            kw["aname"] = "_IGuestMouseEvent_getMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getMode_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getModeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","GuestMouseEventMode",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getModeResponse")
            kw["aname"] = "_IGuestMouseEvent_getModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getModeResponse_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getX_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getX"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getX_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getX")
            kw["aname"] = "_IGuestMouseEvent_getX"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getX_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getXResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getXResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getXResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getXResponse")
            kw["aname"] = "_IGuestMouseEvent_getXResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getXResponse_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getY_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getY"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getY_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getY")
            kw["aname"] = "_IGuestMouseEvent_getY"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getY_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getYResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getYResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getYResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getYResponse")
            kw["aname"] = "_IGuestMouseEvent_getYResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getYResponse_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getZ_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getZ"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getZ_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getZ")
            kw["aname"] = "_IGuestMouseEvent_getZ"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getZ_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getZResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getZResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getZResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getZResponse")
            kw["aname"] = "_IGuestMouseEvent_getZResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getZResponse_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getW_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getW"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getW_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getW")
            kw["aname"] = "_IGuestMouseEvent_getW"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getW_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getWResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getWResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getWResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getWResponse")
            kw["aname"] = "_IGuestMouseEvent_getWResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getWResponse_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getButtons_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getButtons"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getButtons_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getButtons")
            kw["aname"] = "_IGuestMouseEvent_getButtons"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getButtons_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getButtonsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getButtonsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getButtonsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getButtonsResponse")
            kw["aname"] = "_IGuestMouseEvent_getButtonsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getButtonsResponse_Holder"
            self.pyclass = Holder

    class IGuestMultiTouchEvent_getContactCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMultiTouchEvent_getContactCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMultiTouchEvent_getContactCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMultiTouchEvent_getContactCount")
            kw["aname"] = "_IGuestMultiTouchEvent_getContactCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMultiTouchEvent_getContactCount_Holder"
            self.pyclass = Holder

    class IGuestMultiTouchEvent_getContactCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMultiTouchEvent_getContactCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMultiTouchEvent_getContactCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMultiTouchEvent_getContactCountResponse")
            kw["aname"] = "_IGuestMultiTouchEvent_getContactCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMultiTouchEvent_getContactCountResponse_Holder"
            self.pyclass = Holder

    class IGuestMultiTouchEvent_getXPositions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMultiTouchEvent_getXPositions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMultiTouchEvent_getXPositions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMultiTouchEvent_getXPositions")
            kw["aname"] = "_IGuestMultiTouchEvent_getXPositions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMultiTouchEvent_getXPositions_Holder"
            self.pyclass = Holder

    class IGuestMultiTouchEvent_getXPositionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMultiTouchEvent_getXPositionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMultiTouchEvent_getXPositionsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ishort(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMultiTouchEvent_getXPositionsResponse")
            kw["aname"] = "_IGuestMultiTouchEvent_getXPositionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuestMultiTouchEvent_getXPositionsResponse_Holder"
            self.pyclass = Holder

    class IGuestMultiTouchEvent_getYPositions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMultiTouchEvent_getYPositions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMultiTouchEvent_getYPositions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMultiTouchEvent_getYPositions")
            kw["aname"] = "_IGuestMultiTouchEvent_getYPositions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMultiTouchEvent_getYPositions_Holder"
            self.pyclass = Holder

    class IGuestMultiTouchEvent_getYPositionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMultiTouchEvent_getYPositionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMultiTouchEvent_getYPositionsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ishort(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMultiTouchEvent_getYPositionsResponse")
            kw["aname"] = "_IGuestMultiTouchEvent_getYPositionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuestMultiTouchEvent_getYPositionsResponse_Holder"
            self.pyclass = Holder

    class IGuestMultiTouchEvent_getContactIds_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMultiTouchEvent_getContactIds"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMultiTouchEvent_getContactIds_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMultiTouchEvent_getContactIds")
            kw["aname"] = "_IGuestMultiTouchEvent_getContactIds"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMultiTouchEvent_getContactIds_Holder"
            self.pyclass = Holder

    class IGuestMultiTouchEvent_getContactIdsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMultiTouchEvent_getContactIdsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMultiTouchEvent_getContactIdsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMultiTouchEvent_getContactIdsResponse")
            kw["aname"] = "_IGuestMultiTouchEvent_getContactIdsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuestMultiTouchEvent_getContactIdsResponse_Holder"
            self.pyclass = Holder

    class IGuestMultiTouchEvent_getContactFlags_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMultiTouchEvent_getContactFlags"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMultiTouchEvent_getContactFlags_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMultiTouchEvent_getContactFlags")
            kw["aname"] = "_IGuestMultiTouchEvent_getContactFlags"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMultiTouchEvent_getContactFlags_Holder"
            self.pyclass = Holder

    class IGuestMultiTouchEvent_getContactFlagsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMultiTouchEvent_getContactFlagsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMultiTouchEvent_getContactFlagsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMultiTouchEvent_getContactFlagsResponse")
            kw["aname"] = "_IGuestMultiTouchEvent_getContactFlagsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuestMultiTouchEvent_getContactFlagsResponse_Holder"
            self.pyclass = Holder

    class IGuestMultiTouchEvent_getScanTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMultiTouchEvent_getScanTime"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMultiTouchEvent_getScanTime_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMultiTouchEvent_getScanTime")
            kw["aname"] = "_IGuestMultiTouchEvent_getScanTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMultiTouchEvent_getScanTime_Holder"
            self.pyclass = Holder

    class IGuestMultiTouchEvent_getScanTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMultiTouchEvent_getScanTimeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMultiTouchEvent_getScanTimeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMultiTouchEvent_getScanTimeResponse")
            kw["aname"] = "_IGuestMultiTouchEvent_getScanTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMultiTouchEvent_getScanTimeResponse_Holder"
            self.pyclass = Holder

    class IGuestSessionEvent_getSession_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSessionEvent_getSession"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSessionEvent_getSession_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSessionEvent_getSession")
            kw["aname"] = "_IGuestSessionEvent_getSession"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSessionEvent_getSession_Holder"
            self.pyclass = Holder

    class IGuestSessionEvent_getSessionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSessionEvent_getSessionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSessionEvent_getSessionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSessionEvent_getSessionResponse")
            kw["aname"] = "_IGuestSessionEvent_getSessionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSessionEvent_getSessionResponse_Holder"
            self.pyclass = Holder

    class IGuestSessionStateChangedEvent_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSessionStateChangedEvent_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSessionStateChangedEvent_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSessionStateChangedEvent_getId")
            kw["aname"] = "_IGuestSessionStateChangedEvent_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSessionStateChangedEvent_getId_Holder"
            self.pyclass = Holder

    class IGuestSessionStateChangedEvent_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSessionStateChangedEvent_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSessionStateChangedEvent_getIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSessionStateChangedEvent_getIdResponse")
            kw["aname"] = "_IGuestSessionStateChangedEvent_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSessionStateChangedEvent_getIdResponse_Holder"
            self.pyclass = Holder

    class IGuestSessionStateChangedEvent_getStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSessionStateChangedEvent_getStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSessionStateChangedEvent_getStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSessionStateChangedEvent_getStatus")
            kw["aname"] = "_IGuestSessionStateChangedEvent_getStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSessionStateChangedEvent_getStatus_Holder"
            self.pyclass = Holder

    class IGuestSessionStateChangedEvent_getStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSessionStateChangedEvent_getStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSessionStateChangedEvent_getStatusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","GuestSessionStatus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSessionStateChangedEvent_getStatusResponse")
            kw["aname"] = "_IGuestSessionStateChangedEvent_getStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSessionStateChangedEvent_getStatusResponse_Holder"
            self.pyclass = Holder

    class IGuestSessionStateChangedEvent_getError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSessionStateChangedEvent_getError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSessionStateChangedEvent_getError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSessionStateChangedEvent_getError")
            kw["aname"] = "_IGuestSessionStateChangedEvent_getError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSessionStateChangedEvent_getError_Holder"
            self.pyclass = Holder

    class IGuestSessionStateChangedEvent_getErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSessionStateChangedEvent_getErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSessionStateChangedEvent_getErrorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSessionStateChangedEvent_getErrorResponse")
            kw["aname"] = "_IGuestSessionStateChangedEvent_getErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSessionStateChangedEvent_getErrorResponse_Holder"
            self.pyclass = Holder

    class IGuestSessionRegisteredEvent_getRegistered_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSessionRegisteredEvent_getRegistered"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSessionRegisteredEvent_getRegistered_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSessionRegisteredEvent_getRegistered")
            kw["aname"] = "_IGuestSessionRegisteredEvent_getRegistered"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestSessionRegisteredEvent_getRegistered_Holder"
            self.pyclass = Holder

    class IGuestSessionRegisteredEvent_getRegisteredResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestSessionRegisteredEvent_getRegisteredResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestSessionRegisteredEvent_getRegisteredResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestSessionRegisteredEvent_getRegisteredResponse")
            kw["aname"] = "_IGuestSessionRegisteredEvent_getRegisteredResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestSessionRegisteredEvent_getRegisteredResponse_Holder"
            self.pyclass = Holder

    class IGuestProcessEvent_getProcess_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessEvent_getProcess"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessEvent_getProcess_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessEvent_getProcess")
            kw["aname"] = "_IGuestProcessEvent_getProcess"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestProcessEvent_getProcess_Holder"
            self.pyclass = Holder

    class IGuestProcessEvent_getProcessResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessEvent_getProcessResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessEvent_getProcessResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessEvent_getProcessResponse")
            kw["aname"] = "_IGuestProcessEvent_getProcessResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestProcessEvent_getProcessResponse_Holder"
            self.pyclass = Holder

    class IGuestProcessEvent_getPid_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessEvent_getPid"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessEvent_getPid_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessEvent_getPid")
            kw["aname"] = "_IGuestProcessEvent_getPid"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestProcessEvent_getPid_Holder"
            self.pyclass = Holder

    class IGuestProcessEvent_getPidResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessEvent_getPidResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessEvent_getPidResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessEvent_getPidResponse")
            kw["aname"] = "_IGuestProcessEvent_getPidResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestProcessEvent_getPidResponse_Holder"
            self.pyclass = Holder

    class IGuestProcessRegisteredEvent_getRegistered_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessRegisteredEvent_getRegistered"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessRegisteredEvent_getRegistered_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessRegisteredEvent_getRegistered")
            kw["aname"] = "_IGuestProcessRegisteredEvent_getRegistered"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestProcessRegisteredEvent_getRegistered_Holder"
            self.pyclass = Holder

    class IGuestProcessRegisteredEvent_getRegisteredResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessRegisteredEvent_getRegisteredResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessRegisteredEvent_getRegisteredResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessRegisteredEvent_getRegisteredResponse")
            kw["aname"] = "_IGuestProcessRegisteredEvent_getRegisteredResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestProcessRegisteredEvent_getRegisteredResponse_Holder"
            self.pyclass = Holder

    class IGuestProcessStateChangedEvent_getStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessStateChangedEvent_getStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessStateChangedEvent_getStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessStateChangedEvent_getStatus")
            kw["aname"] = "_IGuestProcessStateChangedEvent_getStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestProcessStateChangedEvent_getStatus_Holder"
            self.pyclass = Holder

    class IGuestProcessStateChangedEvent_getStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessStateChangedEvent_getStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessStateChangedEvent_getStatusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ProcessStatus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessStateChangedEvent_getStatusResponse")
            kw["aname"] = "_IGuestProcessStateChangedEvent_getStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestProcessStateChangedEvent_getStatusResponse_Holder"
            self.pyclass = Holder

    class IGuestProcessStateChangedEvent_getError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessStateChangedEvent_getError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessStateChangedEvent_getError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessStateChangedEvent_getError")
            kw["aname"] = "_IGuestProcessStateChangedEvent_getError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestProcessStateChangedEvent_getError_Holder"
            self.pyclass = Holder

    class IGuestProcessStateChangedEvent_getErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessStateChangedEvent_getErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessStateChangedEvent_getErrorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessStateChangedEvent_getErrorResponse")
            kw["aname"] = "_IGuestProcessStateChangedEvent_getErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestProcessStateChangedEvent_getErrorResponse_Holder"
            self.pyclass = Holder

    class IGuestProcessIOEvent_getHandle_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessIOEvent_getHandle"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessIOEvent_getHandle_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessIOEvent_getHandle")
            kw["aname"] = "_IGuestProcessIOEvent_getHandle"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestProcessIOEvent_getHandle_Holder"
            self.pyclass = Holder

    class IGuestProcessIOEvent_getHandleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessIOEvent_getHandleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessIOEvent_getHandleResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessIOEvent_getHandleResponse")
            kw["aname"] = "_IGuestProcessIOEvent_getHandleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestProcessIOEvent_getHandleResponse_Holder"
            self.pyclass = Holder

    class IGuestProcessIOEvent_getProcessed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessIOEvent_getProcessed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessIOEvent_getProcessed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessIOEvent_getProcessed")
            kw["aname"] = "_IGuestProcessIOEvent_getProcessed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestProcessIOEvent_getProcessed_Holder"
            self.pyclass = Holder

    class IGuestProcessIOEvent_getProcessedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessIOEvent_getProcessedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessIOEvent_getProcessedResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessIOEvent_getProcessedResponse")
            kw["aname"] = "_IGuestProcessIOEvent_getProcessedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestProcessIOEvent_getProcessedResponse_Holder"
            self.pyclass = Holder

    class IGuestProcessInputNotifyEvent_getStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessInputNotifyEvent_getStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessInputNotifyEvent_getStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessInputNotifyEvent_getStatus")
            kw["aname"] = "_IGuestProcessInputNotifyEvent_getStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestProcessInputNotifyEvent_getStatus_Holder"
            self.pyclass = Holder

    class IGuestProcessInputNotifyEvent_getStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessInputNotifyEvent_getStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessInputNotifyEvent_getStatusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ProcessInputStatus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessInputNotifyEvent_getStatusResponse")
            kw["aname"] = "_IGuestProcessInputNotifyEvent_getStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestProcessInputNotifyEvent_getStatusResponse_Holder"
            self.pyclass = Holder

    class IGuestProcessOutputEvent_getData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessOutputEvent_getData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessOutputEvent_getData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessOutputEvent_getData")
            kw["aname"] = "_IGuestProcessOutputEvent_getData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestProcessOutputEvent_getData_Holder"
            self.pyclass = Holder

    class IGuestProcessOutputEvent_getDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestProcessOutputEvent_getDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestProcessOutputEvent_getDataResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestProcessOutputEvent_getDataResponse")
            kw["aname"] = "_IGuestProcessOutputEvent_getDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestProcessOutputEvent_getDataResponse_Holder"
            self.pyclass = Holder

    class IGuestFileEvent_getFile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileEvent_getFile"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileEvent_getFile_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileEvent_getFile")
            kw["aname"] = "_IGuestFileEvent_getFile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestFileEvent_getFile_Holder"
            self.pyclass = Holder

    class IGuestFileEvent_getFileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileEvent_getFileResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileEvent_getFileResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileEvent_getFileResponse")
            kw["aname"] = "_IGuestFileEvent_getFileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestFileEvent_getFileResponse_Holder"
            self.pyclass = Holder

    class IGuestFileRegisteredEvent_getRegistered_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileRegisteredEvent_getRegistered"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileRegisteredEvent_getRegistered_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileRegisteredEvent_getRegistered")
            kw["aname"] = "_IGuestFileRegisteredEvent_getRegistered"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestFileRegisteredEvent_getRegistered_Holder"
            self.pyclass = Holder

    class IGuestFileRegisteredEvent_getRegisteredResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileRegisteredEvent_getRegisteredResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileRegisteredEvent_getRegisteredResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileRegisteredEvent_getRegisteredResponse")
            kw["aname"] = "_IGuestFileRegisteredEvent_getRegisteredResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestFileRegisteredEvent_getRegisteredResponse_Holder"
            self.pyclass = Holder

    class IGuestFileStateChangedEvent_getStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileStateChangedEvent_getStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileStateChangedEvent_getStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileStateChangedEvent_getStatus")
            kw["aname"] = "_IGuestFileStateChangedEvent_getStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestFileStateChangedEvent_getStatus_Holder"
            self.pyclass = Holder

    class IGuestFileStateChangedEvent_getStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileStateChangedEvent_getStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileStateChangedEvent_getStatusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","FileStatus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileStateChangedEvent_getStatusResponse")
            kw["aname"] = "_IGuestFileStateChangedEvent_getStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestFileStateChangedEvent_getStatusResponse_Holder"
            self.pyclass = Holder

    class IGuestFileStateChangedEvent_getError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileStateChangedEvent_getError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileStateChangedEvent_getError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileStateChangedEvent_getError")
            kw["aname"] = "_IGuestFileStateChangedEvent_getError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestFileStateChangedEvent_getError_Holder"
            self.pyclass = Holder

    class IGuestFileStateChangedEvent_getErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileStateChangedEvent_getErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileStateChangedEvent_getErrorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileStateChangedEvent_getErrorResponse")
            kw["aname"] = "_IGuestFileStateChangedEvent_getErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestFileStateChangedEvent_getErrorResponse_Holder"
            self.pyclass = Holder

    class IGuestFileIOEvent_getOffset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileIOEvent_getOffset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileIOEvent_getOffset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileIOEvent_getOffset")
            kw["aname"] = "_IGuestFileIOEvent_getOffset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestFileIOEvent_getOffset_Holder"
            self.pyclass = Holder

    class IGuestFileIOEvent_getOffsetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileIOEvent_getOffsetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileIOEvent_getOffsetResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileIOEvent_getOffsetResponse")
            kw["aname"] = "_IGuestFileIOEvent_getOffsetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestFileIOEvent_getOffsetResponse_Holder"
            self.pyclass = Holder

    class IGuestFileIOEvent_getProcessed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileIOEvent_getProcessed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileIOEvent_getProcessed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileIOEvent_getProcessed")
            kw["aname"] = "_IGuestFileIOEvent_getProcessed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestFileIOEvent_getProcessed_Holder"
            self.pyclass = Holder

    class IGuestFileIOEvent_getProcessedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileIOEvent_getProcessedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileIOEvent_getProcessedResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileIOEvent_getProcessedResponse")
            kw["aname"] = "_IGuestFileIOEvent_getProcessedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestFileIOEvent_getProcessedResponse_Holder"
            self.pyclass = Holder

    class IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IGuestFileSizeChangedEvent_getNewSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileSizeChangedEvent_getNewSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileSizeChangedEvent_getNewSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileSizeChangedEvent_getNewSize")
            kw["aname"] = "_IGuestFileSizeChangedEvent_getNewSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestFileSizeChangedEvent_getNewSize_Holder"
            self.pyclass = Holder

    class IGuestFileSizeChangedEvent_getNewSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileSizeChangedEvent_getNewSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileSizeChangedEvent_getNewSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileSizeChangedEvent_getNewSizeResponse")
            kw["aname"] = "_IGuestFileSizeChangedEvent_getNewSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestFileSizeChangedEvent_getNewSizeResponse_Holder"
            self.pyclass = Holder

    class IGuestFileReadEvent_getData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileReadEvent_getData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileReadEvent_getData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileReadEvent_getData")
            kw["aname"] = "_IGuestFileReadEvent_getData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestFileReadEvent_getData_Holder"
            self.pyclass = Holder

    class IGuestFileReadEvent_getDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileReadEvent_getDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileReadEvent_getDataResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileReadEvent_getDataResponse")
            kw["aname"] = "_IGuestFileReadEvent_getDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestFileReadEvent_getDataResponse_Holder"
            self.pyclass = Holder

    class IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceStateChangedEvent_getDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceStateChangedEvent_getDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceStateChangedEvent_getDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceStateChangedEvent_getDevice")
            kw["aname"] = "_IUSBDeviceStateChangedEvent_getDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceStateChangedEvent_getDevice_Holder"
            self.pyclass = Holder

    class IUSBDeviceStateChangedEvent_getDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceStateChangedEvent_getDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceStateChangedEvent_getDeviceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceStateChangedEvent_getDeviceResponse")
            kw["aname"] = "_IUSBDeviceStateChangedEvent_getDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceStateChangedEvent_getDeviceResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceStateChangedEvent_getAttached_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceStateChangedEvent_getAttached"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceStateChangedEvent_getAttached_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceStateChangedEvent_getAttached")
            kw["aname"] = "_IUSBDeviceStateChangedEvent_getAttached"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceStateChangedEvent_getAttached_Holder"
            self.pyclass = Holder

    class IUSBDeviceStateChangedEvent_getAttachedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceStateChangedEvent_getAttachedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceStateChangedEvent_getAttachedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceStateChangedEvent_getAttachedResponse")
            kw["aname"] = "_IUSBDeviceStateChangedEvent_getAttachedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceStateChangedEvent_getAttachedResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceStateChangedEvent_getError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceStateChangedEvent_getError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceStateChangedEvent_getError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceStateChangedEvent_getError")
            kw["aname"] = "_IUSBDeviceStateChangedEvent_getError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceStateChangedEvent_getError_Holder"
            self.pyclass = Holder

    class IUSBDeviceStateChangedEvent_getErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceStateChangedEvent_getErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceStateChangedEvent_getErrorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceStateChangedEvent_getErrorResponse")
            kw["aname"] = "_IUSBDeviceStateChangedEvent_getErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceStateChangedEvent_getErrorResponse_Holder"
            self.pyclass = Holder

    class ISharedFolderChangedEvent_getScope_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolderChangedEvent_getScope"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolderChangedEvent_getScope_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolderChangedEvent_getScope")
            kw["aname"] = "_ISharedFolderChangedEvent_getScope"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISharedFolderChangedEvent_getScope_Holder"
            self.pyclass = Holder

    class ISharedFolderChangedEvent_getScopeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolderChangedEvent_getScopeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolderChangedEvent_getScopeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","Scope",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolderChangedEvent_getScopeResponse")
            kw["aname"] = "_ISharedFolderChangedEvent_getScopeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISharedFolderChangedEvent_getScopeResponse_Holder"
            self.pyclass = Holder

    class IRuntimeErrorEvent_getFatal_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRuntimeErrorEvent_getFatal"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRuntimeErrorEvent_getFatal_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRuntimeErrorEvent_getFatal")
            kw["aname"] = "_IRuntimeErrorEvent_getFatal"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRuntimeErrorEvent_getFatal_Holder"
            self.pyclass = Holder

    class IRuntimeErrorEvent_getFatalResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRuntimeErrorEvent_getFatalResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRuntimeErrorEvent_getFatalResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRuntimeErrorEvent_getFatalResponse")
            kw["aname"] = "_IRuntimeErrorEvent_getFatalResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRuntimeErrorEvent_getFatalResponse_Holder"
            self.pyclass = Holder

    class IRuntimeErrorEvent_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRuntimeErrorEvent_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRuntimeErrorEvent_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRuntimeErrorEvent_getId")
            kw["aname"] = "_IRuntimeErrorEvent_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRuntimeErrorEvent_getId_Holder"
            self.pyclass = Holder

    class IRuntimeErrorEvent_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRuntimeErrorEvent_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRuntimeErrorEvent_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRuntimeErrorEvent_getIdResponse")
            kw["aname"] = "_IRuntimeErrorEvent_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRuntimeErrorEvent_getIdResponse_Holder"
            self.pyclass = Holder

    class IRuntimeErrorEvent_getMessage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRuntimeErrorEvent_getMessage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRuntimeErrorEvent_getMessage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRuntimeErrorEvent_getMessage")
            kw["aname"] = "_IRuntimeErrorEvent_getMessage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRuntimeErrorEvent_getMessage_Holder"
            self.pyclass = Holder

    class IRuntimeErrorEvent_getMessageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRuntimeErrorEvent_getMessageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRuntimeErrorEvent_getMessageResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRuntimeErrorEvent_getMessageResponse")
            kw["aname"] = "_IRuntimeErrorEvent_getMessageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRuntimeErrorEvent_getMessageResponse_Holder"
            self.pyclass = Holder

    class IEventSourceChangedEvent_getListener_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSourceChangedEvent_getListener"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSourceChangedEvent_getListener_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSourceChangedEvent_getListener")
            kw["aname"] = "_IEventSourceChangedEvent_getListener"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEventSourceChangedEvent_getListener_Holder"
            self.pyclass = Holder

    class IEventSourceChangedEvent_getListenerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSourceChangedEvent_getListenerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSourceChangedEvent_getListenerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSourceChangedEvent_getListenerResponse")
            kw["aname"] = "_IEventSourceChangedEvent_getListenerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEventSourceChangedEvent_getListenerResponse_Holder"
            self.pyclass = Holder

    class IEventSourceChangedEvent_getAdd_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSourceChangedEvent_getAdd"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSourceChangedEvent_getAdd_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSourceChangedEvent_getAdd")
            kw["aname"] = "_IEventSourceChangedEvent_getAdd"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEventSourceChangedEvent_getAdd_Holder"
            self.pyclass = Holder

    class IEventSourceChangedEvent_getAddResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSourceChangedEvent_getAddResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSourceChangedEvent_getAddResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSourceChangedEvent_getAddResponse")
            kw["aname"] = "_IEventSourceChangedEvent_getAddResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEventSourceChangedEvent_getAddResponse_Holder"
            self.pyclass = Holder

    class IExtraDataChangedEvent_getMachineId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataChangedEvent_getMachineId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataChangedEvent_getMachineId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataChangedEvent_getMachineId")
            kw["aname"] = "_IExtraDataChangedEvent_getMachineId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IExtraDataChangedEvent_getMachineId_Holder"
            self.pyclass = Holder

    class IExtraDataChangedEvent_getMachineIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataChangedEvent_getMachineIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataChangedEvent_getMachineIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataChangedEvent_getMachineIdResponse")
            kw["aname"] = "_IExtraDataChangedEvent_getMachineIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IExtraDataChangedEvent_getMachineIdResponse_Holder"
            self.pyclass = Holder

    class IExtraDataChangedEvent_getKey_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataChangedEvent_getKey"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataChangedEvent_getKey_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataChangedEvent_getKey")
            kw["aname"] = "_IExtraDataChangedEvent_getKey"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IExtraDataChangedEvent_getKey_Holder"
            self.pyclass = Holder

    class IExtraDataChangedEvent_getKeyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataChangedEvent_getKeyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataChangedEvent_getKeyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataChangedEvent_getKeyResponse")
            kw["aname"] = "_IExtraDataChangedEvent_getKeyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IExtraDataChangedEvent_getKeyResponse_Holder"
            self.pyclass = Holder

    class IExtraDataChangedEvent_getValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataChangedEvent_getValue"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataChangedEvent_getValue_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataChangedEvent_getValue")
            kw["aname"] = "_IExtraDataChangedEvent_getValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IExtraDataChangedEvent_getValue_Holder"
            self.pyclass = Holder

    class IExtraDataChangedEvent_getValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataChangedEvent_getValueResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataChangedEvent_getValueResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataChangedEvent_getValueResponse")
            kw["aname"] = "_IExtraDataChangedEvent_getValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IExtraDataChangedEvent_getValueResponse_Holder"
            self.pyclass = Holder

    class IVetoEvent_addVeto_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_addVeto"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_addVeto_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reason", aname="_reason", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_addVeto")
            kw["aname"] = "_IVetoEvent_addVeto"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._reason = None
                    return
            Holder.__name__ = "IVetoEvent_addVeto_Holder"
            self.pyclass = Holder

    class IVetoEvent_addVetoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_addVetoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_addVetoResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_addVetoResponse")
            kw["aname"] = "_IVetoEvent_addVetoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVetoEvent_addVetoResponse_Holder"
            self.pyclass = Holder

    class IVetoEvent_isVetoed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_isVetoed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_isVetoed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_isVetoed")
            kw["aname"] = "_IVetoEvent_isVetoed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVetoEvent_isVetoed_Holder"
            self.pyclass = Holder

    class IVetoEvent_isVetoedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_isVetoedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_isVetoedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_isVetoedResponse")
            kw["aname"] = "_IVetoEvent_isVetoedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVetoEvent_isVetoedResponse_Holder"
            self.pyclass = Holder

    class IVetoEvent_getVetos_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_getVetos"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_getVetos_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_getVetos")
            kw["aname"] = "_IVetoEvent_getVetos"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVetoEvent_getVetos_Holder"
            self.pyclass = Holder

    class IVetoEvent_getVetosResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_getVetosResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_getVetosResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_getVetosResponse")
            kw["aname"] = "_IVetoEvent_getVetosResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVetoEvent_getVetosResponse_Holder"
            self.pyclass = Holder

    class IVetoEvent_addApproval_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_addApproval"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_addApproval_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reason", aname="_reason", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_addApproval")
            kw["aname"] = "_IVetoEvent_addApproval"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._reason = None
                    return
            Holder.__name__ = "IVetoEvent_addApproval_Holder"
            self.pyclass = Holder

    class IVetoEvent_addApprovalResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_addApprovalResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_addApprovalResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_addApprovalResponse")
            kw["aname"] = "_IVetoEvent_addApprovalResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVetoEvent_addApprovalResponse_Holder"
            self.pyclass = Holder

    class IVetoEvent_isApproved_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_isApproved"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_isApproved_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_isApproved")
            kw["aname"] = "_IVetoEvent_isApproved"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVetoEvent_isApproved_Holder"
            self.pyclass = Holder

    class IVetoEvent_isApprovedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_isApprovedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_isApprovedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_isApprovedResponse")
            kw["aname"] = "_IVetoEvent_isApprovedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVetoEvent_isApprovedResponse_Holder"
            self.pyclass = Holder

    class IVetoEvent_getApprovals_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_getApprovals"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_getApprovals_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_getApprovals")
            kw["aname"] = "_IVetoEvent_getApprovals"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVetoEvent_getApprovals_Holder"
            self.pyclass = Holder

    class IVetoEvent_getApprovalsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_getApprovalsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_getApprovalsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_getApprovalsResponse")
            kw["aname"] = "_IVetoEvent_getApprovalsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVetoEvent_getApprovalsResponse_Holder"
            self.pyclass = Holder

    class IExtraDataCanChangeEvent_getMachineId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataCanChangeEvent_getMachineId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataCanChangeEvent_getMachineId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataCanChangeEvent_getMachineId")
            kw["aname"] = "_IExtraDataCanChangeEvent_getMachineId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IExtraDataCanChangeEvent_getMachineId_Holder"
            self.pyclass = Holder

    class IExtraDataCanChangeEvent_getMachineIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataCanChangeEvent_getMachineIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataCanChangeEvent_getMachineIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataCanChangeEvent_getMachineIdResponse")
            kw["aname"] = "_IExtraDataCanChangeEvent_getMachineIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IExtraDataCanChangeEvent_getMachineIdResponse_Holder"
            self.pyclass = Holder

    class IExtraDataCanChangeEvent_getKey_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataCanChangeEvent_getKey"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataCanChangeEvent_getKey_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataCanChangeEvent_getKey")
            kw["aname"] = "_IExtraDataCanChangeEvent_getKey"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IExtraDataCanChangeEvent_getKey_Holder"
            self.pyclass = Holder

    class IExtraDataCanChangeEvent_getKeyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataCanChangeEvent_getKeyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataCanChangeEvent_getKeyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataCanChangeEvent_getKeyResponse")
            kw["aname"] = "_IExtraDataCanChangeEvent_getKeyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IExtraDataCanChangeEvent_getKeyResponse_Holder"
            self.pyclass = Holder

    class IExtraDataCanChangeEvent_getValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataCanChangeEvent_getValue"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataCanChangeEvent_getValue_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataCanChangeEvent_getValue")
            kw["aname"] = "_IExtraDataCanChangeEvent_getValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IExtraDataCanChangeEvent_getValue_Holder"
            self.pyclass = Holder

    class IExtraDataCanChangeEvent_getValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataCanChangeEvent_getValueResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataCanChangeEvent_getValueResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataCanChangeEvent_getValueResponse")
            kw["aname"] = "_IExtraDataCanChangeEvent_getValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IExtraDataCanChangeEvent_getValueResponse_Holder"
            self.pyclass = Holder

    class ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IShowWindowEvent_getWinId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IShowWindowEvent_getWinId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IShowWindowEvent_getWinId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IShowWindowEvent_getWinId")
            kw["aname"] = "_IShowWindowEvent_getWinId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IShowWindowEvent_getWinId_Holder"
            self.pyclass = Holder

    class IShowWindowEvent_getWinIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IShowWindowEvent_getWinIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IShowWindowEvent_getWinIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IShowWindowEvent_getWinIdResponse")
            kw["aname"] = "_IShowWindowEvent_getWinIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IShowWindowEvent_getWinIdResponse_Holder"
            self.pyclass = Holder

    class IShowWindowEvent_setWinId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IShowWindowEvent_setWinId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IShowWindowEvent_setWinId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="winId", aname="_winId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IShowWindowEvent_setWinId")
            kw["aname"] = "_IShowWindowEvent_setWinId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._winId = None
                    return
            Holder.__name__ = "IShowWindowEvent_setWinId_Holder"
            self.pyclass = Holder

    class IShowWindowEvent_setWinIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IShowWindowEvent_setWinIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IShowWindowEvent_setWinIdResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IShowWindowEvent_setWinIdResponse")
            kw["aname"] = "_IShowWindowEvent_setWinIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IShowWindowEvent_setWinIdResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getSlot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getSlot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getSlot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getSlot")
            kw["aname"] = "_INATRedirectEvent_getSlot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getSlot_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getSlotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getSlotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getSlotResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getSlotResponse")
            kw["aname"] = "_INATRedirectEvent_getSlotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getSlotResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getRemove_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getRemove"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getRemove_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getRemove")
            kw["aname"] = "_INATRedirectEvent_getRemove"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getRemove_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getRemoveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getRemoveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getRemoveResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getRemoveResponse")
            kw["aname"] = "_INATRedirectEvent_getRemoveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getRemoveResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getName")
            kw["aname"] = "_INATRedirectEvent_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getName_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getNameResponse")
            kw["aname"] = "_INATRedirectEvent_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getNameResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getProto_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getProto"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getProto_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getProto")
            kw["aname"] = "_INATRedirectEvent_getProto"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getProto_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getProtoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getProtoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getProtoResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","NATProtocol",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getProtoResponse")
            kw["aname"] = "_INATRedirectEvent_getProtoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getProtoResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getHostIP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getHostIP"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getHostIP_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getHostIP")
            kw["aname"] = "_INATRedirectEvent_getHostIP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getHostIP_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getHostIPResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getHostIPResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getHostIPResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getHostIPResponse")
            kw["aname"] = "_INATRedirectEvent_getHostIPResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getHostIPResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getHostPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getHostPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getHostPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getHostPort")
            kw["aname"] = "_INATRedirectEvent_getHostPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getHostPort_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getHostPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getHostPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getHostPortResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getHostPortResponse")
            kw["aname"] = "_INATRedirectEvent_getHostPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getHostPortResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getGuestIP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getGuestIP"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getGuestIP_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getGuestIP")
            kw["aname"] = "_INATRedirectEvent_getGuestIP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getGuestIP_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getGuestIPResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getGuestIPResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getGuestIPResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getGuestIPResponse")
            kw["aname"] = "_INATRedirectEvent_getGuestIPResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getGuestIPResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getGuestPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getGuestPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getGuestPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getGuestPort")
            kw["aname"] = "_INATRedirectEvent_getGuestPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getGuestPort_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getGuestPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getGuestPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getGuestPortResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getGuestPortResponse")
            kw["aname"] = "_INATRedirectEvent_getGuestPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getGuestPortResponse_Holder"
            self.pyclass = Holder

    class IHostPCIDevicePlugEvent_getPlugged_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPCIDevicePlugEvent_getPlugged"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPCIDevicePlugEvent_getPlugged_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPCIDevicePlugEvent_getPlugged")
            kw["aname"] = "_IHostPCIDevicePlugEvent_getPlugged"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostPCIDevicePlugEvent_getPlugged_Holder"
            self.pyclass = Holder

    class IHostPCIDevicePlugEvent_getPluggedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPCIDevicePlugEvent_getPluggedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPCIDevicePlugEvent_getPluggedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPCIDevicePlugEvent_getPluggedResponse")
            kw["aname"] = "_IHostPCIDevicePlugEvent_getPluggedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostPCIDevicePlugEvent_getPluggedResponse_Holder"
            self.pyclass = Holder

    class IHostPCIDevicePlugEvent_getSuccess_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPCIDevicePlugEvent_getSuccess"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPCIDevicePlugEvent_getSuccess_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPCIDevicePlugEvent_getSuccess")
            kw["aname"] = "_IHostPCIDevicePlugEvent_getSuccess"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostPCIDevicePlugEvent_getSuccess_Holder"
            self.pyclass = Holder

    class IHostPCIDevicePlugEvent_getSuccessResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPCIDevicePlugEvent_getSuccessResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPCIDevicePlugEvent_getSuccessResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPCIDevicePlugEvent_getSuccessResponse")
            kw["aname"] = "_IHostPCIDevicePlugEvent_getSuccessResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostPCIDevicePlugEvent_getSuccessResponse_Holder"
            self.pyclass = Holder

    class IHostPCIDevicePlugEvent_getAttachment_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPCIDevicePlugEvent_getAttachment"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPCIDevicePlugEvent_getAttachment_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPCIDevicePlugEvent_getAttachment")
            kw["aname"] = "_IHostPCIDevicePlugEvent_getAttachment"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostPCIDevicePlugEvent_getAttachment_Holder"
            self.pyclass = Holder

    class IHostPCIDevicePlugEvent_getAttachmentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPCIDevicePlugEvent_getAttachmentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPCIDevicePlugEvent_getAttachmentResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IPCIDeviceAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPCIDevicePlugEvent_getAttachmentResponse")
            kw["aname"] = "_IHostPCIDevicePlugEvent_getAttachmentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostPCIDevicePlugEvent_getAttachmentResponse_Holder"
            self.pyclass = Holder

    class IHostPCIDevicePlugEvent_getMessage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPCIDevicePlugEvent_getMessage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPCIDevicePlugEvent_getMessage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPCIDevicePlugEvent_getMessage")
            kw["aname"] = "_IHostPCIDevicePlugEvent_getMessage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostPCIDevicePlugEvent_getMessage_Holder"
            self.pyclass = Holder

    class IHostPCIDevicePlugEvent_getMessageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPCIDevicePlugEvent_getMessageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPCIDevicePlugEvent_getMessageResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPCIDevicePlugEvent_getMessageResponse")
            kw["aname"] = "_IHostPCIDevicePlugEvent_getMessageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostPCIDevicePlugEvent_getMessageResponse_Holder"
            self.pyclass = Holder

    class IVBoxSVCAvailabilityChangedEvent_getAvailable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVBoxSVCAvailabilityChangedEvent_getAvailable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVBoxSVCAvailabilityChangedEvent_getAvailable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVBoxSVCAvailabilityChangedEvent_getAvailable")
            kw["aname"] = "_IVBoxSVCAvailabilityChangedEvent_getAvailable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVBoxSVCAvailabilityChangedEvent_getAvailable_Holder"
            self.pyclass = Holder

    class IVBoxSVCAvailabilityChangedEvent_getAvailableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVBoxSVCAvailabilityChangedEvent_getAvailableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVBoxSVCAvailabilityChangedEvent_getAvailableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVBoxSVCAvailabilityChangedEvent_getAvailableResponse")
            kw["aname"] = "_IVBoxSVCAvailabilityChangedEvent_getAvailableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVBoxSVCAvailabilityChangedEvent_getAvailableResponse_Holder"
            self.pyclass = Holder

    class IBandwidthGroupChangedEvent_getBandwidthGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroupChangedEvent_getBandwidthGroup"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroupChangedEvent_getBandwidthGroup_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroupChangedEvent_getBandwidthGroup")
            kw["aname"] = "_IBandwidthGroupChangedEvent_getBandwidthGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBandwidthGroupChangedEvent_getBandwidthGroup_Holder"
            self.pyclass = Holder

    class IBandwidthGroupChangedEvent_getBandwidthGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroupChangedEvent_getBandwidthGroupResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroupChangedEvent_getBandwidthGroupResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroupChangedEvent_getBandwidthGroupResponse")
            kw["aname"] = "_IBandwidthGroupChangedEvent_getBandwidthGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBandwidthGroupChangedEvent_getBandwidthGroupResponse_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getChangeType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getChangeType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getChangeType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getChangeType")
            kw["aname"] = "_IGuestMonitorChangedEvent_getChangeType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getChangeType_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getChangeTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getChangeTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getChangeTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","GuestMonitorChangedEventType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getChangeTypeResponse")
            kw["aname"] = "_IGuestMonitorChangedEvent_getChangeTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getChangeTypeResponse_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getScreenId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getScreenId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getScreenId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getScreenId")
            kw["aname"] = "_IGuestMonitorChangedEvent_getScreenId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getScreenId_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getScreenIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getScreenIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getScreenIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getScreenIdResponse")
            kw["aname"] = "_IGuestMonitorChangedEvent_getScreenIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getScreenIdResponse_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getOriginX_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getOriginX"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getOriginX_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getOriginX")
            kw["aname"] = "_IGuestMonitorChangedEvent_getOriginX"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getOriginX_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getOriginXResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getOriginXResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getOriginXResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getOriginXResponse")
            kw["aname"] = "_IGuestMonitorChangedEvent_getOriginXResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getOriginXResponse_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getOriginY_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getOriginY"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getOriginY_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getOriginY")
            kw["aname"] = "_IGuestMonitorChangedEvent_getOriginY"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getOriginY_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getOriginYResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getOriginYResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getOriginYResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getOriginYResponse")
            kw["aname"] = "_IGuestMonitorChangedEvent_getOriginYResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getOriginYResponse_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getWidth_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getWidth"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getWidth_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getWidth")
            kw["aname"] = "_IGuestMonitorChangedEvent_getWidth"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getWidth_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getWidthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getWidthResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getWidthResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getWidthResponse")
            kw["aname"] = "_IGuestMonitorChangedEvent_getWidthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getWidthResponse_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getHeight_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getHeight"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getHeight_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getHeight")
            kw["aname"] = "_IGuestMonitorChangedEvent_getHeight"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getHeight_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getHeightResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getHeightResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getHeightResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getHeightResponse")
            kw["aname"] = "_IGuestMonitorChangedEvent_getHeightResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getHeightResponse_Holder"
            self.pyclass = Holder

    class IGuestUserStateChangedEvent_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestUserStateChangedEvent_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestUserStateChangedEvent_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestUserStateChangedEvent_getName")
            kw["aname"] = "_IGuestUserStateChangedEvent_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestUserStateChangedEvent_getName_Holder"
            self.pyclass = Holder

    class IGuestUserStateChangedEvent_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestUserStateChangedEvent_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestUserStateChangedEvent_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestUserStateChangedEvent_getNameResponse")
            kw["aname"] = "_IGuestUserStateChangedEvent_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestUserStateChangedEvent_getNameResponse_Holder"
            self.pyclass = Holder

    class IGuestUserStateChangedEvent_getDomain_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestUserStateChangedEvent_getDomain"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestUserStateChangedEvent_getDomain_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestUserStateChangedEvent_getDomain")
            kw["aname"] = "_IGuestUserStateChangedEvent_getDomain"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestUserStateChangedEvent_getDomain_Holder"
            self.pyclass = Holder

    class IGuestUserStateChangedEvent_getDomainResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestUserStateChangedEvent_getDomainResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestUserStateChangedEvent_getDomainResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestUserStateChangedEvent_getDomainResponse")
            kw["aname"] = "_IGuestUserStateChangedEvent_getDomainResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestUserStateChangedEvent_getDomainResponse_Holder"
            self.pyclass = Holder

    class IGuestUserStateChangedEvent_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestUserStateChangedEvent_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestUserStateChangedEvent_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestUserStateChangedEvent_getState")
            kw["aname"] = "_IGuestUserStateChangedEvent_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestUserStateChangedEvent_getState_Holder"
            self.pyclass = Holder

    class IGuestUserStateChangedEvent_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestUserStateChangedEvent_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestUserStateChangedEvent_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","GuestUserState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestUserStateChangedEvent_getStateResponse")
            kw["aname"] = "_IGuestUserStateChangedEvent_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestUserStateChangedEvent_getStateResponse_Holder"
            self.pyclass = Holder

    class IGuestUserStateChangedEvent_getStateDetails_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestUserStateChangedEvent_getStateDetails"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestUserStateChangedEvent_getStateDetails_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestUserStateChangedEvent_getStateDetails")
            kw["aname"] = "_IGuestUserStateChangedEvent_getStateDetails"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestUserStateChangedEvent_getStateDetails_Holder"
            self.pyclass = Holder

    class IGuestUserStateChangedEvent_getStateDetailsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestUserStateChangedEvent_getStateDetailsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestUserStateChangedEvent_getStateDetailsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestUserStateChangedEvent_getStateDetailsResponse")
            kw["aname"] = "_IGuestUserStateChangedEvent_getStateDetailsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestUserStateChangedEvent_getStateDetailsResponse_Holder"
            self.pyclass = Holder

    class IStorageDeviceChangedEvent_getStorageDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageDeviceChangedEvent_getStorageDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageDeviceChangedEvent_getStorageDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageDeviceChangedEvent_getStorageDevice")
            kw["aname"] = "_IStorageDeviceChangedEvent_getStorageDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageDeviceChangedEvent_getStorageDevice_Holder"
            self.pyclass = Holder

    class IStorageDeviceChangedEvent_getStorageDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageDeviceChangedEvent_getStorageDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageDeviceChangedEvent_getStorageDeviceResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IMediumAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageDeviceChangedEvent_getStorageDeviceResponse")
            kw["aname"] = "_IStorageDeviceChangedEvent_getStorageDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageDeviceChangedEvent_getStorageDeviceResponse_Holder"
            self.pyclass = Holder

    class IStorageDeviceChangedEvent_getRemoved_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageDeviceChangedEvent_getRemoved"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageDeviceChangedEvent_getRemoved_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageDeviceChangedEvent_getRemoved")
            kw["aname"] = "_IStorageDeviceChangedEvent_getRemoved"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageDeviceChangedEvent_getRemoved_Holder"
            self.pyclass = Holder

    class IStorageDeviceChangedEvent_getRemovedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageDeviceChangedEvent_getRemovedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageDeviceChangedEvent_getRemovedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageDeviceChangedEvent_getRemovedResponse")
            kw["aname"] = "_IStorageDeviceChangedEvent_getRemovedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageDeviceChangedEvent_getRemovedResponse_Holder"
            self.pyclass = Holder

    class IStorageDeviceChangedEvent_getSilent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageDeviceChangedEvent_getSilent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageDeviceChangedEvent_getSilent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageDeviceChangedEvent_getSilent")
            kw["aname"] = "_IStorageDeviceChangedEvent_getSilent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageDeviceChangedEvent_getSilent_Holder"
            self.pyclass = Holder

    class IStorageDeviceChangedEvent_getSilentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageDeviceChangedEvent_getSilentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageDeviceChangedEvent_getSilentResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageDeviceChangedEvent_getSilentResponse")
            kw["aname"] = "_IStorageDeviceChangedEvent_getSilentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageDeviceChangedEvent_getSilentResponse_Holder"
            self.pyclass = Holder

    class INATNetworkChangedEvent_getNetworkName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkChangedEvent_getNetworkName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkChangedEvent_getNetworkName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkChangedEvent_getNetworkName")
            kw["aname"] = "_INATNetworkChangedEvent_getNetworkName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkChangedEvent_getNetworkName_Holder"
            self.pyclass = Holder

    class INATNetworkChangedEvent_getNetworkNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkChangedEvent_getNetworkNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkChangedEvent_getNetworkNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkChangedEvent_getNetworkNameResponse")
            kw["aname"] = "_INATNetworkChangedEvent_getNetworkNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkChangedEvent_getNetworkNameResponse_Holder"
            self.pyclass = Holder

    class INATNetworkStartStopEvent_getStartEvent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkStartStopEvent_getStartEvent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkStartStopEvent_getStartEvent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkStartStopEvent_getStartEvent")
            kw["aname"] = "_INATNetworkStartStopEvent_getStartEvent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkStartStopEvent_getStartEvent_Holder"
            self.pyclass = Holder

    class INATNetworkStartStopEvent_getStartEventResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkStartStopEvent_getStartEventResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkStartStopEvent_getStartEventResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkStartStopEvent_getStartEventResponse")
            kw["aname"] = "_INATNetworkStartStopEvent_getStartEventResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkStartStopEvent_getStartEventResponse_Holder"
            self.pyclass = Holder

    class INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class INATNetworkCreationDeletionEvent_getCreationEvent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkCreationDeletionEvent_getCreationEvent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkCreationDeletionEvent_getCreationEvent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkCreationDeletionEvent_getCreationEvent")
            kw["aname"] = "_INATNetworkCreationDeletionEvent_getCreationEvent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkCreationDeletionEvent_getCreationEvent_Holder"
            self.pyclass = Holder

    class INATNetworkCreationDeletionEvent_getCreationEventResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkCreationDeletionEvent_getCreationEventResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkCreationDeletionEvent_getCreationEventResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkCreationDeletionEvent_getCreationEventResponse")
            kw["aname"] = "_INATNetworkCreationDeletionEvent_getCreationEventResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkCreationDeletionEvent_getCreationEventResponse_Holder"
            self.pyclass = Holder

    class INATNetworkSettingEvent_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkSettingEvent_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkSettingEvent_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkSettingEvent_getEnabled")
            kw["aname"] = "_INATNetworkSettingEvent_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkSettingEvent_getEnabled_Holder"
            self.pyclass = Holder

    class INATNetworkSettingEvent_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkSettingEvent_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkSettingEvent_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkSettingEvent_getEnabledResponse")
            kw["aname"] = "_INATNetworkSettingEvent_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkSettingEvent_getEnabledResponse_Holder"
            self.pyclass = Holder

    class INATNetworkSettingEvent_getNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkSettingEvent_getNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkSettingEvent_getNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkSettingEvent_getNetwork")
            kw["aname"] = "_INATNetworkSettingEvent_getNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkSettingEvent_getNetwork_Holder"
            self.pyclass = Holder

    class INATNetworkSettingEvent_getNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkSettingEvent_getNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkSettingEvent_getNetworkResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkSettingEvent_getNetworkResponse")
            kw["aname"] = "_INATNetworkSettingEvent_getNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkSettingEvent_getNetworkResponse_Holder"
            self.pyclass = Holder

    class INATNetworkSettingEvent_getGateway_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkSettingEvent_getGateway"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkSettingEvent_getGateway_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkSettingEvent_getGateway")
            kw["aname"] = "_INATNetworkSettingEvent_getGateway"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkSettingEvent_getGateway_Holder"
            self.pyclass = Holder

    class INATNetworkSettingEvent_getGatewayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkSettingEvent_getGatewayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkSettingEvent_getGatewayResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkSettingEvent_getGatewayResponse")
            kw["aname"] = "_INATNetworkSettingEvent_getGatewayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkSettingEvent_getGatewayResponse_Holder"
            self.pyclass = Holder

    class INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabled")
            kw["aname"] = "_INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabled_Holder"
            self.pyclass = Holder

    class INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledResponse")
            kw["aname"] = "_INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledResponse_Holder"
            self.pyclass = Holder

    class INATNetworkSettingEvent_getNeedDhcpServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkSettingEvent_getNeedDhcpServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkSettingEvent_getNeedDhcpServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkSettingEvent_getNeedDhcpServer")
            kw["aname"] = "_INATNetworkSettingEvent_getNeedDhcpServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkSettingEvent_getNeedDhcpServer_Holder"
            self.pyclass = Holder

    class INATNetworkSettingEvent_getNeedDhcpServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkSettingEvent_getNeedDhcpServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkSettingEvent_getNeedDhcpServerResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkSettingEvent_getNeedDhcpServerResponse")
            kw["aname"] = "_INATNetworkSettingEvent_getNeedDhcpServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkSettingEvent_getNeedDhcpServerResponse_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getCreate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getCreate"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getCreate_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getCreate")
            kw["aname"] = "_INATNetworkPortForwardEvent_getCreate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getCreate_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getCreateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getCreateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getCreateResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getCreateResponse")
            kw["aname"] = "_INATNetworkPortForwardEvent_getCreateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getCreateResponse_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getIpv6_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getIpv6"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getIpv6_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getIpv6")
            kw["aname"] = "_INATNetworkPortForwardEvent_getIpv6"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getIpv6_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getIpv6Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getIpv6Response"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getIpv6Response_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getIpv6Response")
            kw["aname"] = "_INATNetworkPortForwardEvent_getIpv6Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getIpv6Response_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getName")
            kw["aname"] = "_INATNetworkPortForwardEvent_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getName_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getNameResponse")
            kw["aname"] = "_INATNetworkPortForwardEvent_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getNameResponse_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getProto_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getProto"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getProto_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getProto")
            kw["aname"] = "_INATNetworkPortForwardEvent_getProto"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getProto_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getProtoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getProtoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getProtoResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","NATProtocol",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getProtoResponse")
            kw["aname"] = "_INATNetworkPortForwardEvent_getProtoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getProtoResponse_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getHostIp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getHostIp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getHostIp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getHostIp")
            kw["aname"] = "_INATNetworkPortForwardEvent_getHostIp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getHostIp_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getHostIpResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getHostIpResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getHostIpResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getHostIpResponse")
            kw["aname"] = "_INATNetworkPortForwardEvent_getHostIpResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getHostIpResponse_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getHostPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getHostPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getHostPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getHostPort")
            kw["aname"] = "_INATNetworkPortForwardEvent_getHostPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getHostPort_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getHostPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getHostPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getHostPortResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getHostPortResponse")
            kw["aname"] = "_INATNetworkPortForwardEvent_getHostPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getHostPortResponse_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getGuestIp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getGuestIp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getGuestIp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getGuestIp")
            kw["aname"] = "_INATNetworkPortForwardEvent_getGuestIp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getGuestIp_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getGuestIpResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getGuestIpResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getGuestIpResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getGuestIpResponse")
            kw["aname"] = "_INATNetworkPortForwardEvent_getGuestIpResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getGuestIpResponse_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getGuestPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getGuestPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getGuestPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getGuestPort")
            kw["aname"] = "_INATNetworkPortForwardEvent_getGuestPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getGuestPort_Holder"
            self.pyclass = Holder

    class INATNetworkPortForwardEvent_getGuestPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATNetworkPortForwardEvent_getGuestPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATNetworkPortForwardEvent_getGuestPortResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATNetworkPortForwardEvent_getGuestPortResponse")
            kw["aname"] = "_INATNetworkPortForwardEvent_getGuestPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATNetworkPortForwardEvent_getGuestPortResponse_Holder"
            self.pyclass = Holder

    class IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class IProgressEvent_getProgressId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgressEvent_getProgressId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgressEvent_getProgressId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgressEvent_getProgressId")
            kw["aname"] = "_IProgressEvent_getProgressId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgressEvent_getProgressId_Holder"
            self.pyclass = Holder

    class IProgressEvent_getProgressIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgressEvent_getProgressIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgressEvent_getProgressIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgressEvent_getProgressIdResponse")
            kw["aname"] = "_IProgressEvent_getProgressIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgressEvent_getProgressIdResponse_Holder"
            self.pyclass = Holder

    class IProgressPercentageChangedEvent_getPercent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgressPercentageChangedEvent_getPercent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgressPercentageChangedEvent_getPercent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgressPercentageChangedEvent_getPercent")
            kw["aname"] = "_IProgressPercentageChangedEvent_getPercent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgressPercentageChangedEvent_getPercent_Holder"
            self.pyclass = Holder

    class IProgressPercentageChangedEvent_getPercentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgressPercentageChangedEvent_getPercentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgressPercentageChangedEvent_getPercentResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgressPercentageChangedEvent_getPercentResponse")
            kw["aname"] = "_IProgressPercentageChangedEvent_getPercentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgressPercentageChangedEvent_getPercentResponse_Holder"
            self.pyclass = Holder

    class IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfaces")
            kw["aname"] = "_IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfaces_Holder"
            self.pyclass = Holder

    class IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse")
            kw["aname"] = "_IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse_Holder"
            self.pyclass = Holder

    class ICursorPositionChangedEvent_getHasData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICursorPositionChangedEvent_getHasData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICursorPositionChangedEvent_getHasData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICursorPositionChangedEvent_getHasData")
            kw["aname"] = "_ICursorPositionChangedEvent_getHasData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICursorPositionChangedEvent_getHasData_Holder"
            self.pyclass = Holder

    class ICursorPositionChangedEvent_getHasDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICursorPositionChangedEvent_getHasDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICursorPositionChangedEvent_getHasDataResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICursorPositionChangedEvent_getHasDataResponse")
            kw["aname"] = "_ICursorPositionChangedEvent_getHasDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICursorPositionChangedEvent_getHasDataResponse_Holder"
            self.pyclass = Holder

    class ICursorPositionChangedEvent_getX_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICursorPositionChangedEvent_getX"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICursorPositionChangedEvent_getX_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICursorPositionChangedEvent_getX")
            kw["aname"] = "_ICursorPositionChangedEvent_getX"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICursorPositionChangedEvent_getX_Holder"
            self.pyclass = Holder

    class ICursorPositionChangedEvent_getXResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICursorPositionChangedEvent_getXResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICursorPositionChangedEvent_getXResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICursorPositionChangedEvent_getXResponse")
            kw["aname"] = "_ICursorPositionChangedEvent_getXResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICursorPositionChangedEvent_getXResponse_Holder"
            self.pyclass = Holder

    class ICursorPositionChangedEvent_getY_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICursorPositionChangedEvent_getY"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICursorPositionChangedEvent_getY_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICursorPositionChangedEvent_getY")
            kw["aname"] = "_ICursorPositionChangedEvent_getY"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICursorPositionChangedEvent_getY_Holder"
            self.pyclass = Holder

    class ICursorPositionChangedEvent_getYResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICursorPositionChangedEvent_getYResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICursorPositionChangedEvent_getYResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICursorPositionChangedEvent_getYResponse")
            kw["aname"] = "_ICursorPositionChangedEvent_getYResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICursorPositionChangedEvent_getYResponse_Holder"
            self.pyclass = Holder

    class IGuestAdditionsStatusChangedEvent_getFacility_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestAdditionsStatusChangedEvent_getFacility"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestAdditionsStatusChangedEvent_getFacility_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestAdditionsStatusChangedEvent_getFacility")
            kw["aname"] = "_IGuestAdditionsStatusChangedEvent_getFacility"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestAdditionsStatusChangedEvent_getFacility_Holder"
            self.pyclass = Holder

    class IGuestAdditionsStatusChangedEvent_getFacilityResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestAdditionsStatusChangedEvent_getFacilityResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestAdditionsStatusChangedEvent_getFacilityResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AdditionsFacilityType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestAdditionsStatusChangedEvent_getFacilityResponse")
            kw["aname"] = "_IGuestAdditionsStatusChangedEvent_getFacilityResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestAdditionsStatusChangedEvent_getFacilityResponse_Holder"
            self.pyclass = Holder

    class IGuestAdditionsStatusChangedEvent_setFacility_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestAdditionsStatusChangedEvent_setFacility"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestAdditionsStatusChangedEvent_setFacility_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AdditionsFacilityType",lazy=False)(pname="facility", aname="_facility", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestAdditionsStatusChangedEvent_setFacility")
            kw["aname"] = "_IGuestAdditionsStatusChangedEvent_setFacility"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._facility = None
                    return
            Holder.__name__ = "IGuestAdditionsStatusChangedEvent_setFacility_Holder"
            self.pyclass = Holder

    class IGuestAdditionsStatusChangedEvent_setFacilityResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestAdditionsStatusChangedEvent_setFacilityResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestAdditionsStatusChangedEvent_setFacilityResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuestAdditionsStatusChangedEvent_setFacilityResponse")
            kw["aname"] = "_IGuestAdditionsStatusChangedEvent_setFacilityResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuestAdditionsStatusChangedEvent_setFacilityResponse_Holder"
            self.pyclass = Holder

    class IGuestAdditionsStatusChangedEvent_getStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestAdditionsStatusChangedEvent_getStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestAdditionsStatusChangedEvent_getStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestAdditionsStatusChangedEvent_getStatus")
            kw["aname"] = "_IGuestAdditionsStatusChangedEvent_getStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestAdditionsStatusChangedEvent_getStatus_Holder"
            self.pyclass = Holder

    class IGuestAdditionsStatusChangedEvent_getStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestAdditionsStatusChangedEvent_getStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestAdditionsStatusChangedEvent_getStatusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AdditionsFacilityStatus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestAdditionsStatusChangedEvent_getStatusResponse")
            kw["aname"] = "_IGuestAdditionsStatusChangedEvent_getStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestAdditionsStatusChangedEvent_getStatusResponse_Holder"
            self.pyclass = Holder

    class IGuestAdditionsStatusChangedEvent_getRunLevel_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestAdditionsStatusChangedEvent_getRunLevel"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestAdditionsStatusChangedEvent_getRunLevel_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestAdditionsStatusChangedEvent_getRunLevel")
            kw["aname"] = "_IGuestAdditionsStatusChangedEvent_getRunLevel"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestAdditionsStatusChangedEvent_getRunLevel_Holder"
            self.pyclass = Holder

    class IGuestAdditionsStatusChangedEvent_getRunLevelResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestAdditionsStatusChangedEvent_getRunLevelResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestAdditionsStatusChangedEvent_getRunLevelResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AdditionsRunLevelType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestAdditionsStatusChangedEvent_getRunLevelResponse")
            kw["aname"] = "_IGuestAdditionsStatusChangedEvent_getRunLevelResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestAdditionsStatusChangedEvent_getRunLevelResponse_Holder"
            self.pyclass = Holder

    class IGuestAdditionsStatusChangedEvent_getTimestamp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestAdditionsStatusChangedEvent_getTimestamp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestAdditionsStatusChangedEvent_getTimestamp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestAdditionsStatusChangedEvent_getTimestamp")
            kw["aname"] = "_IGuestAdditionsStatusChangedEvent_getTimestamp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestAdditionsStatusChangedEvent_getTimestamp_Holder"
            self.pyclass = Holder

    class IGuestAdditionsStatusChangedEvent_getTimestampResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestAdditionsStatusChangedEvent_getTimestampResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestAdditionsStatusChangedEvent_getTimestampResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestAdditionsStatusChangedEvent_getTimestampResponse")
            kw["aname"] = "_IGuestAdditionsStatusChangedEvent_getTimestampResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestAdditionsStatusChangedEvent_getTimestampResponse_Holder"
            self.pyclass = Holder

    class ICloudClient_getExportLaunchParameters_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudClient_getExportLaunchParameters"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudClient_getExportLaunchParameters_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudClient_getExportLaunchParameters")
            kw["aname"] = "_ICloudClient_getExportLaunchParameters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudClient_getExportLaunchParameters_Holder"
            self.pyclass = Holder

    class ICloudClient_getExportLaunchParametersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudClient_getExportLaunchParametersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudClient_getExportLaunchParametersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudClient_getExportLaunchParametersResponse")
            kw["aname"] = "_ICloudClient_getExportLaunchParametersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICloudClient_getExportLaunchParametersResponse_Holder"
            self.pyclass = Holder

    class ICloudClient_exportLaunchVM_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudClient_exportLaunchVM"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudClient_exportLaunchVM_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="progress", aname="_progress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="virtualBox", aname="_virtualBox", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudClient_exportLaunchVM")
            kw["aname"] = "_ICloudClient_exportLaunchVM"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._description = None
                    self._progress = None
                    self._virtualBox = None
                    return
            Holder.__name__ = "ICloudClient_exportLaunchVM_Holder"
            self.pyclass = Holder

    class ICloudClient_exportLaunchVMResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudClient_exportLaunchVMResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudClient_exportLaunchVMResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ICloudClient_exportLaunchVMResponse")
            kw["aname"] = "_ICloudClient_exportLaunchVMResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ICloudClient_exportLaunchVMResponse_Holder"
            self.pyclass = Holder

    class ICloudProfile_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_getName")
            kw["aname"] = "_ICloudProfile_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProfile_getName_Holder"
            self.pyclass = Holder

    class ICloudProfile_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_getNameResponse")
            kw["aname"] = "_ICloudProfile_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICloudProfile_getNameResponse_Holder"
            self.pyclass = Holder

    class ICloudProfile_setName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_setName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_setName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_setName")
            kw["aname"] = "_ICloudProfile_setName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "ICloudProfile_setName_Holder"
            self.pyclass = Holder

    class ICloudProfile_setNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_setNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_setNameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_setNameResponse")
            kw["aname"] = "_ICloudProfile_setNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ICloudProfile_setNameResponse_Holder"
            self.pyclass = Holder

    class ICloudProfile_getProviderId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_getProviderId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_getProviderId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_getProviderId")
            kw["aname"] = "_ICloudProfile_getProviderId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProfile_getProviderId_Holder"
            self.pyclass = Holder

    class ICloudProfile_getProviderIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_getProviderIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_getProviderIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_getProviderIdResponse")
            kw["aname"] = "_ICloudProfile_getProviderIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICloudProfile_getProviderIdResponse_Holder"
            self.pyclass = Holder

    class ICloudProfile_getProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_getProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_getProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_getProperty")
            kw["aname"] = "_ICloudProfile_getProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "ICloudProfile_getProperty_Holder"
            self.pyclass = Holder

    class ICloudProfile_getPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_getPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_getPropertyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_getPropertyResponse")
            kw["aname"] = "_ICloudProfile_getPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICloudProfile_getPropertyResponse_Holder"
            self.pyclass = Holder

    class ICloudProfile_setProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_setProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_setProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_setProperty")
            kw["aname"] = "_ICloudProfile_setProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "ICloudProfile_setProperty_Holder"
            self.pyclass = Holder

    class ICloudProfile_setPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_setPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_setPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_setPropertyResponse")
            kw["aname"] = "_ICloudProfile_setPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ICloudProfile_setPropertyResponse_Holder"
            self.pyclass = Holder

    class ICloudProfile_getProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_getProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_getProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="names", aname="_names", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_getProperties")
            kw["aname"] = "_ICloudProfile_getProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._names = None
                    return
            Holder.__name__ = "ICloudProfile_getProperties_Holder"
            self.pyclass = Holder

    class ICloudProfile_getPropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_getPropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_getPropertiesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnNames", aname="_returnNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_getPropertiesResponse")
            kw["aname"] = "_ICloudProfile_getPropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnNames = []
                    self._returnval = []
                    return
            Holder.__name__ = "ICloudProfile_getPropertiesResponse_Holder"
            self.pyclass = Holder

    class ICloudProfile_setProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_setProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_setProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="names", aname="_names", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="values", aname="_values", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_setProperties")
            kw["aname"] = "_ICloudProfile_setProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._names = []
                    self._values = []
                    return
            Holder.__name__ = "ICloudProfile_setProperties_Holder"
            self.pyclass = Holder

    class ICloudProfile_setPropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_setPropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_setPropertiesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_setPropertiesResponse")
            kw["aname"] = "_ICloudProfile_setPropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ICloudProfile_setPropertiesResponse_Holder"
            self.pyclass = Holder

    class ICloudProfile_remove_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_remove"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_remove_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_remove")
            kw["aname"] = "_ICloudProfile_remove"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProfile_remove_Holder"
            self.pyclass = Holder

    class ICloudProfile_removeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_removeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_removeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_removeResponse")
            kw["aname"] = "_ICloudProfile_removeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ICloudProfile_removeResponse_Holder"
            self.pyclass = Holder

    class ICloudProfile_createCloudClient_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_createCloudClient"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_createCloudClient_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_createCloudClient")
            kw["aname"] = "_ICloudProfile_createCloudClient"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProfile_createCloudClient_Holder"
            self.pyclass = Holder

    class ICloudProfile_createCloudClientResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProfile_createCloudClientResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProfile_createCloudClientResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProfile_createCloudClientResponse")
            kw["aname"] = "_ICloudProfile_createCloudClientResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICloudProfile_createCloudClientResponse_Holder"
            self.pyclass = Holder

    class ICloudProvider_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getName")
            kw["aname"] = "_ICloudProvider_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProvider_getName_Holder"
            self.pyclass = Holder

    class ICloudProvider_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getNameResponse")
            kw["aname"] = "_ICloudProvider_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICloudProvider_getNameResponse_Holder"
            self.pyclass = Holder

    class ICloudProvider_getShortName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getShortName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getShortName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getShortName")
            kw["aname"] = "_ICloudProvider_getShortName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProvider_getShortName_Holder"
            self.pyclass = Holder

    class ICloudProvider_getShortNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getShortNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getShortNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getShortNameResponse")
            kw["aname"] = "_ICloudProvider_getShortNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICloudProvider_getShortNameResponse_Holder"
            self.pyclass = Holder

    class ICloudProvider_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getId")
            kw["aname"] = "_ICloudProvider_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProvider_getId_Holder"
            self.pyclass = Holder

    class ICloudProvider_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getIdResponse")
            kw["aname"] = "_ICloudProvider_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICloudProvider_getIdResponse_Holder"
            self.pyclass = Holder

    class ICloudProvider_getProfiles_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getProfiles"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getProfiles_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getProfiles")
            kw["aname"] = "_ICloudProvider_getProfiles"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProvider_getProfiles_Holder"
            self.pyclass = Holder

    class ICloudProvider_getProfilesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getProfilesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getProfilesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getProfilesResponse")
            kw["aname"] = "_ICloudProvider_getProfilesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "ICloudProvider_getProfilesResponse_Holder"
            self.pyclass = Holder

    class ICloudProvider_getProfileNames_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getProfileNames"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getProfileNames_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getProfileNames")
            kw["aname"] = "_ICloudProvider_getProfileNames"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProvider_getProfileNames_Holder"
            self.pyclass = Holder

    class ICloudProvider_getProfileNamesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getProfileNamesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getProfileNamesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getProfileNamesResponse")
            kw["aname"] = "_ICloudProvider_getProfileNamesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "ICloudProvider_getProfileNamesResponse_Holder"
            self.pyclass = Holder

    class ICloudProvider_getSupportedPropertyNames_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getSupportedPropertyNames"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getSupportedPropertyNames_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getSupportedPropertyNames")
            kw["aname"] = "_ICloudProvider_getSupportedPropertyNames"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProvider_getSupportedPropertyNames_Holder"
            self.pyclass = Holder

    class ICloudProvider_getSupportedPropertyNamesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getSupportedPropertyNamesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getSupportedPropertyNamesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getSupportedPropertyNamesResponse")
            kw["aname"] = "_ICloudProvider_getSupportedPropertyNamesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "ICloudProvider_getSupportedPropertyNamesResponse_Holder"
            self.pyclass = Holder

    class ICloudProvider_getPropertyDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getPropertyDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getPropertyDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getPropertyDescription")
            kw["aname"] = "_ICloudProvider_getPropertyDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "ICloudProvider_getPropertyDescription_Holder"
            self.pyclass = Holder

    class ICloudProvider_getPropertyDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getPropertyDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getPropertyDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getPropertyDescriptionResponse")
            kw["aname"] = "_ICloudProvider_getPropertyDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICloudProvider_getPropertyDescriptionResponse_Holder"
            self.pyclass = Holder

    class ICloudProvider_createProfile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_createProfile"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_createProfile_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="profileName", aname="_profileName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="names", aname="_names", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="values", aname="_values", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_createProfile")
            kw["aname"] = "_ICloudProvider_createProfile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._profileName = None
                    self._names = []
                    self._values = []
                    return
            Holder.__name__ = "ICloudProvider_createProfile_Holder"
            self.pyclass = Holder

    class ICloudProvider_createProfileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_createProfileResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_createProfileResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_createProfileResponse")
            kw["aname"] = "_ICloudProvider_createProfileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ICloudProvider_createProfileResponse_Holder"
            self.pyclass = Holder

    class ICloudProvider_importProfiles_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_importProfiles"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_importProfiles_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_importProfiles")
            kw["aname"] = "_ICloudProvider_importProfiles"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProvider_importProfiles_Holder"
            self.pyclass = Holder

    class ICloudProvider_importProfilesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_importProfilesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_importProfilesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_importProfilesResponse")
            kw["aname"] = "_ICloudProvider_importProfilesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ICloudProvider_importProfilesResponse_Holder"
            self.pyclass = Holder

    class ICloudProvider_restoreProfiles_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_restoreProfiles"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_restoreProfiles_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_restoreProfiles")
            kw["aname"] = "_ICloudProvider_restoreProfiles"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProvider_restoreProfiles_Holder"
            self.pyclass = Holder

    class ICloudProvider_restoreProfilesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_restoreProfilesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_restoreProfilesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_restoreProfilesResponse")
            kw["aname"] = "_ICloudProvider_restoreProfilesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ICloudProvider_restoreProfilesResponse_Holder"
            self.pyclass = Holder

    class ICloudProvider_saveProfiles_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_saveProfiles"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_saveProfiles_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_saveProfiles")
            kw["aname"] = "_ICloudProvider_saveProfiles"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProvider_saveProfiles_Holder"
            self.pyclass = Holder

    class ICloudProvider_saveProfilesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_saveProfilesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_saveProfilesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_saveProfilesResponse")
            kw["aname"] = "_ICloudProvider_saveProfilesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ICloudProvider_saveProfilesResponse_Holder"
            self.pyclass = Holder

    class ICloudProvider_getProfileByName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getProfileByName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getProfileByName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="profileName", aname="_profileName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getProfileByName")
            kw["aname"] = "_ICloudProvider_getProfileByName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._profileName = None
                    return
            Holder.__name__ = "ICloudProvider_getProfileByName_Holder"
            self.pyclass = Holder

    class ICloudProvider_getProfileByNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_getProfileByNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_getProfileByNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_getProfileByNameResponse")
            kw["aname"] = "_ICloudProvider_getProfileByNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICloudProvider_getProfileByNameResponse_Holder"
            self.pyclass = Holder

    class ICloudProvider_prepareUninstall_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_prepareUninstall"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_prepareUninstall_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_prepareUninstall")
            kw["aname"] = "_ICloudProvider_prepareUninstall"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProvider_prepareUninstall_Holder"
            self.pyclass = Holder

    class ICloudProvider_prepareUninstallResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProvider_prepareUninstallResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProvider_prepareUninstallResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProvider_prepareUninstallResponse")
            kw["aname"] = "_ICloudProvider_prepareUninstallResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ICloudProvider_prepareUninstallResponse_Holder"
            self.pyclass = Holder

    class ICloudProviderManager_getProviders_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProviderManager_getProviders"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProviderManager_getProviders_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProviderManager_getProviders")
            kw["aname"] = "_ICloudProviderManager_getProviders"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICloudProviderManager_getProviders_Holder"
            self.pyclass = Holder

    class ICloudProviderManager_getProvidersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProviderManager_getProvidersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProviderManager_getProvidersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProviderManager_getProvidersResponse")
            kw["aname"] = "_ICloudProviderManager_getProvidersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "ICloudProviderManager_getProvidersResponse_Holder"
            self.pyclass = Holder

    class ICloudProviderManager_getProviderById_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProviderManager_getProviderById"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProviderManager_getProviderById_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="providerId", aname="_providerId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProviderManager_getProviderById")
            kw["aname"] = "_ICloudProviderManager_getProviderById"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._providerId = None
                    return
            Holder.__name__ = "ICloudProviderManager_getProviderById_Holder"
            self.pyclass = Holder

    class ICloudProviderManager_getProviderByIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProviderManager_getProviderByIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProviderManager_getProviderByIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProviderManager_getProviderByIdResponse")
            kw["aname"] = "_ICloudProviderManager_getProviderByIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICloudProviderManager_getProviderByIdResponse_Holder"
            self.pyclass = Holder

    class ICloudProviderManager_getProviderByShortName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProviderManager_getProviderByShortName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProviderManager_getProviderByShortName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="providerName", aname="_providerName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProviderManager_getProviderByShortName")
            kw["aname"] = "_ICloudProviderManager_getProviderByShortName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._providerName = None
                    return
            Holder.__name__ = "ICloudProviderManager_getProviderByShortName_Holder"
            self.pyclass = Holder

    class ICloudProviderManager_getProviderByShortNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProviderManager_getProviderByShortNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProviderManager_getProviderByShortNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProviderManager_getProviderByShortNameResponse")
            kw["aname"] = "_ICloudProviderManager_getProviderByShortNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICloudProviderManager_getProviderByShortNameResponse_Holder"
            self.pyclass = Holder

    class ICloudProviderManager_getProviderByName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProviderManager_getProviderByName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProviderManager_getProviderByName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="providerName", aname="_providerName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProviderManager_getProviderByName")
            kw["aname"] = "_ICloudProviderManager_getProviderByName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._providerName = None
                    return
            Holder.__name__ = "ICloudProviderManager_getProviderByName_Holder"
            self.pyclass = Holder

    class ICloudProviderManager_getProviderByNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICloudProviderManager_getProviderByNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICloudProviderManager_getProviderByNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICloudProviderManager_getProviderByNameResponse")
            kw["aname"] = "_ICloudProviderManager_getProviderByNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICloudProviderManager_getProviderByNameResponse_Holder"
            self.pyclass = Holder

    class InvalidObjectFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "InvalidObjectFault"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.InvalidObjectFault_Dec.schema
            TClist = [ZSI.TC.String(pname="badObjectID", aname="_badObjectID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","InvalidObjectFault")
            kw["aname"] = "_InvalidObjectFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._badObjectID = None
                    return
            Holder.__name__ = "InvalidObjectFault_Holder"
            self.pyclass = Holder

    class RuntimeFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RuntimeFault"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.RuntimeFault_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="resultCode", aname="_resultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","RuntimeFault")
            kw["aname"] = "_RuntimeFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._resultCode = None
                    self._returnval = None
                    return
            Holder.__name__ = "RuntimeFault_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://www.virtualbox.org/)
